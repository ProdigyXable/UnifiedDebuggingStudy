Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Math-78
01:54:38.779 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Math-78 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Math/78.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Math/78.txt
01:54:42.573 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - ProFL successfully initialized
01:54:42.599 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/generalSusInfo.profl
01:54:42.601 [main] INFO edu.lu.uni.serval.tbar.TBarFixer - =======StaticBugFixer: Start to fix suspicious code======
01:54:42.602 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - org.apache.commons.math.MathRuntimeException ===37
01:54:43.699 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
public class MathRuntimeException extends RuntimeException {

    /** Serializable version identifier. */
    private static final long serialVersionUID = -5128983364075381060L;

    /**
     * Pattern used to build the message.
     */
    private final String pattern;

    /**
     * Arguments used to build the message.
     */
    private final Object[] arguments;

    /**
     * Constructs a new <code>MathRuntimeException</code> with specified
     * formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     */
    public MathRuntimeException(final String pattern, final Object ... arguments) {
        this.pattern   = pattern;
        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
    }

    /**
     * Constructs a new <code>MathRuntimeException</code> with specified
     * nested <code>Throwable</code> root cause.
     *
     * @param rootCause  the exception or error that caused this exception
     *                   to be thrown.
     */
    public MathRuntimeException(final Throwable rootCause) {
        super(rootCause);
        this.pattern   = getMessage();
        this.arguments = new Object[0];
    }

    /**
     * Constructs a new <code>MathRuntimeException</code> with specified
     * formatted detail message and nested <code>Throwable</code> root cause.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param rootCause the exception or error that caused this exception
     * to be thrown.
     * @param pattern format specifier
     * @param arguments format arguments
     */
    public MathRuntimeException(final Throwable rootCause,
                                final String pattern, final Object ... arguments) {
        super(rootCause);
        this.pattern   = pattern;
        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
    }

    /**
     * Translate a string to a given locale.
     * @param s string to translate
     * @param locale locale into which to translate the string
     * @return translated string or original string
     * for unsupported locales or unknown strings
     */
    private static String translate(final String s, final Locale locale) {
        try {
            ResourceBundle bundle =
                    ResourceBundle.getBundle("org.apache.commons.math.MessagesResources", locale);
            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {
                // the value of the resource is the translated string
                return bundle.getString(s);
            }

        } catch (MissingResourceException mre) {
            // do nothing here
        }

        // the locale is not supported or the resource is unknown
        // don't translate and fall back to using the string as is
        return s;

    }

    /**
     * Builds a message string by from a pattern and its arguments.
     * @param locale Locale in which the message should be translated
     * @param pattern format specifier
     * @param arguments format arguments
     * @return a message string
     */
    private static String buildMessage(final Locale locale, final String pattern,
                                       final Object ... arguments) {
        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
    }

    /** Gets the pattern used to build the message of this throwable.
     *
     * @return the pattern used to build the message of this throwable
     */
    public String getPattern() {
        return pattern;
    }

    /** Gets the arguments used to build the message of this throwable.
     *
     * @return the arguments used to build the message of this throwable
     */
    public Object[] getArguments() {
        return arguments.clone();
    }

    /** Gets the message in a specified locale.
     *
     * @param locale Locale in which the message should be translated
     *
     * @return localized message
     */
    public String getMessage(final Locale locale) {
        return buildMessage(locale, pattern, arguments);
    }

    /** {@inheritDoc} */
    @Override
    public String getMessage() {
        return getMessage(Locale.US);
    }

    /** {@inheritDoc} */
    @Override
    public String getLocalizedMessage() {
        return getMessage(Locale.getDefault());
    }

    /**
     * Prints the stack trace of this exception to the standard error stream.
     */
    @Override
    public void printStackTrace() {
        printStackTrace(System.err);
    }

    /**
     * Prints the stack trace of this exception to the specified stream.
     *
     * @param out  the <code>PrintStream</code> to use for output
     */
    @Override
    public void printStackTrace(final PrintStream out) {
        synchronized (out) {
            PrintWriter pw = new PrintWriter(out, false);
            printStackTrace(pw);
            // Flush the PrintWriter before it's GC'ed.
            pw.flush();
        }
    }

    /**
     * Constructs a new <code>ArithmeticException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ArithmeticException createArithmeticException(final String pattern,
                                                                final Object ... arguments) {
        return new ArithmeticException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 7705628723242533939L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>ArrayIndexOutOfBoundsException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ArrayIndexOutOfBoundsException createArrayIndexOutOfBoundsException(final String pattern,
                                                                                      final Object ... arguments) {
        return new ArrayIndexOutOfBoundsException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -3394748305449283486L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>EOFException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static EOFException createEOFException(final String pattern,
                                                  final Object ... arguments) {
        return new EOFException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 279461544586092584L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>IOException</code> with specified nested
     * <code>Throwable</code> root cause.
     * <p>This factory method allows chaining of other exceptions within an
     * <code>IOException</code> even for Java 5. The constructor for
     * <code>IOException</code> with a cause parameter was introduced only
     * with Java 6.</p>
     * @param rootCause the exception or error that caused this exception
     * to be thrown.
     * @return built exception
     */
    public static IOException createIOException(final Throwable rootCause) {
        IOException ioe = new IOException(rootCause.getLocalizedMessage());
        ioe.initCause(rootCause);
        return ioe;
    }

    /**
     * Constructs a new <code>IllegalArgumentException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static IllegalArgumentException createIllegalArgumentException(final String pattern,
                                                                          final Object ... arguments) {
        return new IllegalArgumentException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -6555453980658317913L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>IllegalArgumentException</code> with specified nested
     * <code>Throwable</code> root cause.
     * @param rootCause the exception or error that caused this exception
     * to be thrown.
     * @return built exception
     */
    public static IllegalArgumentException createIllegalArgumentException(final Throwable rootCause) {
        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());
        iae.initCause(rootCause);
        return iae;
    }

    /**
     * Constructs a new <code>IllegalStateException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static IllegalStateException createIllegalStateException(final String pattern,
                                                                    final Object ... arguments) {
        return new IllegalStateException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -95247648156277208L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>ConcurrentModificationException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ConcurrentModificationException createConcurrentModificationException(final String pattern,
                                                                                        final Object ... arguments) {
        return new ConcurrentModificationException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 6134247282754009421L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>NoSuchElementException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static NoSuchElementException createNoSuchElementException(final String pattern,
                                                                      final Object ... arguments) {
        return new NoSuchElementException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 7304273322489425799L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>NullPointerException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static NullPointerException createNullPointerException(final String pattern,
                                                                  final Object ... arguments) {
        return new NullPointerException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -3075660477939965216L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

   /**
     * Constructs a new <code>ParseException</code> with specified
     * formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param offset offset at which error occurred
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ParseException createParseException(final int offset,
                                                      final String pattern,
                                                      final Object ... arguments) {
        return new ParseException(null, offset) {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -1103502177342465975L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /** Create an {@link java.lang.RuntimeException} for an internal error.
     * @param cause underlying cause
     * @return an {@link java.lang.RuntimeException} for an internal error
     */
    public static RuntimeException createInternalError(final Throwable cause) {

        final String pattern  = "internal error, please fill a bug report at {0}";
        final String argument = "https://issues.apache.org/jira/browse/MATH";

        return new RuntimeException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -201865440834027016L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, argument);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, argument);
            }

        };

    }

}
01:54:43.700 [main] INFO edu.lu.uni.serval.tbar.TBarFixer - --- Looking at org.apache.commons.math.MathRuntimeException:37 ---
01:54:43.700 [main] INFO edu.lu.uni.serval.tbar.TBarFixer - --- Attempting to fix org/apache/commons/math/MathRuntimeException.java 37 ---
01:54:43.700 [main] INFO edu.lu.uni.serval.tbar.TBarFixer - [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:54:44.119 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: 
---------------- Testing New Patch ----------------
01:54:44.120 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:54:45.368 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
01:54:45.451 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - org.apache.commons.math.analysis.solvers.BrentSolver ===178
01:54:45.567 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Suspicious Code: 
throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, yMax);
01:54:45.567 [main] INFO edu.lu.uni.serval.tbar.TBarFixer - --- Looking at org.apache.commons.math.analysis.solvers.BrentSolver:178 ---
01:54:45.567 [main] INFO edu.lu.uni.serval.tbar.TBarFixer - --- Attempting to fix org/apache/commons/math/analysis/solvers/BrentSolver.java 178 ---
01:54:45.567 [main] INFO edu.lu.uni.serval.tbar.TBarFixer - [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        sign, max, yMin, yMax);
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        ret, max, yMin, yMax);
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, sign, yMin, yMax);
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, ret, yMin, yMax);
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, sign, yMax);
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, ret, yMax);
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, sign);
01:54:45.760 [main] DEBUG edu.lu.uni.serval.tbar.fixtemplate.FixTemplate - Patch Candidate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, ret);
---------------- Testing New Patch ----------------
01:54:45.761 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:54:47.231 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
01:54:47.231 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
01:55:14.110 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:55:14.110 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:55:14.110 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
01:55:14.110 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
01:55:14.110 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
01:55:14.131 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/aggregatedSusInfo.profl
01:55:14.131 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
01:55:14.131 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Failed Tests after fixing: 1 Math-78
---------------- Testing New Patch ----------------
01:55:14.132 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:55:16.183 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
01:55:16.183 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
01:55:43.124 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:55:43.124 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:55:43.124 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
01:55:43.125 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
01:55:43.125 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
01:55:43.219 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/aggregatedSusInfo.profl
01:55:43.219 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
01:55:43.219 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Failed Tests after fixing: 1 Math-78
---------------- Testing New Patch ----------------
01:55:43.220 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:55:45.281 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
01:55:45.281 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
01:56:14.351 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:56:14.352 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:56:14.352 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
01:56:14.352 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
01:56:14.352 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
01:56:14.393 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/aggregatedSusInfo.profl
01:56:14.393 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
01:56:14.393 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Failed Tests after fixing: 1 Math-78
---------------- Testing New Patch ----------------
01:56:14.394 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:56:16.332 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
01:56:16.332 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
01:56:42.247 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:56:42.248 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:56:42.248 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
01:56:42.248 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
01:56:42.248 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
01:56:42.751 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/aggregatedSusInfo.profl
01:56:42.752 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
01:56:42.752 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Failed Tests after fixing: 1 Math-78
---------------- Testing New Patch ----------------
01:56:42.752 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:56:44.617 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
01:56:44.617 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
01:57:09.948 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:57:09.948 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:57:09.948 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
01:57:09.948 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
01:57:09.948 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
01:57:17.307 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/aggregatedSusInfo.profl
01:57:17.307 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
01:57:17.307 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Failed Tests after fixing: 1 Math-78
---------------- Testing New Patch ----------------
01:57:17.308 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:57:19.213 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
01:57:19.213 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
01:57:43.414 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:57:43.415 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:57:43.415 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
01:57:43.415 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
01:57:43.415 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
01:59:24.660 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/aggregatedSusInfo.profl
01:59:24.661 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
01:59:24.661 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Failed Tests after fixing: 1 Math-78
---------------- Testing New Patch ----------------
01:59:24.662 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
01:59:26.026 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
01:59:26.026 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
01:59:46.119 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:59:46.119 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
01:59:46.119 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
01:59:46.120 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
01:59:46.120 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
02:23:19.538 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/tbar/ProFL-TBarFixer/Math-78/aggregatedSusInfo.profl
02:23:19.538 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
02:23:19.538 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Failed Tests after fixing: 1 Math-78
---------------- Testing New Patch ----------------
02:23:19.539 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Compiling
02:23:20.683 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Finish of compiling.
02:23:20.683 [main] DEBUG edu.lu.uni.serval.tbar.AbstractFixer - Test previously failed test cases.
02:23:37.523 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
02:23:37.524 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
02:23:37.524 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
02:23:37.524 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
02:23:37.524 [main] INFO edu.lu.uni.serval.tbar.AbstractFixer - [ProFL] NoneFix found
