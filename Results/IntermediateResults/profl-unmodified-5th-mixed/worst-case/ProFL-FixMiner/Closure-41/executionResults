Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Closure-41
01:53:02.311 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 Failed Tests: 3
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/41.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/41.txt
01:56:56.130 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
01:56:56.216 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-41/generalSusInfo.profl
01:56:56.340 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-41/aggregatedSusInfo.profl
01:56:56.344 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
01:56:56.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===700
01:56:57.170 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
objectType = objectType.getImplicitPrototype();
objectType = objectType.getImplicitPrototype(true);
objectType = objectType.getImplicitPrototype(false);
01:56:57.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:58.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:56:58.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:59.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
objectType = objectType.getParentScope();
objectType = objectType.getTypeOfThis();
01:56:59.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:00.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:00.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:00.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType != null) {


}

01:57:00.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:01.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

01:57:01.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:02.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:02.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:03.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

01:57:03.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:04.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:04.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===709
01:57:04.628 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return objectType.toString() + "." + propName;
if (objectType != null) {


}

if (propName != null) {


}

01:57:04.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:05.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:05.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:06.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

if (propName == null) {
    return null;
}

if (propName == null) {
    throw new IllegalArgumentException("Empty variable: " + propName);
}

01:57:06.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:07.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:07.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:08.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:08.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:09.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:09.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:10.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

01:57:10.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:10.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:10.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeCheck ===1630
01:57:11.104 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(true, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(false, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, true, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, false, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, true, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, false, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              true, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              false, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              true, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              false, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), true, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), false, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              true, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              false, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", true);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", false);
01:57:11.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:12.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:12.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:12.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:12.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:13.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:13.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:14.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:14.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:15.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:15.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:16.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:16.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:17.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:17.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:18.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:18.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:19.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:19.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:20.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:20.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:21.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:21.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:22.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:22.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:23.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:23.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:24.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:24.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:25.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:25.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:26.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
report(maxArgs, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(minArgs, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(numArgs, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(argument, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(parameter, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ordinal, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(parameters, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(arguments, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(functionType, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNEXPECTED_TOKEN, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(BAD_DELETE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(DETERMINISTIC_TEST, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(DETERMINISTIC_TEST_NO_RESULT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INEXISTENT_ENUM_ELEMENT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INEXISTENT_PROPERTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(NOT_A_CONSTRUCTOR, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(BIT_OPERATION, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(NOT_CALLABLE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(CONSTRUCTOR_NOT_CALLABLE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(FUNCTION_MASKS_VARIABLE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(MULTIPLE_VAR_DEF, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ENUM_DUP, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ENUM_NOT_CONSTANT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INVALID_INTERFACE_MEMBER_DECLARATION, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INTERFACE_FUNCTION_NOT_EMPTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(CONFLICTING_EXTENDED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(CONFLICTING_IMPLEMENTED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(BAD_IMPLEMENTED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(HIDDEN_SUPERCLASS_PROPERTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(HIDDEN_INTERFACE_PROPERTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNKNOWN_OVERRIDE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INTERFACE_METHOD_OVERRIDE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNKNOWN_EXPR_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNRESOLVED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ILLEGAL_IMPLICIT_CAST, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(EXPECTED_THIS_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ALL_DIAGNOSTICS, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.compiler, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.validator, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reverseInterpreter, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.typeRegistry, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.topScope, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.scopeCreator, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reportMissingOverride, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reportUnknownTypes, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reportMissingProperties, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.inferJSDocInfo, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.typedCount, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.nullCount, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.unknownCount, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.inExterns, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.noTypeCheckSection, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report( call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(maxArgs, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(minArgs, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(numArgs, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(argument, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(parameter, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ordinal, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(parameters, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(arguments, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(functionType, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNEXPECTED_TOKEN, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(BAD_DELETE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(DETERMINISTIC_TEST, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(DETERMINISTIC_TEST_NO_RESULT, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INEXISTENT_ENUM_ELEMENT, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INEXISTENT_PROPERTY, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(NOT_A_CONSTRUCTOR, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(BIT_OPERATION, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(NOT_CALLABLE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(CONSTRUCTOR_NOT_CALLABLE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(FUNCTION_MASKS_VARIABLE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(MULTIPLE_VAR_DEF, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ENUM_DUP, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ENUM_NOT_CONSTANT, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INVALID_INTERFACE_MEMBER_DECLARATION, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INTERFACE_FUNCTION_NOT_EMPTY, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(CONFLICTING_EXTENDED_TYPE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(CONFLICTING_IMPLEMENTED_TYPE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(BAD_IMPLEMENTED_TYPE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(HIDDEN_SUPERCLASS_PROPERTY, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(HIDDEN_INTERFACE_PROPERTY, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNKNOWN_OVERRIDE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INTERFACE_METHOD_OVERRIDE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNKNOWN_EXPR_TYPE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(UNRESOLVED_TYPE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ILLEGAL_IMPLICIT_CAST, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(EXPECTED_THIS_TYPE, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(ALL_DIAGNOSTICS, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.compiler, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.validator, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reverseInterpreter, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.typeRegistry, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.topScope, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.scopeCreator, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reportMissingOverride, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reportUnknownTypes, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.reportMissingProperties, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.inferJSDocInfo, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.typedCount, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.nullCount, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.unknownCount, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.inExterns, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(this.noTypeCheckSection, t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, maxArgs, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, minArgs, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, numArgs, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, argument, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, parameter, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ordinal, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, parameters, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, arguments, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, functionType, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNEXPECTED_TOKEN, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, BAD_DELETE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, DETERMINISTIC_TEST, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, DETERMINISTIC_TEST_NO_RESULT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INEXISTENT_ENUM_ELEMENT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INEXISTENT_PROPERTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, NOT_A_CONSTRUCTOR, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, BIT_OPERATION, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, NOT_CALLABLE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, CONSTRUCTOR_NOT_CALLABLE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, FUNCTION_MASKS_VARIABLE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, MULTIPLE_VAR_DEF, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ENUM_DUP, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ENUM_NOT_CONSTANT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INVALID_INTERFACE_MEMBER_DECLARATION, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INTERFACE_FUNCTION_NOT_EMPTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, CONFLICTING_EXTENDED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, CONFLICTING_IMPLEMENTED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, BAD_IMPLEMENTED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, HIDDEN_SUPERCLASS_PROPERTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, HIDDEN_INTERFACE_PROPERTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNKNOWN_OVERRIDE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INTERFACE_METHOD_OVERRIDE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNKNOWN_EXPR_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNRESOLVED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ILLEGAL_IMPLICIT_CAST, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, EXPECTED_THIS_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ALL_DIAGNOSTICS, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.compiler, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.validator, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reverseInterpreter, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.typeRegistry, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.topScope, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.scopeCreator, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reportMissingOverride, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reportUnknownTypes, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reportMissingProperties, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.inferJSDocInfo, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.typedCount, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.nullCount, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.unknownCount, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.inExterns, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.noTypeCheckSection, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t,  WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, maxArgs, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, minArgs, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, numArgs, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, argument, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, parameter, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ordinal, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, parameters, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, arguments, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, functionType, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNEXPECTED_TOKEN, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, BAD_DELETE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, DETERMINISTIC_TEST, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, DETERMINISTIC_TEST_NO_RESULT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INEXISTENT_ENUM_ELEMENT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INEXISTENT_PROPERTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, NOT_A_CONSTRUCTOR, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, BIT_OPERATION, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, NOT_CALLABLE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, CONSTRUCTOR_NOT_CALLABLE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, FUNCTION_MASKS_VARIABLE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, MULTIPLE_VAR_DEF, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ENUM_DUP, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ENUM_NOT_CONSTANT, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INVALID_INTERFACE_MEMBER_DECLARATION, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INTERFACE_FUNCTION_NOT_EMPTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, CONFLICTING_EXTENDED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, CONFLICTING_IMPLEMENTED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, BAD_IMPLEMENTED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, HIDDEN_SUPERCLASS_PROPERTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, HIDDEN_INTERFACE_PROPERTY, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNKNOWN_OVERRIDE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INTERFACE_METHOD_OVERRIDE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNKNOWN_EXPR_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, UNRESOLVED_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ILLEGAL_IMPLICIT_CAST, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, EXPECTED_THIS_TYPE, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, ALL_DIAGNOSTICS, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.compiler, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.validator, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reverseInterpreter, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.typeRegistry, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.topScope, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.scopeCreator, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reportMissingOverride, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reportUnknownTypes, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.reportMissingProperties, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.inferJSDocInfo, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.typedCount, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.nullCount, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.unknownCount, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.inExterns, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, this.noTypeCheckSection, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, maxArgs,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, minArgs,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, numArgs,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, argument,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, parameter,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ordinal,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, parameters,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, arguments,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, functionType,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNEXPECTED_TOKEN,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, BAD_DELETE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, DETERMINISTIC_TEST,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, DETERMINISTIC_TEST_NO_RESULT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INEXISTENT_ENUM_ELEMENT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INEXISTENT_PROPERTY,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, NOT_A_CONSTRUCTOR,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, BIT_OPERATION,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, NOT_CALLABLE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, CONSTRUCTOR_NOT_CALLABLE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, FUNCTION_MASKS_VARIABLE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, MULTIPLE_VAR_DEF,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ENUM_DUP,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ENUM_NOT_CONSTANT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INVALID_INTERFACE_MEMBER_DECLARATION,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INTERFACE_FUNCTION_NOT_EMPTY,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, CONFLICTING_EXTENDED_TYPE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, CONFLICTING_IMPLEMENTED_TYPE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, BAD_IMPLEMENTED_TYPE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, HIDDEN_SUPERCLASS_PROPERTY,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, HIDDEN_INTERFACE_PROPERTY,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNKNOWN_OVERRIDE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INTERFACE_METHOD_OVERRIDE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNKNOWN_EXPR_TYPE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNRESOLVED_TYPE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ILLEGAL_IMPLICIT_CAST,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, EXPECTED_THIS_TYPE,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ALL_DIAGNOSTICS,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.compiler,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.validator,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reverseInterpreter,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.typeRegistry,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.topScope,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.scopeCreator,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reportMissingOverride,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reportUnknownTypes,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reportMissingProperties,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.inferJSDocInfo,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.typedCount,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.nullCount,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.unknownCount,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.inExterns,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.noTypeCheckSection,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, 
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, maxArgs, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, minArgs, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, numArgs, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, argument, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, parameter, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ordinal, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, parameters, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, arguments, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, functionType, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNEXPECTED_TOKEN, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, BAD_DELETE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, DETERMINISTIC_TEST, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, DETERMINISTIC_TEST_NO_RESULT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INEXISTENT_ENUM_ELEMENT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INEXISTENT_PROPERTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, NOT_A_CONSTRUCTOR, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, BIT_OPERATION, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, NOT_CALLABLE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, CONSTRUCTOR_NOT_CALLABLE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, FUNCTION_MASKS_VARIABLE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, MULTIPLE_VAR_DEF, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ENUM_DUP, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ENUM_NOT_CONSTANT, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INVALID_INTERFACE_MEMBER_DECLARATION, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INTERFACE_FUNCTION_NOT_EMPTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, CONFLICTING_EXTENDED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, CONFLICTING_IMPLEMENTED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, BAD_IMPLEMENTED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, HIDDEN_SUPERCLASS_PROPERTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, HIDDEN_INTERFACE_PROPERTY, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNKNOWN_OVERRIDE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INTERFACE_METHOD_OVERRIDE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNKNOWN_EXPR_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, UNRESOLVED_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ILLEGAL_IMPLICIT_CAST, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, EXPECTED_THIS_TYPE, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, ALL_DIAGNOSTICS, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.compiler, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.validator, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reverseInterpreter, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.typeRegistry, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.topScope, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.scopeCreator, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reportMissingOverride, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reportUnknownTypes, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.reportMissingProperties, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.inferJSDocInfo, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.typedCount, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.nullCount, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.unknownCount, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.inExterns, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, this.noTypeCheckSection, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              maxArgs, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              minArgs, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              numArgs, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              argument, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              parameter, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              ordinal, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              parameters, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              arguments, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              functionType, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              UNEXPECTED_TOKEN, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              BAD_DELETE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              DETERMINISTIC_TEST, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              DETERMINISTIC_TEST_NO_RESULT, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              INEXISTENT_ENUM_ELEMENT, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              INEXISTENT_PROPERTY, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              NOT_A_CONSTRUCTOR, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              BIT_OPERATION, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              NOT_CALLABLE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              CONSTRUCTOR_NOT_CALLABLE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              FUNCTION_MASKS_VARIABLE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              MULTIPLE_VAR_DEF, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              ENUM_DUP, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              ENUM_NOT_CONSTANT, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              INVALID_INTERFACE_MEMBER_DECLARATION, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              INTERFACE_FUNCTION_NOT_EMPTY, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              CONFLICTING_EXTENDED_TYPE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              CONFLICTING_IMPLEMENTED_TYPE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              BAD_IMPLEMENTED_TYPE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              HIDDEN_SUPERCLASS_PROPERTY, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              HIDDEN_INTERFACE_PROPERTY, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              UNKNOWN_OVERRIDE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              INTERFACE_METHOD_OVERRIDE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              UNKNOWN_EXPR_TYPE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              UNRESOLVED_TYPE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              ILLEGAL_IMPLICIT_CAST, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              EXPECTED_THIS_TYPE, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              ALL_DIAGNOSTICS, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.compiler, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.validator, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.reverseInterpreter, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.typeRegistry, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.topScope, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.scopeCreator, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.reportMissingOverride, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.reportUnknownTypes, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.reportMissingProperties, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.inferJSDocInfo, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.typedCount, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.nullCount, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.unknownCount, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.inExterns, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              this.noTypeCheckSection, validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              maxArgs, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              minArgs, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              numArgs, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              argument, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              parameter, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              ordinal, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              parameters, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              arguments, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              functionType, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              UNEXPECTED_TOKEN, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              BAD_DELETE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              DETERMINISTIC_TEST, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              DETERMINISTIC_TEST_NO_RESULT, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              INEXISTENT_ENUM_ELEMENT, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              INEXISTENT_PROPERTY, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              NOT_A_CONSTRUCTOR, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              BIT_OPERATION, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              NOT_CALLABLE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              CONSTRUCTOR_NOT_CALLABLE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              FUNCTION_MASKS_VARIABLE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              MULTIPLE_VAR_DEF, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              ENUM_DUP, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              ENUM_NOT_CONSTANT, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              INVALID_INTERFACE_MEMBER_DECLARATION, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              INTERFACE_FUNCTION_NOT_EMPTY, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              CONFLICTING_EXTENDED_TYPE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              CONFLICTING_IMPLEMENTED_TYPE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              BAD_IMPLEMENTED_TYPE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              HIDDEN_SUPERCLASS_PROPERTY, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              HIDDEN_INTERFACE_PROPERTY, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              UNKNOWN_OVERRIDE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              INTERFACE_METHOD_OVERRIDE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              UNKNOWN_EXPR_TYPE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              UNRESOLVED_TYPE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              ILLEGAL_IMPLICIT_CAST, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              EXPECTED_THIS_TYPE, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              ALL_DIAGNOSTICS, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.compiler, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.validator, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.reverseInterpreter, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.typeRegistry, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.topScope, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.scopeCreator, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.reportMissingOverride, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.reportUnknownTypes, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.reportMissingProperties, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.inferJSDocInfo, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.typedCount, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.nullCount, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.unknownCount, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.inExterns, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              this.noTypeCheckSection, String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), maxArgs, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), minArgs, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), numArgs, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), argument, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), parameter, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), ordinal, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), parameters, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), arguments, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), functionType, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), UNEXPECTED_TOKEN, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), BAD_DELETE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), DETERMINISTIC_TEST, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), DETERMINISTIC_TEST_NO_RESULT, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), INEXISTENT_ENUM_ELEMENT, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), INEXISTENT_PROPERTY, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), NOT_A_CONSTRUCTOR, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), BIT_OPERATION, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), NOT_CALLABLE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), CONSTRUCTOR_NOT_CALLABLE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), FUNCTION_MASKS_VARIABLE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), MULTIPLE_VAR_DEF, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), ENUM_DUP, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), ENUM_NOT_CONSTANT, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), INVALID_INTERFACE_MEMBER_DECLARATION, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), INTERFACE_FUNCTION_NOT_EMPTY, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), CONFLICTING_EXTENDED_TYPE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), CONFLICTING_IMPLEMENTED_TYPE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), BAD_IMPLEMENTED_TYPE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), HIDDEN_SUPERCLASS_PROPERTY, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), HIDDEN_INTERFACE_PROPERTY, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), UNKNOWN_OVERRIDE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), INTERFACE_METHOD_OVERRIDE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), UNKNOWN_EXPR_TYPE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), UNRESOLVED_TYPE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), ILLEGAL_IMPLICIT_CAST, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), EXPECTED_THIS_TYPE, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), ALL_DIAGNOSTICS, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.compiler, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.validator, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.reverseInterpreter, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.typeRegistry, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.topScope, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.scopeCreator, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.reportMissingOverride, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.reportUnknownTypes, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.reportMissingProperties, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.inferJSDocInfo, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.typedCount, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.nullCount, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.unknownCount, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.inExterns, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), this.noTypeCheckSection, String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              minArgs, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              numArgs, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              argument, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              parameter, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              ordinal, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              parameters, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              arguments, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              functionType, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              UNEXPECTED_TOKEN, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              BAD_DELETE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              DETERMINISTIC_TEST, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              DETERMINISTIC_TEST_NO_RESULT, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              INEXISTENT_ENUM_ELEMENT, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              INEXISTENT_PROPERTY, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              NOT_A_CONSTRUCTOR, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              BIT_OPERATION, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              NOT_CALLABLE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              CONSTRUCTOR_NOT_CALLABLE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              FUNCTION_MASKS_VARIABLE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              MULTIPLE_VAR_DEF, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              ENUM_DUP, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              ENUM_NOT_CONSTANT, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              INVALID_INTERFACE_MEMBER_DECLARATION, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              INTERFACE_FUNCTION_NOT_EMPTY, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              CONFLICTING_EXTENDED_TYPE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              CONFLICTING_IMPLEMENTED_TYPE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              BAD_IMPLEMENTED_TYPE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              HIDDEN_SUPERCLASS_PROPERTY, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              HIDDEN_INTERFACE_PROPERTY, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              UNKNOWN_OVERRIDE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              INTERFACE_METHOD_OVERRIDE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              UNKNOWN_EXPR_TYPE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              UNRESOLVED_TYPE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              ILLEGAL_IMPLICIT_CAST, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              EXPECTED_THIS_TYPE, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              ALL_DIAGNOSTICS, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.compiler, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.validator, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.reverseInterpreter, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.typeRegistry, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.topScope, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.scopeCreator, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.reportMissingOverride, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.reportUnknownTypes, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.reportMissingProperties, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.inferJSDocInfo, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.typedCount, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.nullCount, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.unknownCount, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.inExterns, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              this.noTypeCheckSection, maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "");
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", maxArgs);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", minArgs);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", numArgs);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", argument);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", parameter);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", ordinal);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", parameters);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", arguments);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", functionType);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", UNEXPECTED_TOKEN);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", BAD_DELETE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", DETERMINISTIC_TEST);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", DETERMINISTIC_TEST_NO_RESULT);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", INEXISTENT_ENUM_ELEMENT);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", INEXISTENT_PROPERTY);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", NOT_A_CONSTRUCTOR);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", BIT_OPERATION);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", NOT_CALLABLE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", CONSTRUCTOR_NOT_CALLABLE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", FUNCTION_MASKS_VARIABLE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", MULTIPLE_VAR_DEF);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", ENUM_DUP);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", ENUM_NOT_CONSTANT);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", INVALID_INTERFACE_MEMBER_DECLARATION);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", INTERFACE_FUNCTION_NOT_EMPTY);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", CONFLICTING_EXTENDED_TYPE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", CONFLICTING_IMPLEMENTED_TYPE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", BAD_IMPLEMENTED_TYPE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", HIDDEN_SUPERCLASS_PROPERTY);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", HIDDEN_INTERFACE_PROPERTY);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", UNKNOWN_OVERRIDE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", INTERFACE_METHOD_OVERRIDE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", UNKNOWN_EXPR_TYPE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", UNRESOLVED_TYPE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", ILLEGAL_IMPLICIT_CAST);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", EXPECTED_THIS_TYPE);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", ALL_DIAGNOSTICS);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.compiler);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.validator);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.reverseInterpreter);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.typeRegistry);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.topScope);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.scopeCreator);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.reportMissingOverride);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.reportUnknownTypes);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.reportMissingProperties);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.inferJSDocInfo);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.typedCount);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.nullCount);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.unknownCount);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.inExterns);
report(t, call, WRONG_ARGUMENT_COUNT,
              validator.getReadableJSTypeName(call.getFirstChild(), false),
              String.valueOf(numArgs), String.valueOf(minArgs),
              maxArgs != Integer.MAX_VALUE ?
              " and no more than " + maxArgs + " argument(s)" : "", this.noTypeCheckSection);
01:57:26.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:27.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:27.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:28.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:28.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:29.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:29.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:29.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:29.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:30.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:30.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:31.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:31.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:32.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:32.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:33.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:33.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:34.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:34.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:35.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:35.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:36.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:36.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:37.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:37.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:38.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:38.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:39.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:39.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:40.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:40.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:41.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:41.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:42.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:42.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:43.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:43.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:43.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:43.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:44.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:44.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:45.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:45.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:46.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:46.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:47.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:47.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:48.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:48.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:49.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:49.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:50.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:50.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:51.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:51.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:52.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:52.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:53.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:53.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:54.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:54.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:54.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:54.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:55.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:55.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:56.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:56.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:57.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:57.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:58.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:58.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:59.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:57:59.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:00.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:00.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:01.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:01.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:02.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:02.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:03.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:03.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:04.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:04.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:05.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:05.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:06.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:06.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:07.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:07.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:08.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:08.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:08.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:08.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:09.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:09.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:10.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:10.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:11.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:11.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:12.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:12.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:13.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:13.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:14.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:14.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:15.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:15.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:16.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:16.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:17.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:17.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:18.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:18.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:19.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:19.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:20.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:20.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:21.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:21.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:22.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:22.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:23.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:23.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:24.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:24.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:25.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:25.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:26.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:26.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:26.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:26.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:27.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:27.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:28.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:28.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:29.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:29.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:30.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:30.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:31.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:31.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:32.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:32.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:33.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:33.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:34.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:34.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:35.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:35.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:36.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:36.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:37.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:37.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:38.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:38.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:39.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:39.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:40.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:40.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:41.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:41.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:41.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:41.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:42.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:42.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:43.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:43.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:44.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:44.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:45.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:45.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:46.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:46.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:47.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:47.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:48.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:48.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:49.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:49.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:50.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:50.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:51.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:51.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:52.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:52.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:52.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:52.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:53.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:53.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:54.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:54.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:55.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:55.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:56.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:56.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:57.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:57.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:58.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:58.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:59.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:58:59.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:00.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:00.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:01.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:01.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:02.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:02.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:03.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:03.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:04.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:04.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:05.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:05.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:06.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:06.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:06.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:06.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:07.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:07.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:08.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:08.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:09.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:09.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:10.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:10.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:11.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:11.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:12.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:12.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:13.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:13.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:14.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:14.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:15.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:15.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:16.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:16.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:17.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:17.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:18.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:18.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:19.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:19.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:19.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:19.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:20.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:20.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:21.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:21.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:22.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:22.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:23.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:23.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:24.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:24.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:25.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:25.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:26.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:26.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:27.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:27.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:28.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:28.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:29.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:29.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:30.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:30.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:30.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:30.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:31.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:31.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:32.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:32.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:33.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:33.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:34.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:34.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:35.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:35.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:36.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:36.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:37.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:37.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:38.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:38.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:39.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:39.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:40.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:40.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:41.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:41.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:42.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:42.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:43.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:43.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:43.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:43.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:45.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:45.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:45.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:45.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:46.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:46.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:47.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:47.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:48.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:48.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:49.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:49.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:50.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:50.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:51.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:51.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:52.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:52.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:53.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:53.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:54.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:54.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:55.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:55.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:56.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:56.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:57.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:57.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:58.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:58.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:59.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:59.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:59.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
01:59:59.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:00.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:00.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:01.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:01.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:02.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:02.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:03.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:03.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:04.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:04.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:05.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:05.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:06.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:06.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:07.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:07.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:08.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:08.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:09.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:09.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:10.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:10.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:11.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:11.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:12.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:12.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:13.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:13.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:13.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:13.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:14.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:14.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:15.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:15.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:16.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:16.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:17.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:17.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:18.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:18.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:19.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:19.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:20.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:20.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:21.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:21.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:22.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:22.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:23.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:23.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:24.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:24.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:24.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:24.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:25.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:25.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:26.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:26.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:27.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:27.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:28.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:28.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:29.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:29.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:30.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:30.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:31.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:31.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:32.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:32.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:33.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:33.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:34.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:34.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:35.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:35.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:35.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:35.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:36.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:36.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:37.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:37.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:38.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:38.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:39.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:39.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:40.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:40.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:41.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:41.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:42.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:42.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:43.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:43.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:44.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:44.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:45.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:45.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:46.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:46.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:47.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:47.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:47.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:47.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:48.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:48.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:49.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:49.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:50.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:50.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:51.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:51.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:52.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:52.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:53.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:53.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:54.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:54.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:55.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:55.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:56.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:56.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:57.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:57.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:58.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:58.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:59.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:00:59.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:00.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:00.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:01.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:01.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:01.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:01.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:02.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:02.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:03.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:03.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:04.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:04.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:05.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:05.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:06.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:06.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:07.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:07.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:08.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:08.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:09.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:09.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:10.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:10.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:11.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:11.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:12.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:12.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:13.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:13.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:14.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:14.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:15.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:15.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:16.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:16.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:17.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:17.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:17.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:17.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:18.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:18.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:19.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:19.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:20.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:20.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:21.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:21.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:22.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:22.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:23.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:23.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:24.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:24.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:25.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:25.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:26.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:26.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:27.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:27.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:28.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:28.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:29.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:29.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:30.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:30.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:31.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:31.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:32.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:32.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:32.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:32.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:33.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:33.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:34.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:34.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:35.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:35.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:36.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:36.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:37.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:37.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:38.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:38.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:39.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:39.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:40.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:40.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:41.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:41.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:42.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:42.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:43.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:43.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:44.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:44.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:45.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:45.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:45.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:45.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:46.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:46.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:47.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:47.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:48.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:48.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:49.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:49.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:50.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:50.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:51.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:51.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:52.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:52.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:53.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:53.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:54.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:54.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:55.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:55.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:56.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:56.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:56.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:56.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:57.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:57.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:58.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:58.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:59.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:01:59.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:00.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:00.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:01.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:01.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:02.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:02.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:03.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:03.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:04.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:04.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:05.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:05.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:06.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:06.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:07.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:07.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:07.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:07.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:08.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:08.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:09.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:09.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:10.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:10.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:11.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:11.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:12.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:12.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:13.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:13.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:14.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:14.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:15.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:15.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:16.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:16.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:17.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:17.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:18.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:18.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:19.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:19.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:20.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:20.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:20.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:20.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:21.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:21.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:22.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:22.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:23.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:23.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:24.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:24.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:25.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:25.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:26.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:26.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:27.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:27.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:28.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:28.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:29.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:29.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:30.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:30.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:31.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:31.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:32.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:32.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:33.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:33.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:34.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:34.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:35.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:35.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:36.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:36.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:36.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:37.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:37.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:37.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:38.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:38.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:39.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:39.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:40.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:40.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:41.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:41.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:42.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:42.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:43.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:43.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:44.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:44.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:45.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:45.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:46.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:46.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:47.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:47.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:48.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:48.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:49.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:49.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:50.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:50.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:51.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:51.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:51.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:51.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:52.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:52.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:53.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:53.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:54.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:54.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:55.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:55.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:56.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:56.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:57.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:57.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:58.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:58.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:59.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:02:59.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:00.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:00.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:01.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:01.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:02.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:02.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:03.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:03.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:04.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:04.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:04.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:04.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:05.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:05.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:06.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:06.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:07.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:07.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:08.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:08.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:09.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:09.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:10.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:10.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:11.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:11.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:12.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:12.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:13.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:13.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:14.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:14.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:15.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:15.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:15.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:15.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:16.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:16.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:17.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:17.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:18.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:18.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:19.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:19.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:20.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:20.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:21.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:21.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:22.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:22.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:23.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:23.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:24.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:24.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:25.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:25.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:26.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:26.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:27.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:27.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:28.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:28.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:29.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:29.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:30.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:30.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:31.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:31.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:32.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:32.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:33.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:33.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:33.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:33.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:34.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:34.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:35.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:35.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:36.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:36.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:37.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:37.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:38.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:38.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:39.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:39.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:40.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:40.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:41.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:41.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:42.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:42.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:43.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:43.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:44.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:44.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:44.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:44.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:45.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:45.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:46.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:46.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:47.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:47.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:48.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:48.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:49.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:49.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:50.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:50.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:51.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:51.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:52.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:52.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:53.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:53.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:54.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:54.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:55.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:55.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:56.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:56.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:57.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:57.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:57.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:57.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:58.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:58.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:59.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:03:59.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:00.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:00.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:01.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:01.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:02.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:02.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:03.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:03.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:04.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:04.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:05.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:05.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:06.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:06.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:07.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:07.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:08.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:08.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:09.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:09.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:10.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:10.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:10.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:10.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:11.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:11.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:12.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:12.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:13.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:13.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:14.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:14.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:15.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:15.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:16.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:16.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:17.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:17.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:18.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:18.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:19.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:19.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:20.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:20.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:21.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:21.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:22.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:22.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:23.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:23.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:24.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:24.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:25.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:25.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:25.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:25.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:26.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:26.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:27.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:27.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:28.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:28.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:29.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:29.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:30.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:30.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:31.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:31.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:32.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:32.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:33.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:33.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:34.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:34.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:35.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:35.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:36.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:36.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:37.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:37.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:38.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:38.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:39.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:39.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:39.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:39.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:40.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:40.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:41.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:41.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:42.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:42.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:43.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:43.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:44.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:44.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:45.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:45.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:46.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:46.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:47.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:47.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:48.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:48.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:49.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:49.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:50.031 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:50.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:50.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:50.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:51.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:51.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:52.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:52.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:53.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:53.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:54.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:54.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:55.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:55.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:56.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:56.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:57.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:57.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:58.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:58.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:59.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:04:59.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:00.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:00.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:01.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:01.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:02.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:02.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:02.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:02.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:03.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:03.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:04.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:04.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:05.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:05.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:06.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:06.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:07.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:07.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:08.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:08.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:09.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:09.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:10.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:10.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:11.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:11.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:12.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:12.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:13.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:13.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:14.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:14.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:15.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:15.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:16.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:16.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:16.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:16.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:17.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:17.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:18.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:18.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:19.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:19.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:20.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:20.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:21.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:21.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:22.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:22.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:23.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:23.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:24.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:24.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:25.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:25.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:26.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:26.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:27.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:27.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:28.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:28.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:29.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:29.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:30.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:30.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:31.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:31.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:32.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:32.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:33.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:33.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:34.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:34.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:34.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:34.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:35.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:35.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:36.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:36.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:37.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:37.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:38.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:38.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:39.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:39.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:40.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:40.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:41.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:41.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:42.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:42.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:43.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:43.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:44.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:44.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:45.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:45.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:46.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:46.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:46.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:46.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:47.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:47.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:48.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:48.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:49.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:49.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:50.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:50.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:51.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:51.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:52.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:52.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:53.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:53.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:54.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:54.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:55.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:55.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:56.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:56.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:57.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:57.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:58.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:58.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:58.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:58.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:59.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:05:59.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:00.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:00.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:01.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:01.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:02.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:02.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:03.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:03.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:04.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:04.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:05.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:05.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:06.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:06.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:07.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:07.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:08.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:08.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:09.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:09.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:10.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:10.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:10.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:10.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:11.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:11.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:12.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:12.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:13.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:13.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:14.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:14.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:15.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:15.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:16.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:16.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:17.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:17.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:18.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:18.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:19.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:19.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:20.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:20.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:21.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:21.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:22.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:22.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:23.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:23.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:24.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:24.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:24.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:24.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:25.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:25.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:26.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:26.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:27.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:27.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:28.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:28.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:29.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:29.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:30.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:30.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:31.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:31.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:32.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:32.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:33.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:33.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:34.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:34.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:35.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:35.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:36.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:36.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:37.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:37.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:37.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:37.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:38.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:38.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:39.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:39.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:40.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:40.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:41.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:41.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:42.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:42.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:43.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:43.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:44.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:44.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:45.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:45.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:46.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:46.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:47.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:47.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:48.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:48.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:49.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:49.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:49.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:49.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:50.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:50.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:51.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (t != null) {


}

if (call != null) {


}

if (WRONG_ARGUMENT_COUNT != null) {


}

if (validator != null) {


}

if (call != null) {


}

02:06:51.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:52.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:52.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:53.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:53.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:54.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:54.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:55.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:55.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:56.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (t == null) {
    return;
}

if (t == null) {
    throw new IllegalArgumentException("Empty variable: " + t);
}

if (call == null) {
    return;
}

if (call == null) {
    throw new IllegalArgumentException("Empty variable: " + call);
}

if (WRONG_ARGUMENT_COUNT == null) {
    return;
}

if (WRONG_ARGUMENT_COUNT == null) {
    throw new IllegalArgumentException("Empty variable: " + WRONG_ARGUMENT_COUNT);
}

if (validator == null) {
    return;
}

if (validator == null) {
    throw new IllegalArgumentException("Empty variable: " + validator);
}

if (call == null) {
    return;
}

if (call == null) {
    throw new IllegalArgumentException("Empty variable: " + call);
}

02:06:56.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:57.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:57.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:58.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:58.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:59.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:06:59.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:00.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:00.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:01.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:01.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:01.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:01.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:02.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:02.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:03.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:03.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:04.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:04.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:05.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (numArgs == 0) {
    new IllegalArgumentException("");
}

if (numArgs != 0) {

    
}

if (numArgs > 0) {

    
}

if (minArgs == 0) {
    new IllegalArgumentException("");
}

if (minArgs != 0) {

    
}

if (minArgs > 0) {

    
}

if (maxArgs == 0) {
    new IllegalArgumentException("");
}

if (maxArgs != 0) {

    
}

if (maxArgs > 0) {

    
}

if (maxArgs == 0) {
    new IllegalArgumentException("");
}

if (maxArgs != 0) {

    
}

if (maxArgs > 0) {

    
}

02:07:05.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:06.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:06.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:07.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:07.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:08.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:08.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:09.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:09.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:10.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:10.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:11.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:11.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:12.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:12.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:13.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:13.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:13.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:13.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:14.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:14.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:15.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:15.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:16.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:07:16.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:17.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:17.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===706
02:07:17.661 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (objectType != null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
if (objectType != null || (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
if (objectType == null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
if (objectType != null &&
            (objectType.getConstructor() != null && objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
if (objectType != null &&
            (objectType.getConstructor() == null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
02:07:17.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:18.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:18.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:19.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:19.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:20.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:20.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:21.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType != null) {


}

if (objectType != null) {


}

if (objectType != null) {


}

02:07:21.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:22.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:22.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:22.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:22.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:23.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

02:07:23.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:24.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:24.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:25.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:25.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:26.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:26.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:27.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:27.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:28.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:28.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:29.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType != null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
	String propName = n.getLastChild().getString();
        if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }

        // Don't show complex function names or anonymous types.
        // Instead, try to get a human-readable type name.
        
null
if (objectType != null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
	if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }

        // Don't show complex function names or anonymous types.
        // Instead, try to get a human-readable type name.
        
null
02:07:29.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:30.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:30.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:30.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:07:30.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:31.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:31.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===699
02:07:31.940 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
if (objectType != null) {


}

if (objectType != null) {


}

if (propName != null) {


}

02:07:31.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:32.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:32.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:33.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:33.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:34.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

if (propName == null) {
    return null;
}

if (propName == null) {
    throw new IllegalArgumentException("Empty variable: " + propName);
}

02:07:34.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:35.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:35.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:36.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:36.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:37.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:37.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:38.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:38.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:38.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:38.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:39.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
	objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          
null
02:07:39.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:40.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:07:40.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:41.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:41.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===693
02:07:41.587 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }
if (objectType.getConstructor() != null || objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }
if (objectType.getConstructor() == null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }
02:07:41.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:42.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:42.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:43.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType != null) {


}

if (objectType != null) {


}

02:07:43.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:44.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:44.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:45.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

02:07:45.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:45.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:45.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:46.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:46.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:47.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:47.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:48.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }
	String propName = n.getLastChild().getString();
        
null


        // Don't show complex function names or anonymous types.
        // Instead, try to get a human-readable type name.
        if (objectType != null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
	if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }

MOVE-BUGGY-STATEMENT
02:07:48.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:49.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:49.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:50.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:07:50.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:51.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:51.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===692
02:07:51.135 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
String propName = n.getLastChild().getString();
String propName = n.getLastChild().getString(propName);
String propName = n.getLastChild().getString(objectType);
String propName = n.getLastChild().getString(n);
String propName = n.getLastChild().getString(dereference);
String propName = n.getLastChild().getString(this.compiler);
String propName = n.getLastChild().getString(this.typeRegistry);
String propName = n.getLastChild().getString(this.allValueTypes);
String propName = n.getLastChild().getString(this.shouldReport);
String propName = n.getLastChild().getString(this.nullOrUndefined);
String propName = n.getLastChild().getString(this.mismatches);
String propName = n.getLastChild().getString(FOUND_REQUIRED);
String propName = n.getLastChild().getString(INVALID_CAST);
String propName = n.getLastChild().getString(TYPE_MISMATCH_WARNING);
String propName = n.getLastChild().getString(MISSING_EXTENDS_TAG_WARNING);
String propName = n.getLastChild().getString(DUP_VAR_DECLARATION);
String propName = n.getLastChild().getString(HIDDEN_PROPERTY_MISMATCH);
String propName = n.getLastChild().getString(INTERFACE_METHOD_NOT_IMPLEMENTED);
String propName = n.getLastChild().getString(HIDDEN_INTERFACE_PROPERTY_MISMATCH);
String propName = n.getLastChild().getString(ALL_DIAGNOSTICS);
02:07:51.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:52.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:52.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:52.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:52.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:53.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:53.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:54.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:54.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:55.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:55.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:56.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:56.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:57.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:57.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:58.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:58.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:58.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:58.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:59.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:07:59.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:00.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:00.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:01.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:01.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:02.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:02.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:03.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:03.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:04.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:04.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:04.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:04.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:05.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:05.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:06.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:06.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:07.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
String propName = propName.getLastChild().getString();
String propName = objectType.getLastChild().getString();
String propName = dereference.getLastChild().getString();
String propName = this.compiler.getLastChild().getString();
String propName = this.typeRegistry.getLastChild().getString();
String propName = this.allValueTypes.getLastChild().getString();
String propName = this.shouldReport.getLastChild().getString();
String propName = this.nullOrUndefined.getLastChild().getString();
String propName = this.mismatches.getLastChild().getString();
String propName = FOUND_REQUIRED.getLastChild().getString();
String propName = INVALID_CAST.getLastChild().getString();
String propName = TYPE_MISMATCH_WARNING.getLastChild().getString();
String propName = MISSING_EXTENDS_TAG_WARNING.getLastChild().getString();
String propName = DUP_VAR_DECLARATION.getLastChild().getString();
String propName = HIDDEN_PROPERTY_MISMATCH.getLastChild().getString();
String propName = INTERFACE_METHOD_NOT_IMPLEMENTED.getLastChild().getString();
String propName = HIDDEN_INTERFACE_PROPERTY_MISMATCH.getLastChild().getString();
String propName = ALL_DIAGNOSTICS.getLastChild().getString();
02:08:07.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:08.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:08.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:09.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:09.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:10.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:10.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:11.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:11.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:12.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:12.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:12.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:12.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:13.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:13.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:14.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:14.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:15.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:15.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:16.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:16.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:17.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:17.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:18.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:18.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:19.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:19.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:20.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:20.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:20.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:20.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:21.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:21.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:22.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:22.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:23.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

02:08:23.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:24.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:08:24.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:25.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:25.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:26.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:08:26.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:27.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:27.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===691
02:08:27.232 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (objectType != null) {
        String propName = n.getLastChild().getString();
        if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }

        // Don't show complex function names or anonymous types.
        // Instead, try to get a human-readable type name.
        if (objectType != null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
      }
if (objectType == null) {
        String propName = n.getLastChild().getString();
        if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }

        // Don't show complex function names or anonymous types.
        // Instead, try to get a human-readable type name.
        if (objectType != null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
      }
02:08:27.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:28.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType != null) {


}

02:08:28.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:29.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType == null) {
    return null;
}

if (objectType == null) {
    throw new IllegalArgumentException("Empty variable: " + objectType);
}

02:08:29.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:29.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:29.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:30.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (objectType != null) {
        String propName = n.getLastChild().getString();
        if (objectType.getConstructor() != null &&
            objectType.getConstructor().isInterface()) {
          objectType = FunctionType.getTopDefiningInterface(
              objectType, propName);
        } else {
          // classes
          while (objectType != null && !objectType.hasOwnProperty(propName)) {
            objectType = objectType.getImplicitPrototype();
          }
        }

        // Don't show complex function names or anonymous types.
        // Instead, try to get a human-readable type name.
        if (objectType != null &&
            (objectType.getConstructor() != null ||
             objectType.isFunctionPrototypeType())) {
          return objectType.toString() + "." + propName;
        }
      }
	ObjectType objectType = getJSType(n.getFirstChild()).dereference();
      
null
02:08:30.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:31.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:08:31.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:32.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:32.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeValidator ===690
02:08:32.612 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
ObjectType objectType = getJSType(n.getFirstChild()).dereference();
ObjectType objectType = getJSType(n.getFirstChild()).dereference(objectType);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(n);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(dereference);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(this.compiler);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(this.typeRegistry);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(this.allValueTypes);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(this.shouldReport);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(this.nullOrUndefined);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(this.mismatches);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(FOUND_REQUIRED);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(INVALID_CAST);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(TYPE_MISMATCH_WARNING);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(MISSING_EXTENDS_TAG_WARNING);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(DUP_VAR_DECLARATION);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(HIDDEN_PROPERTY_MISMATCH);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(INTERFACE_METHOD_NOT_IMPLEMENTED);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(HIDDEN_INTERFACE_PROPERTY_MISMATCH);
ObjectType objectType = getJSType(n.getFirstChild()).dereference(ALL_DIAGNOSTICS);
02:08:32.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:33.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:33.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:34.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:34.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:35.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:35.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:36.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:36.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:36.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:36.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:37.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:37.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:38.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:38.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:39.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:39.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:40.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:40.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:41.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:41.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:42.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:42.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:42.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:42.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:43.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:43.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:44.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:44.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:45.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:45.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:46.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:46.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:47.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:47.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:48.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

02:08:48.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:48.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:08:48.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:49.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:49.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:50.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:08:50.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:51.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:51.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeCheck ===1097
02:08:51.567 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (superInterfacesHasProperty) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
if (foundInterfaceProperty) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
if (declaredOverride) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
if (superClassHasProperty) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
02:08:51.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:52.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:52.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:53.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:53.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:54.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (superInterfacesHasProperty) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
	JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName);
      if (!propertyType.canAssignTo(superClassPropType)) {
        compiler.report(
            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                propertyName, topInstanceType.toString(),
                superClassPropType.toString(), propertyType.toString()));
      }
    } else 
null
if (superInterfacesHasProperty) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
	if (!propertyType.canAssignTo(superClassPropType)) {
        compiler.report(
            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                propertyName, topInstanceType.toString(),
                superClassPropType.toString(), propertyType.toString()));
      }
    } else 
null
02:08:54.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:54.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:54.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:55.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:08:55.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:55.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:55.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeCheck ===1091
02:08:55.425 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!propertyType.canAssignTo(superClassPropType)) {
        compiler.report(
            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                propertyName, topInstanceType.toString(),
                superClassPropType.toString(), propertyType.toString()));
      }
if (propertyType != null) {


}

if (superClassPropType != null) {


}

02:08:55.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:56.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:56.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:57.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (propertyType == null) {
    return;
}

if (propertyType == null) {
    throw new IllegalArgumentException("Empty variable: " + propertyType);
}

if (superClassPropType == null) {
    return;
}

if (superClassPropType == null) {
    throw new IllegalArgumentException("Empty variable: " + superClassPropType);
}

02:08:57.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:58.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:58.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:59.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:08:59.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:00.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:00.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:01.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (!propertyType.canAssignTo(superClassPropType)) {
        compiler.report(
            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                propertyName, topInstanceType.toString(),
                superClassPropType.toString(), propertyType.toString()));
      }
	JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName);
      
null

    } else if (superInterfacesHasProperty) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
	if (!propertyType.canAssignTo(superClassPropType)) {
        compiler.report(
            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                propertyName, topInstanceType.toString(),
                superClassPropType.toString(), propertyType.toString()));
      }

MOVE-BUGGY-STATEMENT
02:09:01.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:02.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:02.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:02.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:09:02.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:03.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:03.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeCheck ===1089
02:09:03.900 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superClassPropType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(topInstanceType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(foundInterfaceProperty);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(declaredOverride);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superInterfacesHasProperty);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superClassHasProperty);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superClass);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(t);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(n);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ctorType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(info);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNEXPECTED_TOKEN);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(BAD_DELETE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(DETERMINISTIC_TEST);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(DETERMINISTIC_TEST_NO_RESULT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INEXISTENT_ENUM_ELEMENT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INEXISTENT_PROPERTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(NOT_A_CONSTRUCTOR);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(BIT_OPERATION);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(NOT_CALLABLE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(CONSTRUCTOR_NOT_CALLABLE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(FUNCTION_MASKS_VARIABLE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(MULTIPLE_VAR_DEF);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ENUM_DUP);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ENUM_NOT_CONSTANT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INVALID_INTERFACE_MEMBER_DECLARATION);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INTERFACE_FUNCTION_NOT_EMPTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(CONFLICTING_EXTENDED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(CONFLICTING_IMPLEMENTED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(BAD_IMPLEMENTED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(HIDDEN_SUPERCLASS_PROPERTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(HIDDEN_INTERFACE_PROPERTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNKNOWN_OVERRIDE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INTERFACE_METHOD_OVERRIDE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNKNOWN_EXPR_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNRESOLVED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(WRONG_ARGUMENT_COUNT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ILLEGAL_IMPLICIT_CAST);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(EXPECTED_THIS_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ALL_DIAGNOSTICS);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.compiler);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.validator);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reverseInterpreter);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.typeRegistry);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.topScope);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.scopeCreator);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reportMissingOverride);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reportUnknownTypes);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reportMissingProperties);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.inferJSDocInfo);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.typedCount);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.nullCount);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.unknownCount);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.inExterns);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.noTypeCheckSection);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType();
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superClassPropType, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(topInstanceType, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(foundInterfaceProperty, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(declaredOverride, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superInterfacesHasProperty, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superClassHasProperty, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(superClass, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(t, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(n, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ctorType, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(info, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyType, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNEXPECTED_TOKEN, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(BAD_DELETE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(OVERRIDING_PROTOTYPE_WITH_NON_OBJECT, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(DETERMINISTIC_TEST, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(DETERMINISTIC_TEST_NO_RESULT, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INEXISTENT_ENUM_ELEMENT, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INEXISTENT_PROPERTY, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(NOT_A_CONSTRUCTOR, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(BIT_OPERATION, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(NOT_CALLABLE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(CONSTRUCTOR_NOT_CALLABLE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(FUNCTION_MASKS_VARIABLE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(MULTIPLE_VAR_DEF, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ENUM_DUP, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ENUM_NOT_CONSTANT, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INVALID_INTERFACE_MEMBER_DECLARATION, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INTERFACE_FUNCTION_NOT_EMPTY, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(CONFLICTING_EXTENDED_TYPE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(CONFLICTING_IMPLEMENTED_TYPE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(BAD_IMPLEMENTED_TYPE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(HIDDEN_SUPERCLASS_PROPERTY, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(HIDDEN_INTERFACE_PROPERTY, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(HIDDEN_SUPERCLASS_PROPERTY_MISMATCH, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNKNOWN_OVERRIDE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INTERFACE_METHOD_OVERRIDE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNKNOWN_EXPR_TYPE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(UNRESOLVED_TYPE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(WRONG_ARGUMENT_COUNT, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ILLEGAL_IMPLICIT_CAST, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(INCOMPATIBLE_EXTENDED_PROPERTY_TYPE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(EXPECTED_THIS_TYPE, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(ALL_DIAGNOSTICS, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.compiler, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.validator, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reverseInterpreter, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.typeRegistry, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.topScope, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.scopeCreator, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reportMissingOverride, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reportUnknownTypes, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.reportMissingProperties, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.inferJSDocInfo, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.typedCount, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.nullCount, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.unknownCount, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.inExterns, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(this.noTypeCheckSection, propertyName);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, superClassPropType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, topInstanceType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, foundInterfaceProperty);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, declaredOverride);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, superInterfacesHasProperty);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, superClassHasProperty);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, superClass);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, t);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, n);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, ctorType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, info);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, propertyType);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, UNEXPECTED_TOKEN);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, BAD_DELETE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, DETERMINISTIC_TEST);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, DETERMINISTIC_TEST_NO_RESULT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, INEXISTENT_ENUM_ELEMENT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, INEXISTENT_PROPERTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, NOT_A_CONSTRUCTOR);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, BIT_OPERATION);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, NOT_CALLABLE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, CONSTRUCTOR_NOT_CALLABLE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, FUNCTION_MASKS_VARIABLE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, MULTIPLE_VAR_DEF);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, ENUM_DUP);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, ENUM_NOT_CONSTANT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, INVALID_INTERFACE_MEMBER_DECLARATION);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, INTERFACE_FUNCTION_NOT_EMPTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, CONFLICTING_EXTENDED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, CONFLICTING_IMPLEMENTED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, BAD_IMPLEMENTED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, HIDDEN_SUPERCLASS_PROPERTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, HIDDEN_INTERFACE_PROPERTY);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, UNKNOWN_OVERRIDE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, INTERFACE_METHOD_OVERRIDE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, UNKNOWN_EXPR_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, UNRESOLVED_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, WRONG_ARGUMENT_COUNT);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, ILLEGAL_IMPLICIT_CAST);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, EXPECTED_THIS_TYPE);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, ALL_DIAGNOSTICS);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.compiler);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.validator);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.reverseInterpreter);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.typeRegistry);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.topScope);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.scopeCreator);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.reportMissingOverride);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.reportUnknownTypes);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.reportMissingProperties);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.inferJSDocInfo);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.typedCount);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.nullCount);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.unknownCount);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.inExterns);
JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName, this.noTypeCheckSection);
02:09:03.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:04.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:04.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:05.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:05.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:06.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:06.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:07.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:07.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:08.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:08.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:09.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:09.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:10.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:10.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:11.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:11.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:12.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:12.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:13.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:13.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:14.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:14.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:15.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:15.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:15.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:15.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:16.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:16.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:17.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:17.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:18.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:18.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:19.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:19.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:20.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:20.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:21.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:21.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:22.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:22.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:23.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:23.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:24.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:24.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:25.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:25.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:26.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:26.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:27.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:27.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:28.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:28.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:29.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:29.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:30.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:30.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:30.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:30.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:31.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:31.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:32.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:32.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:33.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:33.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:34.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:34.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:35.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:35.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:36.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:36.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:37.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:37.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:38.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:38.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:39.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:39.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:40.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:40.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:41.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:41.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:42.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:42.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:43.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:43.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:44.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:44.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:45.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:45.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:45.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:45.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:46.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:46.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:47.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:47.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:48.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:48.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:49.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:49.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:50.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:50.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:51.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:51.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:52.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:52.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:53.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:53.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:54.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:54.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:55.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:55.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:56.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:56.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:56.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:56.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:57.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:57.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:58.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:58.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:59.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:09:59.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:00.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:00.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:01.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:01.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:02.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:02.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:03.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:03.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:04.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:04.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:05.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:05.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:05.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:05.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:06.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:06.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:07.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:07.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:08.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:08.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:09.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:09.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:10.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:10.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:11.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:11.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:12.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:12.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:13.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:13.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:14.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:14.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:15.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:15.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:16.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:16.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:16.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:16.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:17.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:17.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:18.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:18.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:19.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:19.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:20.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:20.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:21.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:21.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:22.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:22.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:23.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:23.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:24.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:24.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:25.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:25.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:26.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:26.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:27.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:27.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:28.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:28.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:28.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:28.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:29.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:29.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:30.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:30.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:31.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:31.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:32.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:32.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:33.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:33.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:34.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:34.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:35.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:35.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:36.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:36.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:37.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:37.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:38.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:38.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:38.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:38.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:39.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:39.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:40.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:40.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:41.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:41.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:42.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:42.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:43.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:43.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:44.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:44.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:45.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:45.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:46.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:46.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:47.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:47.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:48.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:48.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:49.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:49.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:49.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:49.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:50.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:50.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:51.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:51.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:52.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:52.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:53.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:53.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:54.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:54.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:55.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:55.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:56.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:56.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:57.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:57.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:58.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:58.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:59.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:10:59.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:00.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:00.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:01.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:01.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:02.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:02.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:02.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:02.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:03.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:03.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:04.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:04.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:05.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:05.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:06.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:06.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:07.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:07.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:08.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:08.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:09.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:09.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:10.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:10.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:11.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:11.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:12.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:12.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:13.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:13.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:14.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:14.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:15.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:15.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:16.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:16.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:17.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:17.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:18.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:18.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:19.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:19.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:19.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:19.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:20.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:20.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:21.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:21.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:22.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:22.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:23.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:23.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:24.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:24.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:25.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:25.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:26.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:26.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:27.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:27.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:28.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:28.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:29.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:29.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:30.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:30.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:31.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:31.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:32.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:32.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:33.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:33.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:33.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:33.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:34.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:34.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:35.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:35.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:36.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:36.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:37.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:37.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:38.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:38.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:39.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:39.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:40.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:40.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:41.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:41.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:42.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:42.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:43.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:43.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:44.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:44.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:45.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:45.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:45.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:45.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:46.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:46.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:47.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:47.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:48.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
JSType superClassPropType =
          superClassPropType.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          topInstanceType.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          foundInterfaceProperty.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          declaredOverride.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          superInterfacesHasProperty.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          superClassHasProperty.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          t.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          n.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          ctorType.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          propertyName.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          info.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          propertyType.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          UNEXPECTED_TOKEN.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          BAD_DELETE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          OVERRIDING_PROTOTYPE_WITH_NON_OBJECT.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          DETERMINISTIC_TEST.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          DETERMINISTIC_TEST_NO_RESULT.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          INEXISTENT_ENUM_ELEMENT.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          INEXISTENT_PROPERTY.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          NOT_A_CONSTRUCTOR.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          BIT_OPERATION.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          NOT_CALLABLE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          CONSTRUCTOR_NOT_CALLABLE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          FUNCTION_MASKS_VARIABLE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          MULTIPLE_VAR_DEF.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          ENUM_DUP.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          ENUM_NOT_CONSTANT.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          INVALID_INTERFACE_MEMBER_DECLARATION.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          INTERFACE_FUNCTION_NOT_EMPTY.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          CONFLICTING_EXTENDED_TYPE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          CONFLICTING_IMPLEMENTED_TYPE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          BAD_IMPLEMENTED_TYPE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          HIDDEN_SUPERCLASS_PROPERTY.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          HIDDEN_INTERFACE_PROPERTY.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          HIDDEN_SUPERCLASS_PROPERTY_MISMATCH.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          UNKNOWN_OVERRIDE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          INTERFACE_METHOD_OVERRIDE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          UNKNOWN_EXPR_TYPE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          UNRESOLVED_TYPE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          WRONG_ARGUMENT_COUNT.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          ILLEGAL_IMPLICIT_CAST.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          INCOMPATIBLE_EXTENDED_PROPERTY_TYPE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          EXPECTED_THIS_TYPE.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          ALL_DIAGNOSTICS.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.compiler.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.validator.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.reverseInterpreter.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.typeRegistry.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.topScope.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.scopeCreator.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.reportMissingOverride.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.reportUnknownTypes.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.reportMissingProperties.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.inferJSDocInfo.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.typedCount.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.nullCount.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.unknownCount.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.inExterns.getPrototype().getPropertyType(propertyName);
JSType superClassPropType =
          this.noTypeCheckSection.getPrototype().getPropertyType(propertyName);
02:11:48.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:49.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:49.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:50.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:50.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:51.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:51.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:52.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:52.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:53.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:53.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:54.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:54.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:55.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:55.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:56.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:56.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:57.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:57.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:57.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:57.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:58.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:58.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:59.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:11:59.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:00.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:00.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:01.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:01.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:02.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:02.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:03.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:03.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:04.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:04.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:05.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:05.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:06.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:06.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:07.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:07.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:08.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:08.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:08.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:08.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:09.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:09.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:10.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:10.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:11.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:11.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:12.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:12.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:13.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:13.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:14.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:14.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:15.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:15.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:16.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:16.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:17.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:17.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:18.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:18.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:19.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:19.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:20.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:20.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:20.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:20.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:22.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:22.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:22.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:22.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:23.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:23.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:24.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:24.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:25.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:25.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:26.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:26.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:27.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:27.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:28.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:28.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:29.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:29.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:30.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:30.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:31.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:31.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:32.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:32.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:33.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:33.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:34.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:34.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:35.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:35.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:35.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:35.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:36.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:36.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:37.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:37.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:38.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:38.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:39.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:39.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:40.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:40.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:41.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:41.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:42.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:42.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:43.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (superClass != null) {


}

if (propertyName != null) {


}

02:12:43.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:44.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:44.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:45.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (superClass == null) {
    return;
}

if (superClass == null) {
    throw new IllegalArgumentException("Empty variable: " + superClass);
}

if (propertyName == null) {
    return;
}

if (propertyName == null) {
    throw new IllegalArgumentException("Empty variable: " + propertyName);
}

02:12:45.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:46.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:46.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:47.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:47.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:47.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:47.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:48.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:12:48.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:49.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:49.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.jstype.FunctionType ===801
02:12:49.821 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
break;

02:12:49.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:50.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:50.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.jstype.FunctionType ===804
02:12:50.787 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return topInstanceType;
if (topInstanceType != null) {


}

02:12:50.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:51.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (topInstanceType == null) {
    return null;
}

if (topInstanceType == null) {
    throw new IllegalArgumentException("Empty variable: " + topInstanceType);
}

02:12:51.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:52.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:52.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:53.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
setPrototypeBasedOn(topInstanceType);
setPrototypeBasedOn(topInstanceType);
	return topInstanceType;
return topInstanceType;
	setPrototypeBasedOn(topInstanceType);
setInstanceType(topInstanceType);
setInstanceType(topInstanceType);
	return topInstanceType;
return topInstanceType;
	setInstanceType(topInstanceType);
clearCachedValues();
	return topInstanceType;
return topInstanceType;
	clearCachedValues();
02:12:53.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:54.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:54.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:55.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:55.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:55.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:55.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:56.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:56.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:57.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:57.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:58.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:58.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:59.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:12:59.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:00.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:13:00.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:01.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:01.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.jstype.FunctionType ===800
02:13:01.156 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
if (ctor == null && !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
if (ctor != null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
02:13:01.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:01.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:01.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:02.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor != null) {


}

if (ctor != null) {


}

if (propertyName != null) {


}

02:13:02.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:03.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:03.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:04.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:04.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:05.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor == null) {
    return null;
}

if (ctor == null) {
    throw new IllegalArgumentException("Empty variable: " + ctor);
}

if (ctor == null) {
    return null;
}

if (ctor == null) {
    throw new IllegalArgumentException("Empty variable: " + ctor);
}

if (propertyName == null) {
    return null;
}

if (propertyName == null) {
    throw new IllegalArgumentException("Empty variable: " + propertyName);
}

02:13:05.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:06.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:06.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:07.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:07.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:07.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:07.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:08.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:08.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:09.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:09.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:10.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
addSubType(ctor);
addSubType(ctor);
	if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
	addSubType(ctor);
clearCachedValues();
	if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
	clearCachedValues();
02:13:10.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:11.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:11.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:12.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:12.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:13.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:13.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:14.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:14.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:14.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
	topInstanceType = ctor.getInstanceType();
      ctor = ctor.getSuperClassConstructor();
      
null
if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
	ctor = ctor.getSuperClassConstructor();
      
null
02:13:14.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:15.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:15.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:16.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:13:16.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:17.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:17.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.jstype.FunctionType ===799
02:13:17.446 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
ctor = ctor.getSuperClassConstructor();
ctor = ctor.getSuperClassConstructor(true);
ctor = ctor.getSuperClassConstructor(false);
02:13:17.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:18.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:18.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:19.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
ctor = ctor.toMaybeFunctionType();
02:13:19.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:20.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor != null) {


}

02:13:20.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:20.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor == null) {
    return null;
}

if (ctor == null) {
    throw new IllegalArgumentException("Empty variable: " + ctor);
}

02:13:20.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:21.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:21.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:22.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
addSubType(ctor);
addSubType(ctor);
	ctor = ctor.getSuperClassConstructor();
ctor = ctor.getSuperClassConstructor();
	addSubType(ctor);
clearCachedValues();
	ctor = ctor.getSuperClassConstructor();
ctor = ctor.getSuperClassConstructor();
	clearCachedValues();
02:13:22.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:23.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:23.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:24.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:24.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:25.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:25.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:26.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:26.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:27.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
ctor = ctor.getSuperClassConstructor();
	topInstanceType = ctor.getInstanceType();
      
null

      if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
	ctor = ctor.getSuperClassConstructor();

MOVE-BUGGY-STATEMENT
02:13:27.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:27.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:27.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:28.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:13:28.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:29.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:29.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.jstype.FunctionType ===798
02:13:29.648 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
topInstanceType = ctor.getInstanceType();
topInstanceType = ctor.getInstanceType(true);
topInstanceType = ctor.getInstanceType(false);
02:13:29.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:30.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:30.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:31.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
topInstanceType = ctor.getPrototype();
topInstanceType = ctor.getTypeOfThis();
02:13:31.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:32.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:32.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:33.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor != null) {


}

02:13:33.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:33.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor == null) {
    return null;
}

if (ctor == null) {
    throw new IllegalArgumentException("Empty variable: " + ctor);
}

02:13:33.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:34.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:34.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:35.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
setPrototypeBasedOn(topInstanceType);
setPrototypeBasedOn(topInstanceType);
	topInstanceType = ctor.getInstanceType();
topInstanceType = ctor.getInstanceType();
	setPrototypeBasedOn(topInstanceType);
setInstanceType(topInstanceType);
setInstanceType(topInstanceType);
	topInstanceType = ctor.getInstanceType();
topInstanceType = ctor.getInstanceType();
	setInstanceType(topInstanceType);
clearCachedValues();
	topInstanceType = ctor.getInstanceType();
topInstanceType = ctor.getInstanceType();
	clearCachedValues();
02:13:35.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:36.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:36.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:37.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:37.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:38.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:38.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:39.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:39.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:39.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:39.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:40.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:40.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:41.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:41.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:42.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

      ctor = ctor.getSuperClassConstructor();
	topInstanceType = ctor.getInstanceType();

MOVE-BUGGY-STATEMENT

      ctor = ctor.getSuperClassConstructor();
      if (ctor == null || !ctor.getPrototype().hasProperty(propertyName)) {
        break;
      }
	topInstanceType = ctor.getInstanceType();

MOVE-BUGGY-STATEMENT
02:13:42.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:43.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:43.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:44.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:13:44.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:45.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:45.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.jstype.FunctionType ===796
02:13:45.183 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
ObjectType topInstanceType = ctor.getInstanceType();
ObjectType topInstanceType = ctor.getPrototype();
ObjectType topInstanceType = ctor.getTypeOfThis();
02:13:45.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:46.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:46.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:46.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
ObjectType topInstanceType = ctor.getInstanceType(topInstanceType);
ObjectType topInstanceType = ctor.getInstanceType(propertyName);
ObjectType topInstanceType = ctor.getInstanceType(this.call);
ObjectType topInstanceType = ctor.getInstanceType(this.prototypeSlot);
ObjectType topInstanceType = ctor.getInstanceType(this.kind);
ObjectType topInstanceType = ctor.getInstanceType(this.typeOfThis);
ObjectType topInstanceType = ctor.getInstanceType(this.source);
ObjectType topInstanceType = ctor.getInstanceType(this.implementedInterfaces);
ObjectType topInstanceType = ctor.getInstanceType(this.extendedInterfaces);
ObjectType topInstanceType = ctor.getInstanceType(this.subTypes);
ObjectType topInstanceType = ctor.getInstanceType(this.templateTypeName);
02:13:46.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:47.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:47.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:48.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:48.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:49.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:49.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:50.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:50.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:51.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:51.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:52.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:52.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:52.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:52.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:53.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:53.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:54.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:54.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:55.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:55.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:56.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
ObjectType topInstanceType = topInstanceType.getInstanceType();
ObjectType topInstanceType = propertyName.getInstanceType();
ObjectType topInstanceType = this.call.getInstanceType();
ObjectType topInstanceType = this.prototypeSlot.getInstanceType();
ObjectType topInstanceType = this.kind.getInstanceType();
ObjectType topInstanceType = this.typeOfThis.getInstanceType();
ObjectType topInstanceType = this.source.getInstanceType();
ObjectType topInstanceType = this.implementedInterfaces.getInstanceType();
ObjectType topInstanceType = this.extendedInterfaces.getInstanceType();
ObjectType topInstanceType = this.subTypes.getInstanceType();
ObjectType topInstanceType = this.templateTypeName.getInstanceType();
02:13:56.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:57.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:57.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:57.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:57.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:58.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:58.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:59.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:13:59.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:00.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:00.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:01.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:01.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:02.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:02.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:02.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:02.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:03.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:03.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:04.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:04.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:05.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor != null) {


}

02:14:05.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:06.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
if (ctor == null) {
    return null;
}

if (ctor == null) {
    throw new IllegalArgumentException("Empty variable: " + ctor);
}

02:14:06.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:07.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:07.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:08.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
setPrototypeBasedOn(topInstanceType);
setPrototypeBasedOn(topInstanceType);
	ObjectType topInstanceType = ctor.getInstanceType();
ObjectType topInstanceType = ctor.getInstanceType();
	setPrototypeBasedOn(topInstanceType);
setInstanceType(topInstanceType);
setInstanceType(topInstanceType);
	ObjectType topInstanceType = ctor.getInstanceType();
ObjectType topInstanceType = ctor.getInstanceType();
	setInstanceType(topInstanceType);
clearCachedValues();
	ObjectType topInstanceType = ctor.getInstanceType();
ObjectType topInstanceType = ctor.getInstanceType();
	clearCachedValues();
02:14:08.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:08.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:08.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:09.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:09.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:10.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:10.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:11.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:11.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:12.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:12.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:13.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:13.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:14.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:14.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:14.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 

02:14:15.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:15.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-41 ---Fixer: fix fail because of failed compiling! 
02:14:15.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeCheck ===1120
02:14:15.910 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
/**
   * Given a constructor type and a property name, check that the property has
   * the JSDoc annotation @override iff the property is declared on a
   * superclass. Several checks regarding inheritance correctness are also
   * performed.
   */
  private void checkDeclaredPropertyInheritance(
      NodeTraversal t, Node n, FunctionType ctorType, String propertyName,
      JSDocInfo info, JSType propertyType) {
    // If the supertype doesn't resolve correctly, we've warned about this
    // already.
    if (hasUnknownOrEmptySupertype(ctorType)) {
      return;
    }

    FunctionType superClass = ctorType.getSuperClassConstructor();
    boolean superClassHasProperty = superClass != null &&
        superClass.getPrototype().hasProperty(propertyName);
    // For interface
    boolean superInterfacesHasProperty = false;
    if (ctorType.isInterface()) {
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        superInterfacesHasProperty =
          superInterfacesHasProperty || interfaceType.hasProperty(propertyName);
      }
    }
    boolean declaredOverride = info != null && info.isOverride();

    boolean foundInterfaceProperty = false;
    if (ctorType.isConstructor()) {
      for (JSType implementedInterface :
          ctorType.getAllImplementedInterfaces()) {
        if (implementedInterface.isUnknownType() ||
            implementedInterface.isEmptyType()) {
          continue;
        }
        FunctionType interfaceType =
            implementedInterface.toObjectType().getConstructor();
        Preconditions.checkNotNull(interfaceType);
        boolean interfaceHasProperty =
            interfaceType.getPrototype().hasProperty(propertyName);
        foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;
        if (reportMissingOverride.isOn() && !declaredOverride &&
            interfaceHasProperty) {
          // @override not present, but the property does override an interface
          // property
          compiler.report(t.makeError(n, reportMissingOverride,
              HIDDEN_INTERFACE_PROPERTY, propertyName,
              interfaceType.getTopMostDefiningType(propertyName).toString()));
        }
      }
    }

    if (!declaredOverride && !superClassHasProperty
        && !superInterfacesHasProperty) {
      // nothing to do here, it's just a plain new property
      return;
    }

    JSType topInstanceType = superClassHasProperty ?
        superClass.getTopMostDefiningType(propertyName) : null;
    if (reportMissingOverride.isOn() && ctorType.isConstructor() &&
        !declaredOverride && superClassHasProperty) {
      // @override not present, but the property does override a superclass
      // property
      compiler.report(t.makeError(n, reportMissingOverride,
          HIDDEN_SUPERCLASS_PROPERTY, propertyName,
          topInstanceType.toString()));
    }
    if (!declaredOverride) {
      // there's no @override to check
      return;
    }
    // @override is present and we have to check that it is ok
    if (superClassHasProperty) {
      // there is a superclass implementation
      JSType superClassPropType =
          superClass.getPrototype().getPropertyType(propertyName);
      if (!propertyType.canAssignTo(superClassPropType)) {
        compiler.report(
            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                propertyName, topInstanceType.toString(),
                superClassPropType.toString(), propertyType.toString()));
      }
    } else if (superInterfacesHasProperty) {
      // there is an super interface property
      for (ObjectType interfaceType : ctorType.getExtendedInterfaces()) {
        if (interfaceType.hasProperty(propertyName)) {
          JSType superPropertyType =
            interfaceType.getPropertyType(propertyName);
          if (!propertyType.canAssignTo(superPropertyType)) {
            topInstanceType = interfaceType.getConstructor().
                getTopMostDefiningType(propertyName);
            compiler.report(
                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,
                    propertyName, topInstanceType.toString(),
                    superPropertyType.toString(),
                    propertyType.toString()));
          }
        }
      }
    } else if (!foundInterfaceProperty) {
      // there is no superclass nor interface implementation
      compiler.report(
          t.makeError(n, UNKNOWN_OVERRIDE,
              propertyName, ctorType.getInstanceType().toString()));
    }
  }
