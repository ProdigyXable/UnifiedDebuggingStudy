Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Closure-107
01:48:03.944 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/107.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/107.txt
01:52:22.102 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
01:52:22.194 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-107/generalSusInfo.profl
01:52:22.339 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-107/aggregatedSusInfo.profl
01:52:22.346 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
01:52:22.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1561
01:52:23.649 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return false;
return true;
01:52:23.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:24.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:52:24.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:25.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:25.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1560
01:52:25.900 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
if (globalNames != null) {


}

01:52:25.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:26.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (globalNames == null) {
    return true;
}

if (globalNames == null) {
    return false;
}

if (globalNames == null) {
    throw new IllegalArgumentException("Empty variable: " + globalNames);
}

01:52:26.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:27.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:27.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:28.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:28.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:30.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	removeUnreferenced();
referenceAliases();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceAliases();
referenceParentNames();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceParentNames();
calculateReferences();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	calculateReferences();
01:52:30.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:31.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:31.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:32.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:32.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:32.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:32.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:33.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:33.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:34.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:34.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:35.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:35.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:37.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:37.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:37.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
    if (scope.isLocal()) {
      return false;
    }
    
null
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (scope.isLocal()) {
      return false;
    }
    
null

    return false;
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }

MOVE-BUGGY-STATEMENT
01:52:37.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:38.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:38.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:39.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:39.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:40.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:52:40.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:41.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:41.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1557
01:52:41.975 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (name.startsWith(s)) {
        return true;
      }
if (name.startsWith(scope)) {
        return true;
      }
if (name.startsWith(this.compiler)) {
        return true;
      }
if (name.startsWith(this.allNames)) {
        return true;
      }
if (name.startsWith(this.referenceGraph)) {
        return true;
      }
if (name.startsWith(this.scopes)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING_LEN)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUFFIX_LEN)) {
        return true;
      }
if (name.startsWith(WINDOW)) {
        return true;
      }
if (name.startsWith(FUNCTION)) {
        return true;
      }
if (name.startsWith(DEFAULT_GLOBAL_NAMES)) {
        return true;
      }
if (name.startsWith(this.removeUnreferenced)) {
        return true;
      }
if (name.startsWith(this.globalNames)) {
        return true;
      }
if (name.startsWith(this.changeProxy)) {
        return true;
      }
if (name.startsWith(this.externalNames)) {
        return true;
      }
if (name.startsWith(this.refNodes)) {
        return true;
      }
if (name.startsWith(this.aliases)) {
        return true;
      }
if (name.startsWith(NON_LOCAL_RESULT_PREDICATE)) {
        return true;
      }
if (name.startsWith()) {
        return true;
      }
if (name.startsWith(scope, s)) {
        return true;
      }
if (name.startsWith(this.compiler, s)) {
        return true;
      }
if (name.startsWith(this.allNames, s)) {
        return true;
      }
if (name.startsWith(this.referenceGraph, s)) {
        return true;
      }
if (name.startsWith(this.scopes, s)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING, s)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING_LEN, s)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUFFIX_LEN, s)) {
        return true;
      }
if (name.startsWith(WINDOW, s)) {
        return true;
      }
if (name.startsWith(FUNCTION, s)) {
        return true;
      }
if (name.startsWith(DEFAULT_GLOBAL_NAMES, s)) {
        return true;
      }
if (name.startsWith(this.removeUnreferenced, s)) {
        return true;
      }
if (name.startsWith(this.globalNames, s)) {
        return true;
      }
if (name.startsWith(this.changeProxy, s)) {
        return true;
      }
if (name.startsWith(this.externalNames, s)) {
        return true;
      }
if (name.startsWith(this.refNodes, s)) {
        return true;
      }
if (name.startsWith(this.aliases, s)) {
        return true;
      }
if (name.startsWith(NON_LOCAL_RESULT_PREDICATE, s)) {
        return true;
      }
if (name.startsWith(s, scope)) {
        return true;
      }
if (name.startsWith(s, this.compiler)) {
        return true;
      }
if (name.startsWith(s, this.allNames)) {
        return true;
      }
if (name.startsWith(s, this.referenceGraph)) {
        return true;
      }
if (name.startsWith(s, this.scopes)) {
        return true;
      }
if (name.startsWith(s, PROTOTYPE_SUBSTRING)) {
        return true;
      }
if (name.startsWith(s, PROTOTYPE_SUBSTRING_LEN)) {
        return true;
      }
if (name.startsWith(s, PROTOTYPE_SUFFIX_LEN)) {
        return true;
      }
if (name.startsWith(s, WINDOW)) {
        return true;
      }
if (name.startsWith(s, FUNCTION)) {
        return true;
      }
if (name.startsWith(s, DEFAULT_GLOBAL_NAMES)) {
        return true;
      }
if (name.startsWith(s, this.removeUnreferenced)) {
        return true;
      }
if (name.startsWith(s, this.globalNames)) {
        return true;
      }
if (name.startsWith(s, this.changeProxy)) {
        return true;
      }
if (name.startsWith(s, this.externalNames)) {
        return true;
      }
if (name.startsWith(s, this.refNodes)) {
        return true;
      }
if (name.startsWith(s, this.aliases)) {
        return true;
      }
if (name.startsWith(s, NON_LOCAL_RESULT_PREDICATE)) {
        return true;
      }
01:52:41.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:42.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:42.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:43.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:43.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:44.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:44.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:45.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:45.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:46.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:46.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:47.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:47.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:48.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:48.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:49.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:49.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:50.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:50.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:51.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:51.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:52.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:52.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:53.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:53.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:54.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:54.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:55.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:55.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:56.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:56.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:57.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:57.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:58.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:58.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:59.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:52:59.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:00.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:00.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:01.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:01.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:02.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:02.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:03.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:03.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:04.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:04.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:05.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:05.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:06.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:06.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:07.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:07.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:08.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:08.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:09.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:09.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:10.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:10.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:11.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:11.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:12.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:12.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:13.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:13.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:14.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:14.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:15.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:15.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:16.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:16.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:17.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:17.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:18.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:18.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:19.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:19.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:20.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:20.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:21.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:21.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:21.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:21.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:22.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:22.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:23.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:23.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:24.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:24.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:25.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:25.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:26.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:26.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:27.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:27.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:28.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:28.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:29.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:29.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:30.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:30.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:31.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:31.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:32.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:32.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:33.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:33.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:34.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:34.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:35.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (name != null && name.startsWith(s)) {
        return true;
      }
if (name != null || name.startsWith(s)) {
        return true;
      }
01:53:35.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:36.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:36.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:37.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (name != null) {


}

if (s != null) {


}

01:53:37.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:38.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:38.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:39.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (name == null) {
    return true;
}

if (name == null) {
    return false;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

if (s == null) {
    return true;
}

if (s == null) {
    return false;
}

if (s == null) {
    throw new IllegalArgumentException("Empty variable: " + s);
}

01:53:39.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:40.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:40.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:41.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:41.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:42.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:42.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:43.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:43.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:44.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:44.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:45.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:53:45.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:46.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:46.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1556
01:53:46.110 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
if (globalNames != null) {


}

01:53:46.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:47.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (globalNames == null) {
    return true;
}

if (globalNames == null) {
    return false;
}

if (globalNames == null) {
    throw new IllegalArgumentException("Empty variable: " + globalNames);
}

01:53:47.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:48.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:48.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:49.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:49.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:50.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	removeUnreferenced();
referenceAliases();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceAliases();
referenceParentNames();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceParentNames();
calculateReferences();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	calculateReferences();
01:53:50.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:51.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:51.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:52.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:52.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:53.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:53.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:54.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:54.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:55.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:55.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:56.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:56.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:57.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:57.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:58.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
    if (scope.isLocal()) {
      return false;
    }
    
null
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (scope.isLocal()) {
      return false;
    }
    
null

    return false;
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }

MOVE-BUGGY-STATEMENT
01:53:58.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:59.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:53:59.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:00.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:00.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:01.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:54:01.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:02.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:02.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1553
01:54:02.162 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (scope.isLocal()) {
      return false;
    }
if (scope.isBottom()) {
      return false;
    }
if (scope.isGlobal()) {
      return false;
    }
01:54:02.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:03.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:03.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:04.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope.isLocal(name)) {
      return false;
    }
if (scope.isLocal(this.compiler)) {
      return false;
    }
if (scope.isLocal(this.allNames)) {
      return false;
    }
if (scope.isLocal(this.referenceGraph)) {
      return false;
    }
if (scope.isLocal(this.scopes)) {
      return false;
    }
if (scope.isLocal(PROTOTYPE_SUBSTRING)) {
      return false;
    }
if (scope.isLocal(PROTOTYPE_SUBSTRING_LEN)) {
      return false;
    }
if (scope.isLocal(PROTOTYPE_SUFFIX_LEN)) {
      return false;
    }
if (scope.isLocal(WINDOW)) {
      return false;
    }
if (scope.isLocal(FUNCTION)) {
      return false;
    }
if (scope.isLocal(DEFAULT_GLOBAL_NAMES)) {
      return false;
    }
if (scope.isLocal(this.removeUnreferenced)) {
      return false;
    }
if (scope.isLocal(this.globalNames)) {
      return false;
    }
if (scope.isLocal(this.changeProxy)) {
      return false;
    }
if (scope.isLocal(this.externalNames)) {
      return false;
    }
if (scope.isLocal(this.refNodes)) {
      return false;
    }
if (scope.isLocal(this.aliases)) {
      return false;
    }
if (scope.isLocal(NON_LOCAL_RESULT_PREDICATE)) {
      return false;
    }
01:54:04.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:05.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:05.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:06.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:06.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:07.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:07.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:08.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:08.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:09.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:09.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:10.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:10.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:11.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:11.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:12.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:12.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:13.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:13.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:13.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:13.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:14.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:14.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:15.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:15.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:16.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:16.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:17.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:17.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:18.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:18.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:19.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:19.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:20.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:20.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:21.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope != null && scope.isLocal()) {
      return false;
    }
if (scope != null || scope.isLocal()) {
      return false;
    }
01:54:21.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:22.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:22.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:23.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope != null) {


}

01:54:23.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:24.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope == null) {
    return true;
}

if (scope == null) {
    return false;
}

if (scope == null) {
    throw new IllegalArgumentException("Empty variable: " + scope);
}

01:54:24.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:25.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:25.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:26.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:26.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:27.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope.isLocal()) {
      return false;
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
    
null

    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (scope.isLocal()) {
      return false;
    }

MOVE-BUGGY-STATEMENT

    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
    return false;
	if (scope.isLocal()) {
      return false;
    }

MOVE-BUGGY-STATEMENT
01:54:27.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:28.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:28.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:29.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:29.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:30.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:54:30.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:31.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:31.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1550
01:54:31.761 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(scope)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.compiler)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.allNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.referenceGraph)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.scopes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUFFIX_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(WINDOW)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(FUNCTION)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(DEFAULT_GLOBAL_NAMES)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.removeUnreferenced)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.globalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.changeProxy)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.externalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.refNodes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.aliases)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(NON_LOCAL_RESULT_PREDICATE)) {
      return true;
    }
if (compiler.getCodingConvention().isExported()) {
      return true;
    }
if (compiler.getCodingConvention().isExported(scope, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.compiler, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.allNames, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.referenceGraph, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.scopes, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING_LEN, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUFFIX_LEN, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(WINDOW, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(FUNCTION, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(DEFAULT_GLOBAL_NAMES, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.removeUnreferenced, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.globalNames, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.changeProxy, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.externalNames, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.refNodes, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.aliases, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(NON_LOCAL_RESULT_PREDICATE, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, scope)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.compiler)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.allNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.referenceGraph)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.scopes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, PROTOTYPE_SUBSTRING)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, PROTOTYPE_SUBSTRING_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, PROTOTYPE_SUFFIX_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, WINDOW)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, FUNCTION)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, DEFAULT_GLOBAL_NAMES)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.removeUnreferenced)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.globalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.changeProxy)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.externalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.refNodes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.aliases)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, NON_LOCAL_RESULT_PREDICATE)) {
      return true;
    }
01:54:31.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:32.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:32.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:33.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:33.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:34.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:34.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:35.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:35.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:36.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:36.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:37.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:37.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:38.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:38.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:39.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:39.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:40.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:40.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:41.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:41.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:42.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:42.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:43.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:43.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:44.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:44.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:45.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:45.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:46.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:46.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:47.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:47.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:48.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:48.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:49.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:49.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:50.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:50.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:51.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:51.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:52.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:52.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:53.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:53.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:54.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:54.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:55.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:55.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:56.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:56.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:57.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:57.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:58.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:58.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:59.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:54:59.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:00.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:00.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:01.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:01.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:02.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:02.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:03.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:03.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:04.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:04.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:05.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:05.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:06.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:06.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:07.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:07.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:08.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:08.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:09.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:09.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:10.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:10.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:11.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:11.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:12.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:12.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:13.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:13.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:14.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:14.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:15.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:15.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:16.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:16.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:17.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:17.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:18.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:18.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:19.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:19.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:20.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:20.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:21.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:21.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:22.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:22.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:23.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:23.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:24.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:24.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:25.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:25.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:26.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (compiler != null && compiler.getCodingConvention().isExported(name)) {
      return true;
    }
if (compiler != null || compiler.getCodingConvention().isExported(name)) {
      return true;
    }
01:55:26.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:27.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:27.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:28.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (compiler != null) {


}

if (name != null) {


}

01:55:28.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:29.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:29.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:30.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (compiler == null) {
    return true;
}

if (compiler == null) {
    return false;
}

if (compiler == null) {
    throw new IllegalArgumentException("Empty variable: " + compiler);
}

if (name == null) {
    return true;
}

if (name == null) {
    return false;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

01:55:30.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:31.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:31.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:32.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:32.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:33.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:33.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:34.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:34.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:35.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:35.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:36.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

    if (scope.isLocal()) {
      return false;
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }

MOVE-BUGGY-STATEMENT

    if (scope.isLocal()) {
      return false;
    }
    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }

MOVE-BUGGY-STATEMENT

    if (scope.isLocal()) {
      return false;
    }
    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
    return false;
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }

MOVE-BUGGY-STATEMENT
01:55:36.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:37.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:37.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:38.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:38.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:39.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:55:39.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:40.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:40.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1538
01:55:40.183 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return nameInfo;
if (nameInfo != null) {


}

01:55:40.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:41.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (nameInfo == null) {
    return null;
}

if (nameInfo == null) {
    throw new IllegalArgumentException("Empty variable: " + nameInfo);
}

01:55:41.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:42.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:42.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:43.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	return nameInfo;
return nameInfo;
	removeUnreferenced();
referenceAliases();
	return nameInfo;
return nameInfo;
	referenceAliases();
referenceParentNames();
	return nameInfo;
return nameInfo;
	referenceParentNames();
calculateReferences();
	return nameInfo;
return nameInfo;
	calculateReferences();
01:55:43.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:44.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:44.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:45.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:45.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:46.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:46.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:47.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:47.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:47.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:47.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:48.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:48.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:49.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:49.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:50.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:55:50.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:51.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:51.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1536
01:55:51.994 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
if (scope != null) {


}

if (name != null) {


}

01:55:51.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:52.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:52.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:53.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope == null) {
    return null;
}

if (scope == null) {
    throw new IllegalArgumentException("Empty variable: " + scope);
}

if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

01:55:53.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:54.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:55.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:55.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:55.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:56.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:56.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:57.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	removeUnreferenced();
referenceAliases();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	referenceAliases();
referenceParentNames();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	referenceParentNames();
calculateReferences();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	calculateReferences();
01:55:57.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:58.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:58.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:59.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:55:59.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:00.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:00.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:01.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:01.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:02.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:02.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:03.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:03.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:04.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:04.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:05.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	nameInfo.name = name;
    
null

    return nameInfo;
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);

MOVE-BUGGY-STATEMENT
01:56:05.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:06.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:06.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:07.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:07.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:08.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:08.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:09.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:09.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:10.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:10.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:11.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:11.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:12.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:12.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:13.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:13.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:14.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:14.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:15.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:56:15.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:16.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:16.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1535
01:56:16.998 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
nameInfo.name = name;
if (name != null) {


}

01:56:17.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:18.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

01:56:18.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:19.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:19.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:20.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	nameInfo.name = name;
nameInfo.name = name;
	removeUnreferenced();
createName(name);
createName(name);
	nameInfo.name = name;
nameInfo.name = name;
	createName(name);
createName(name);
createName(name);
	nameInfo.name = name;
nameInfo.name = name;
	createName(name);
referenceAliases();
	nameInfo.name = name;
nameInfo.name = name;
	referenceAliases();
referenceParentNames();
	nameInfo.name = name;
nameInfo.name = name;
	referenceParentNames();
calculateReferences();
	nameInfo.name = name;
nameInfo.name = name;
	calculateReferences();
01:56:20.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:21.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:21.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:22.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:22.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:23.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:23.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:24.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:24.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:25.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:25.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:26.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:26.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:27.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:27.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:28.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:28.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:29.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:29.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:30.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:30.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:31.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:31.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:32.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:32.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:33.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:33.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:34.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
nameInfo.name = name;
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null

    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	nameInfo.name = name;

MOVE-BUGGY-STATEMENT

    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
    return nameInfo;
	nameInfo.name = name;

MOVE-BUGGY-STATEMENT
01:56:34.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:35.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:35.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:36.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:36.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:37.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:37.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:38.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:38.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:39.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:39.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:40.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:40.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:40.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:40.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:41.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:41.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:42.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:42.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:43.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:56:43.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:44.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:44.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1528
01:56:44.937 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx == -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
01:56:44.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:45.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (idx == 0) {
    new IllegalArgumentException("");
}

if (idx != 0) {

    
}

if (idx > 0) {

    
}

01:56:45.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:46.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:46.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:47.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:47.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:48.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	removeUnreferenced();
referenceAliases();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	referenceAliases();
referenceParentNames();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	referenceParentNames();
calculateReferences();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	calculateReferences();
01:56:48.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:49.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:49.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:50.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:50.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:51.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:51.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:52.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:52.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:53.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:53.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:54.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:54.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:55.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:55.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:56.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null


    nameInfo.name = name;
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

MOVE-BUGGY-STATEMENT


    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

MOVE-BUGGY-STATEMENT


    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
    return nameInfo;
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

MOVE-BUGGY-STATEMENT
01:56:56.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:57.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:57.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:58.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:58.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:59.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:56:59.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:00.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:00.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:01.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:01.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:02.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:02.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:03.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:03.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:04.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:04.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:05.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:05.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:06.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:57:06.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:07.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:07.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1527
01:57:07.617 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
int idx = name.indexOf(PROTOTYPE_SUBSTRING);

double idx = name.indexOf(PROTOTYPE_SUBSTRING);
float idx = name.indexOf(PROTOTYPE_SUBSTRING);
long idx = name.indexOf(PROTOTYPE_SUBSTRING);
short idx = name.indexOf(PROTOTYPE_SUBSTRING);
byte idx = name.indexOf(PROTOTYPE_SUBSTRING);
01:57:07.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:08.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:08.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:09.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:09.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:10.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:10.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:11.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:11.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:12.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
int idx = name.lastIndexOf(PROTOTYPE_SUBSTRING);
01:57:12.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:13.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
int idx = name.indexOf(idx);
int idx = name.indexOf(nameInfo);
int idx = name.indexOf(isGlobalRef);
int idx = name.indexOf(isExtern);
int idx = name.indexOf(v);
int idx = name.indexOf(rootName);
int idx = name.indexOf(scope);
int idx = name.indexOf(rootNameNode);
int idx = name.indexOf(this.compiler);
int idx = name.indexOf(this.allNames);
int idx = name.indexOf(this.referenceGraph);
int idx = name.indexOf(this.scopes);
int idx = name.indexOf(PROTOTYPE_SUBSTRING_LEN);
int idx = name.indexOf(PROTOTYPE_SUFFIX_LEN);
int idx = name.indexOf(WINDOW);
int idx = name.indexOf(FUNCTION);
int idx = name.indexOf(DEFAULT_GLOBAL_NAMES);
int idx = name.indexOf(this.removeUnreferenced);
int idx = name.indexOf(this.globalNames);
int idx = name.indexOf(this.changeProxy);
int idx = name.indexOf(this.externalNames);
int idx = name.indexOf(this.refNodes);
int idx = name.indexOf(this.aliases);
int idx = name.indexOf(NON_LOCAL_RESULT_PREDICATE);
int idx = name.indexOf();
int idx = name.indexOf(idx, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(nameInfo, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(isGlobalRef, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(isExtern, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(v, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(rootName, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(scope, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(rootNameNode, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.compiler, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.allNames, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.referenceGraph, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.scopes, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING_LEN, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUFFIX_LEN, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(WINDOW, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(FUNCTION, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(DEFAULT_GLOBAL_NAMES, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.removeUnreferenced, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.globalNames, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.changeProxy, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.externalNames, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.refNodes, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.aliases, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(NON_LOCAL_RESULT_PREDICATE, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, idx);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, nameInfo);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, isGlobalRef);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, isExtern);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, v);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, rootName);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, scope);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, rootNameNode);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.compiler);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.allNames);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.referenceGraph);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.scopes);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, PROTOTYPE_SUBSTRING_LEN);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, PROTOTYPE_SUFFIX_LEN);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, WINDOW);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, FUNCTION);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, DEFAULT_GLOBAL_NAMES);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.removeUnreferenced);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.globalNames);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.changeProxy);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.externalNames);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.refNodes);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.aliases);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, NON_LOCAL_RESULT_PREDICATE);
01:57:13.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:14.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:14.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:15.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:15.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:16.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:16.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:17.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:17.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:18.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:18.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:19.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:19.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:20.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:20.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:21.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:21.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:22.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:22.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:23.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:23.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:24.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:24.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:25.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:25.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:26.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:26.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:27.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:27.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:28.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:28.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:29.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:29.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:30.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:30.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:31.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:31.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:32.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:32.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:33.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:33.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:34.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:34.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:35.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:35.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:36.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:36.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:37.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:37.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:38.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:38.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:39.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:39.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:40.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:40.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:41.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:41.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:42.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:42.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:43.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:43.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:44.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:44.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:45.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:45.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:46.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:46.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:47.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:47.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:48.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:48.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:49.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:49.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:50.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:50.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:51.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:51.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:52.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:52.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:53.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:53.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:54.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:54.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:55.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:55.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:56.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:56.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:57.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:57.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:58.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:58.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:59.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:57:59.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:00.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:00.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:01.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:01.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:02.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:02.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:03.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:03.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:04.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:04.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:05.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:05.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:06.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:06.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:07.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:07.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:08.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:08.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:09.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:09.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:10.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:10.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:11.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:11.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:12.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:12.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:13.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:13.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:14.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:14.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:15.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:15.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:16.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:16.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:17.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:17.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:18.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:18.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:19.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:19.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:20.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:20.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:21.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:21.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:22.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:22.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:23.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:23.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:24.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:24.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:25.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:25.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:26.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
int idx = idx.indexOf(PROTOTYPE_SUBSTRING);
int idx = nameInfo.indexOf(PROTOTYPE_SUBSTRING);
int idx = isGlobalRef.indexOf(PROTOTYPE_SUBSTRING);
int idx = isExtern.indexOf(PROTOTYPE_SUBSTRING);
int idx = v.indexOf(PROTOTYPE_SUBSTRING);
int idx = rootName.indexOf(PROTOTYPE_SUBSTRING);
int idx = scope.indexOf(PROTOTYPE_SUBSTRING);
int idx = rootNameNode.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.compiler.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.allNames.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.referenceGraph.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.scopes.indexOf(PROTOTYPE_SUBSTRING);
int idx = PROTOTYPE_SUBSTRING.indexOf(PROTOTYPE_SUBSTRING);
int idx = PROTOTYPE_SUBSTRING_LEN.indexOf(PROTOTYPE_SUBSTRING);
int idx = PROTOTYPE_SUFFIX_LEN.indexOf(PROTOTYPE_SUBSTRING);
int idx = WINDOW.indexOf(PROTOTYPE_SUBSTRING);
int idx = FUNCTION.indexOf(PROTOTYPE_SUBSTRING);
int idx = DEFAULT_GLOBAL_NAMES.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.removeUnreferenced.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.globalNames.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.changeProxy.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.externalNames.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.refNodes.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.aliases.indexOf(PROTOTYPE_SUBSTRING);
int idx = NON_LOCAL_RESULT_PREDICATE.indexOf(PROTOTYPE_SUBSTRING);
01:58:26.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:27.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:27.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:28.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:28.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:29.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:29.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:30.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:30.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:31.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:31.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:32.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:32.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:33.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:33.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:34.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:34.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:35.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:35.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:36.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:36.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:37.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:37.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:38.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:38.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:39.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:39.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:40.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:40.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:41.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:41.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:42.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:42.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:43.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:43.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:44.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:44.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:45.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:45.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:46.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:46.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:47.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:47.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:48.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:48.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:49.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:49.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:50.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:50.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:51.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (name != null) {


}

if (PROTOTYPE_SUBSTRING != null) {


}

01:58:51.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:52.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:52.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:53.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

if (PROTOTYPE_SUBSTRING == null) {
    return null;
}

if (PROTOTYPE_SUBSTRING == null) {
    throw new IllegalArgumentException("Empty variable: " + PROTOTYPE_SUBSTRING);
}

01:58:53.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:54.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:54.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:55.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:55.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:56.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:56.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:57.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	removeUnreferenced();
referenceAliases();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	referenceAliases();
referenceParentNames();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	referenceParentNames();
calculateReferences();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	calculateReferences();
01:58:57.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:58.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:58.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:59.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:58:59.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:00.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:00.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:01.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:01.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:02.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:02.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:03.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:03.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:04.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:04.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:05.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:59:05.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:06.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:06.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1524
01:59:07.018 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
NameInformation nameInfo = new NameInformation();
removeUnreferenced();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	removeUnreferenced();
referenceAliases();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	referenceAliases();
referenceParentNames();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	referenceParentNames();
calculateReferences();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	calculateReferences();
01:59:07.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:08.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:08.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:09.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:09.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:10.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:10.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:11.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:11.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:12.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:12.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:13.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:13.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:14.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:14.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:15.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:59:15.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:16.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:16.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1520
01:59:16.270 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!isGlobalRef) {
      return null;
    }
if (!isExtern) {
      return null;
    }
01:59:16.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:17.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	removeUnreferenced();
referenceAliases();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	referenceAliases();
referenceParentNames();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	referenceParentNames();
calculateReferences();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	calculateReferences();
01:59:17.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:18.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:18.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:19.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:19.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:20.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:20.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:21.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:21.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:22.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:22.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:23.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:23.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:24.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:24.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:25.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (!isGlobalRef) {
      return null;
    }
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null
if (!isGlobalRef) {
      return null;
    }
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null
if (!isGlobalRef) {
      return null;
    }
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null
if (!isGlobalRef) {
      return null;
    }
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null


    NameInformation nameInfo = new NameInformation();
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
    return nameInfo;
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT
01:59:25.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:26.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:26.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:27.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:27.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:28.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:28.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:29.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:29.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:30.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:30.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:31.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:31.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:32.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:32.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:33.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:33.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:34.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:34.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:35.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:59:35.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:36.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:36.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1518
01:59:36.845 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
if (v != null) {


}

if (v != null) {


}

if (rootName != null) {


}

if (WINDOW != null) {


}

01:59:36.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:37.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:37.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:38.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:38.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:39.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:39.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:40.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (v == null) {
    return null;
}

if (v == null) {
    throw new IllegalArgumentException("Empty variable: " + v);
}

if (v == null) {
    return null;
}

if (v == null) {
    throw new IllegalArgumentException("Empty variable: " + v);
}

if (rootName == null) {
    return null;
}

if (rootName == null) {
    throw new IllegalArgumentException("Empty variable: " + rootName);
}

if (WINDOW == null) {
    return null;
}

if (WINDOW == null) {
    throw new IllegalArgumentException("Empty variable: " + WINDOW);
}

01:59:40.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:41.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:41.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:42.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:42.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:43.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:43.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:44.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:44.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:45.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:45.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:46.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:46.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:47.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:47.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:48.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	removeUnreferenced();
referenceAliases();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	referenceAliases();
referenceParentNames();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	referenceParentNames();
calculateReferences();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	calculateReferences();
01:59:48.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:49.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:49.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:50.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:50.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:51.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:51.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:52.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:52.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:53.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:53.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:54.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:54.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:55.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:55.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:56.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

01:59:56.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:57.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:57.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1517
01:59:57.777 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean isExtern = (v == null && externalNames.contains(rootName));
if (v != null) {


}

if (externalNames != null) {


}

if (rootName != null) {


}

01:59:57.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:58.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:58.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:59.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
01:59:59.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:00.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (v == null) {
    return null;
}

if (v == null) {
    throw new IllegalArgumentException("Empty variable: " + v);
}

if (externalNames == null) {
    return null;
}

if (externalNames == null) {
    throw new IllegalArgumentException("Empty variable: " + externalNames);
}

if (rootName == null) {
    return null;
}

if (rootName == null) {
    throw new IllegalArgumentException("Empty variable: " + rootName);
}

02:00:00.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:01.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:01.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:02.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:02.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:03.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:03.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:04.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:04.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:05.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:05.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:06.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	removeUnreferenced();
referenceAliases();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	referenceAliases();
referenceParentNames();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	referenceParentNames();
calculateReferences();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	calculateReferences();
02:00:06.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:07.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:07.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:08.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:08.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:09.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:09.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:10.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:10.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:11.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:11.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:12.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:12.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:13.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:13.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:14.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:00:14.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:15.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:15.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1516
02:00:15.431 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Var v = scope.getVar(rootName);
Var v = scope.getSlot(rootName);
Var v = scope.getOwnSlot(rootName);
02:00:15.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:16.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:16.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:17.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
Var v = scope.getVar(v);
Var v = scope.getVar(name);
Var v = scope.getVar(rootNameNode);
Var v = scope.getVar(this.compiler);
Var v = scope.getVar(this.allNames);
Var v = scope.getVar(this.referenceGraph);
Var v = scope.getVar(this.scopes);
Var v = scope.getVar(PROTOTYPE_SUBSTRING);
Var v = scope.getVar(PROTOTYPE_SUBSTRING_LEN);
Var v = scope.getVar(PROTOTYPE_SUFFIX_LEN);
Var v = scope.getVar(WINDOW);
Var v = scope.getVar(FUNCTION);
Var v = scope.getVar(DEFAULT_GLOBAL_NAMES);
Var v = scope.getVar(this.removeUnreferenced);
Var v = scope.getVar(this.globalNames);
Var v = scope.getVar(this.changeProxy);
Var v = scope.getVar(this.externalNames);
Var v = scope.getVar(this.refNodes);
Var v = scope.getVar(this.aliases);
Var v = scope.getVar(NON_LOCAL_RESULT_PREDICATE);
Var v = scope.getVar();
Var v = scope.getVar(v, rootName);
Var v = scope.getVar(name, rootName);
Var v = scope.getVar(rootNameNode, rootName);
Var v = scope.getVar(this.compiler, rootName);
Var v = scope.getVar(this.allNames, rootName);
Var v = scope.getVar(this.referenceGraph, rootName);
Var v = scope.getVar(this.scopes, rootName);
Var v = scope.getVar(PROTOTYPE_SUBSTRING, rootName);
Var v = scope.getVar(PROTOTYPE_SUBSTRING_LEN, rootName);
Var v = scope.getVar(PROTOTYPE_SUFFIX_LEN, rootName);
Var v = scope.getVar(WINDOW, rootName);
Var v = scope.getVar(FUNCTION, rootName);
Var v = scope.getVar(DEFAULT_GLOBAL_NAMES, rootName);
Var v = scope.getVar(this.removeUnreferenced, rootName);
Var v = scope.getVar(this.globalNames, rootName);
Var v = scope.getVar(this.changeProxy, rootName);
Var v = scope.getVar(this.externalNames, rootName);
Var v = scope.getVar(this.refNodes, rootName);
Var v = scope.getVar(this.aliases, rootName);
Var v = scope.getVar(NON_LOCAL_RESULT_PREDICATE, rootName);
Var v = scope.getVar(rootName, v);
Var v = scope.getVar(rootName, name);
Var v = scope.getVar(rootName, rootNameNode);
Var v = scope.getVar(rootName, this.compiler);
Var v = scope.getVar(rootName, this.allNames);
Var v = scope.getVar(rootName, this.referenceGraph);
Var v = scope.getVar(rootName, this.scopes);
Var v = scope.getVar(rootName, PROTOTYPE_SUBSTRING);
Var v = scope.getVar(rootName, PROTOTYPE_SUBSTRING_LEN);
Var v = scope.getVar(rootName, PROTOTYPE_SUFFIX_LEN);
Var v = scope.getVar(rootName, WINDOW);
Var v = scope.getVar(rootName, FUNCTION);
Var v = scope.getVar(rootName, DEFAULT_GLOBAL_NAMES);
Var v = scope.getVar(rootName, this.removeUnreferenced);
Var v = scope.getVar(rootName, this.globalNames);
Var v = scope.getVar(rootName, this.changeProxy);
Var v = scope.getVar(rootName, this.externalNames);
Var v = scope.getVar(rootName, this.refNodes);
Var v = scope.getVar(rootName, this.aliases);
Var v = scope.getVar(rootName, NON_LOCAL_RESULT_PREDICATE);
02:00:17.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:18.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:18.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:19.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:19.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:20.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:20.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:21.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:21.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:22.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:22.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:23.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:23.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:24.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:24.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:25.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:25.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:26.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:26.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:27.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:27.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:28.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:28.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:29.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:29.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:30.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:30.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:31.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:31.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:32.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:32.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:33.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:33.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:34.031 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:34.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:35.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:35.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:35.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:35.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:36.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:36.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:37.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:37.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:38.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:38.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:39.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:39.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:40.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:40.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:41.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:41.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:42.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:42.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:43.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:43.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:44.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:44.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:45.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:45.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:46.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:46.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:47.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:47.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:48.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:48.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:49.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:49.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:50.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:50.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:51.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:51.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:52.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:52.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:53.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:53.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:54.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:54.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:55.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:55.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:56.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:56.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:57.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:57.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:58.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:58.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:59.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:00:59.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:00.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:00.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:01.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:01.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:02.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:02.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:03.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:03.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:04.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:04.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:05.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:05.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:06.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:06.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:07.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:07.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:08.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:08.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:09.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:09.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:10.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:10.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:11.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:11.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:12.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:12.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:13.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:13.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:14.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:14.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:15.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:15.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:16.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:16.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:17.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
Var v = v.getVar(rootName);
Var v = rootName.getVar(rootName);
Var v = name.getVar(rootName);
Var v = rootNameNode.getVar(rootName);
Var v = this.compiler.getVar(rootName);
Var v = this.allNames.getVar(rootName);
Var v = this.referenceGraph.getVar(rootName);
Var v = this.scopes.getVar(rootName);
Var v = PROTOTYPE_SUBSTRING.getVar(rootName);
Var v = PROTOTYPE_SUBSTRING_LEN.getVar(rootName);
Var v = PROTOTYPE_SUFFIX_LEN.getVar(rootName);
Var v = WINDOW.getVar(rootName);
Var v = FUNCTION.getVar(rootName);
Var v = DEFAULT_GLOBAL_NAMES.getVar(rootName);
Var v = this.removeUnreferenced.getVar(rootName);
Var v = this.globalNames.getVar(rootName);
Var v = this.changeProxy.getVar(rootName);
Var v = this.externalNames.getVar(rootName);
Var v = this.refNodes.getVar(rootName);
Var v = this.aliases.getVar(rootName);
Var v = NON_LOCAL_RESULT_PREDICATE.getVar(rootName);
02:01:17.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:18.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:18.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:19.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:19.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:20.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:20.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:21.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:21.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:22.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:22.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:23.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:23.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:24.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:24.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:25.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:25.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:26.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:26.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:27.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:27.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:28.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:28.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:29.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:29.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:30.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:30.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:31.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:31.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:32.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:32.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:33.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:33.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:34.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:34.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:35.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:35.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:36.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:36.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:37.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:37.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:38.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope != null) {


}

if (rootName != null) {


}

02:01:38.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:39.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:39.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:40.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (scope == null) {
    return null;
}

if (scope == null) {
    throw new IllegalArgumentException("Empty variable: " + scope);
}

if (rootName == null) {
    return null;
}

if (rootName == null) {
    throw new IllegalArgumentException("Empty variable: " + rootName);
}

02:01:40.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:41.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:41.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:42.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:42.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:43.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:43.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:44.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	removeUnreferenced();
referenceAliases();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	referenceAliases();
referenceParentNames();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	referenceParentNames();
calculateReferences();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	calculateReferences();
02:01:44.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:45.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:45.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:46.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:46.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:47.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:47.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:48.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:48.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:49.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:49.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:50.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:50.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:51.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:51.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:52.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:01:52.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:53.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:53.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1515
02:01:53.487 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
String rootName = rootNameNode.getString();
String rootName = rootNameNode.toString();
String rootName = rootNameNode.toStringTree();
String rootName = rootNameNode.toStringTreeImpl();
String rootName = rootNameNode.getSourceFileName();
String rootName = rootNameNode.getQualifiedName();
02:01:53.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:54.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:54.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:55.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:55.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:56.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:56.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:57.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:57.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:58.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
String rootName = rootNameNode.getString(rootName);
String rootName = rootNameNode.getString(name);
String rootName = rootNameNode.getString(scope);
String rootName = rootNameNode.getString(this.compiler);
String rootName = rootNameNode.getString(this.allNames);
String rootName = rootNameNode.getString(this.referenceGraph);
String rootName = rootNameNode.getString(this.scopes);
String rootName = rootNameNode.getString(PROTOTYPE_SUBSTRING);
String rootName = rootNameNode.getString(PROTOTYPE_SUBSTRING_LEN);
String rootName = rootNameNode.getString(PROTOTYPE_SUFFIX_LEN);
String rootName = rootNameNode.getString(WINDOW);
String rootName = rootNameNode.getString(FUNCTION);
String rootName = rootNameNode.getString(DEFAULT_GLOBAL_NAMES);
String rootName = rootNameNode.getString(this.removeUnreferenced);
String rootName = rootNameNode.getString(this.globalNames);
String rootName = rootNameNode.getString(this.changeProxy);
String rootName = rootNameNode.getString(this.externalNames);
String rootName = rootNameNode.getString(this.refNodes);
String rootName = rootNameNode.getString(this.aliases);
String rootName = rootNameNode.getString(NON_LOCAL_RESULT_PREDICATE);
02:01:58.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:59.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:01:59.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:00.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:00.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:01.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:01.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:02.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:02.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:03.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:03.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:04.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:04.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:05.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:05.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:06.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:06.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:07.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:07.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:08.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:08.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:09.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:09.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:10.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:10.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:11.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:11.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:12.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:12.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:13.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:13.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:14.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:14.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:15.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:15.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:16.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:16.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:17.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:17.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:18.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
String rootName = rootName.getString();
String rootName = name.getString();
String rootName = scope.getString();
String rootName = this.compiler.getString();
String rootName = this.allNames.getString();
String rootName = this.referenceGraph.getString();
String rootName = this.scopes.getString();
String rootName = PROTOTYPE_SUBSTRING.getString();
String rootName = PROTOTYPE_SUBSTRING_LEN.getString();
String rootName = PROTOTYPE_SUFFIX_LEN.getString();
String rootName = WINDOW.getString();
String rootName = FUNCTION.getString();
String rootName = DEFAULT_GLOBAL_NAMES.getString();
String rootName = this.removeUnreferenced.getString();
String rootName = this.globalNames.getString();
String rootName = this.changeProxy.getString();
String rootName = this.externalNames.getString();
String rootName = this.refNodes.getString();
String rootName = this.aliases.getString();
String rootName = NON_LOCAL_RESULT_PREDICATE.getString();
02:02:18.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:19.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:19.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:20.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:20.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:21.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:21.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:22.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:22.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:23.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:23.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:24.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:24.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:26.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:26.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:27.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:27.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:28.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:28.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:29.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:29.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:29.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:29.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:30.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:31.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:31.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:32.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:32.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:32.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:33.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:33.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:34.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:34.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:35.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:35.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:36.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:36.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:37.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:37.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:38.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode != null) {


}

02:02:38.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:39.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:02:39.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:40.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:40.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:41.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	removeUnreferenced();
createName(rootName);
createName(rootName);
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	createName(rootName);
referenceAliases();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	referenceAliases();
referenceParentNames();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	referenceParentNames();
calculateReferences();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	calculateReferences();
02:02:41.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:42.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:42.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:43.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:43.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:44.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:44.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:45.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:45.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:46.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:46.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:47.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:47.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:48.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:48.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:49.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:49.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:50.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:50.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:51.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:51.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:52.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:02:52.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:53.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:53.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1483
02:02:53.692 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            bNameWasShortened, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            name, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            parent, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            t, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            n, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.compiler, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.allNames, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.referenceGraph, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.scopes, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            PROTOTYPE_SUBSTRING, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            PROTOTYPE_SUBSTRING_LEN, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            PROTOTYPE_SUFFIX_LEN, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            WINDOW, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            FUNCTION, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            DEFAULT_GLOBAL_NAMES, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.removeUnreferenced, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.globalNames, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.changeProxy, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.externalNames, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.refNodes, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.aliases, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            NON_LOCAL_RESULT_PREDICATE, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, bNameWasShortened, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, name, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, parent, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, n, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.compiler, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.allNames, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.referenceGraph, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.scopes, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, PROTOTYPE_SUBSTRING, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, PROTOTYPE_SUBSTRING_LEN, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, PROTOTYPE_SUFFIX_LEN, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, WINDOW, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, FUNCTION, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, DEFAULT_GLOBAL_NAMES, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.removeUnreferenced, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.globalNames, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.changeProxy, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.externalNames, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.refNodes, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.aliases, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, NON_LOCAL_RESULT_PREDICATE, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), bNameWasShortened);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), name);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), parent);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), t);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), n);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.compiler);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.allNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.referenceGraph);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.scopes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUFFIX_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), WINDOW);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), FUNCTION);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), DEFAULT_GLOBAL_NAMES);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.removeUnreferenced);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.globalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.changeProxy);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.externalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.refNodes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.aliases);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), NON_LOCAL_RESULT_PREDICATE);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), );
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), bNameWasShortened, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), name, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), parent, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), t, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), n, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.compiler, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.allNames, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.referenceGraph, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.scopes, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING_LEN, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUFFIX_LEN, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), WINDOW, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), FUNCTION, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), DEFAULT_GLOBAL_NAMES, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.removeUnreferenced, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.globalNames, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.changeProxy, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.externalNames, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.refNodes, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.aliases, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), NON_LOCAL_RESULT_PREDICATE, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, bNameWasShortened);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, name);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, parent);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, t);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, n);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.compiler);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.allNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.referenceGraph);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.scopes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, PROTOTYPE_SUBSTRING);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, PROTOTYPE_SUBSTRING_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, PROTOTYPE_SUFFIX_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, WINDOW);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, FUNCTION);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, DEFAULT_GLOBAL_NAMES);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.removeUnreferenced);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.globalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.changeProxy);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.externalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.refNodes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.aliases);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, NON_LOCAL_RESULT_PREDICATE);
02:02:53.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:54.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:54.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:55.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:55.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:56.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:56.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:57.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:57.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:58.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:58.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:59.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:02:59.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:00.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:00.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:01.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:01.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:02.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:02.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:03.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:03.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:04.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:04.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:05.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:05.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:06.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:06.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:07.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:07.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:08.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:08.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:09.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:09.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:10.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:10.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:11.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:11.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:12.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:12.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:13.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:13.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:14.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:14.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:15.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:15.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:16.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:16.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:17.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:17.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:18.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:18.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:19.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:19.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:20.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:20.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:21.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:21.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:22.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:22.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:23.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:23.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:24.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:24.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:25.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:25.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:26.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:26.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:27.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:27.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:28.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:28.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:29.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:29.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:30.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:30.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:31.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:31.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:32.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:32.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:33.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:33.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:34.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:34.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:35.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:35.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:36.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:36.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:37.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:37.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:38.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:38.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:39.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:39.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:40.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:40.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:41.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:41.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:42.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:42.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:43.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:43.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:44.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:44.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:45.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:45.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:46.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:46.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:47.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:47.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:48.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:48.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:49.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:49.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:50.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:50.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:51.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:51.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:52.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:52.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:53.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:53.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:54.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:54.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:55.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:55.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:56.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:56.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:57.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:57.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:58.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:58.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:59.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:03:59.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:00.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:00.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:01.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:01.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:02.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:02.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:03.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:03.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:04.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:04.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:05.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:05.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:06.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:06.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:07.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:07.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:08.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:08.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:09.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:09.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:10.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:10.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:11.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:11.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:12.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:12.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:13.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:13.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:14.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:14.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:15.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:15.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:16.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:16.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:17.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:17.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:18.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:18.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:19.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:19.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:20.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:20.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:21.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:21.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:22.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:22.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:23.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:23.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:24.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:24.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:25.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:25.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:26.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:26.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:27.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:27.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:28.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:28.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:29.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:29.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:30.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:30.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:31.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:31.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:32.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:32.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:33.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:33.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:34.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:34.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:35.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:35.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:36.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:36.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:37.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:37.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:38.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:38.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:39.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:39.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:40.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:40.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:41.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:41.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:42.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:42.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:43.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:43.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:44.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
return getHtmlReport();
02:04:44.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:45.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
return createNameInformation(
            true, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            false, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, true, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, false, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), true, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), false, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, true);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, false);
02:04:45.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:46.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:46.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:47.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:47.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:48.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:48.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:49.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:49.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:50.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:50.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:51.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:51.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:52.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:52.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:53.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode != null) {


}

if (name != null) {


}

if (t != null) {


}

if (rootNameNode != null) {


}

02:04:53.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:54.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:54.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:55.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:55.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:56.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:56.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:57.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

if (t == null) {
    return null;
}

if (t == null) {
    throw new IllegalArgumentException("Empty variable: " + t);
}

if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:04:57.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:58.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:58.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:59.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:04:59.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:00.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:00.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:01.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:01.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:02.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:02.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:03.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:03.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:04.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:04.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:05.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:05:05.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:06.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:06.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1469
02:05:06.266 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened || n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
02:05:06.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:07.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (parent != null) {


}

if (n != null) {


}

02:05:07.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:08.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:08.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:09.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:09.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:10.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:05:10.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:11.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:11.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:12.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:12.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:13.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:13.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:14.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:14.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:15.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:15.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:16.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	removeUnreferenced();
referenceAliases();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	referenceAliases();
referenceParentNames();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	referenceParentNames();
calculateReferences();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	calculateReferences();
02:05:16.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:17.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:17.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:18.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:18.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:19.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:19.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:20.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:20.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:21.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:21.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:22.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:22.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:23.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:23.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:24.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }

MOVE-BUGGY-STATEMENT
02:05:24.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:25.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:05:25.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:26.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:26.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1465
02:05:26.336 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
if (rootNameNode != null) {


}

02:05:26.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:27.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:05:27.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:28.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:28.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:29.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	Node parent = n.getParent();
    // Build the full name and find its root node by iterating down through all
    // GETPROP/GETELEM nodes.
    String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
02:05:29.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:30.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:30.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:31.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:31.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:32.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:32.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:33.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:33.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:34.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:34.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:35.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:05:35.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:36.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:36.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1444
02:05:36.471 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
if (parent.isCall() || t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
02:05:36.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:37.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

if (t != null) {


}

02:05:37.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:38.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:38.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:39.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (t == null) {
    return null;
}

if (t == null) {
    throw new IllegalArgumentException("Empty variable: " + t);
}

02:05:39.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:40.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:40.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:41.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:41.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:42.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:42.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:43.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	Node parent = n.getParent();
    // Build the full name and find its root node by iterating down through all
    // GETPROP/GETELEM nodes.
    String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null


    switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

MOVE-BUGGY-STATEMENT
02:05:43.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:44.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:44.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:45.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:45.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:46.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:46.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:47.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:47.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:48.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:48.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:49.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:05:49.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:50.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:50.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1409
02:05:50.501 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isImmutableValue(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isSymmetricOperation(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isRelationalOperation(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isEmptyBlock(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isSimpleOperator(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNamespaceDecl(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isEmptyObjectLit(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayEffectMutableState(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayHaveSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.constructorCallHasSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.functionCallHasSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.callHasLocalResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.newHasLocalResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.nodeTypeMayHaveSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.allArgsUnescapedLocal(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.canBeSideEffected(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isUndefined(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNullOrUndefined(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isImmutableResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNumericResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNumericResultHelper(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isBooleanResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isBooleanResultHelper(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayBeString(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayBeStringHelper(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isAssignmentOp(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.containsFunction(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.referencesThis(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isVarDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExprAssign(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExprCall(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isForIn(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isLoopStructure(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isWithinLoop(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isControlStructure(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isStatementBlock(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isStatement(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isStatementParent(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isSwitchCase(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isReferenceName(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isTryCatchNodeContainer(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.tryMergeBlock(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isCallOrNew(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isHoistedFunctionDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionExpression(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isBleedingFunctionName(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isEmptyFunctionExpression(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isVarArgsFunction(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionObjectCall(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionObjectApply(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isLValue(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isObjectLitKey(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGetOrSetKey(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isPrototypePropertyDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isPrototypeProperty(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.hasFinally(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.hasCatchHandler(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isConstantName(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.evaluatesToLocalValue(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isCallOrNewTarget(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isToStringMethodCall(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExpressionResultUsed(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExecutedExactlyOnce(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNaN(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
02:05:50.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:51.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:51.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:52.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:52.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:53.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:53.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:54.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:54.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:55.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:55.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:56.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:56.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:57.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:57.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:58.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:58.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:59.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:05:59.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:00.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:00.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:01.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:01.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:02.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:02.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:03.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:03.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:04.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:04.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:05.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:05.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:06.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:06.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:07.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:07.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:08.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:08.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:09.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:09.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:10.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:10.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:11.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:11.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:12.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:12.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:13.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:13.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:14.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:14.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:15.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:15.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:16.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:16.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:17.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:17.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:18.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:18.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:19.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:19.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:20.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:20.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:22.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:22.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:23.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:23.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:24.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:24.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:25.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:25.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:26.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:26.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:27.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:27.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:28.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:28.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:29.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:29.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:30.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:30.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:31.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:31.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:32.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:32.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:33.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:33.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:34.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:34.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:35.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:35.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:36.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:36.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:37.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:37.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:38.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:38.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:39.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:39.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:40.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:40.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:41.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:41.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:42.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:42.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:43.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:43.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:44.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:44.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:45.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:45.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:46.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:46.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:47.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:47.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:48.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:48.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:49.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:49.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:50.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:50.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:51.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:51.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:52.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:52.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:53.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:53.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:54.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:54.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:55.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:55.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:56.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil.isGet(bNameWasShortened)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(name)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(parent)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(t)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(n)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.compiler)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.allNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.referenceGraph)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.scopes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUFFIX_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(WINDOW)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(FUNCTION)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(DEFAULT_GLOBAL_NAMES)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.removeUnreferenced)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.globalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.changeProxy)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.externalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.refNodes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.aliases)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(NON_LOCAL_RESULT_PREDICATE)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet()) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(bNameWasShortened, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(name, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(parent, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(t, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(n, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.compiler, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.allNames, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.referenceGraph, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.scopes, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING_LEN, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUFFIX_LEN, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(WINDOW, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(FUNCTION, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(DEFAULT_GLOBAL_NAMES, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.removeUnreferenced, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.globalNames, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.changeProxy, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.externalNames, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.refNodes, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.aliases, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(NON_LOCAL_RESULT_PREDICATE, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, bNameWasShortened)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, name)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, parent)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, t)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, n)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.compiler)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.allNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.referenceGraph)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.scopes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, PROTOTYPE_SUBSTRING)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, PROTOTYPE_SUBSTRING_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, PROTOTYPE_SUFFIX_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, WINDOW)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, FUNCTION)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, DEFAULT_GLOBAL_NAMES)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.removeUnreferenced)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.globalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.changeProxy)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.externalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.refNodes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.aliases)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, NON_LOCAL_RESULT_PREDICATE)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
02:06:56.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:57.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:57.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:58.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:58.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:59.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:06:59.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:00.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:00.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:01.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:01.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:02.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:02.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:03.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:03.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:04.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:04.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:05.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:05.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:06.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:06.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:07.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:07.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:08.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:08.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:09.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:09.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:10.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:10.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:11.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:11.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:12.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:12.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:13.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:13.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:14.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:14.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:15.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:15.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:16.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:16.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:17.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:17.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:18.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:18.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:19.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:19.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:20.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:20.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:21.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:21.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:22.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:22.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:23.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:23.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:24.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:24.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:25.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:25.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:26.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:26.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:27.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:27.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:28.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:28.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:29.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:29.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:30.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:30.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:31.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:31.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:32.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:32.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:33.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:33.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:34.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:34.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:35.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:35.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:36.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:36.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:37.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:37.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:38.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:38.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:39.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:39.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:40.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:40.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:41.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:41.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:42.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:42.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:43.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:43.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:44.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:44.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:45.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:45.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:46.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:46.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:47.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:47.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:48.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:48.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:49.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:49.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:50.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:50.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:51.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:51.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:52.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:52.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:53.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:53.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:54.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:54.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:55.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:55.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:56.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:56.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:57.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:57.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:58.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:58.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:59.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:07:59.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:00.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:00.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:01.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:01.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:02.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:02.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:03.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil != null && NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil != null || NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
02:08:03.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:04.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:04.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:05.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode != null) {


}

02:08:05.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:06.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:08:06.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:07.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:07.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:08.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:08:08.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:09.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:09.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1407
02:08:09.894 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean bNameWasShortened = false;
removeUnreferenced();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	removeUnreferenced();
referenceAliases();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	referenceAliases();
referenceParentNames();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	referenceParentNames();
calculateReferences();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	calculateReferences();
02:08:09.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:10.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:10.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:11.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:11.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:12.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:12.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:13.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:13.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:14.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:14.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:15.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:15.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:16.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:16.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:17.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:08:17.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:18.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:18.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1406
02:08:18.914 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node rootNameNode = n;
if (n != null) {


}

02:08:18.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:19.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:08:19.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:20.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:20.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:21.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	Node rootNameNode = n;
Node rootNameNode = n;
	removeUnreferenced();
referenceAliases();
	Node rootNameNode = n;
Node rootNameNode = n;
	referenceAliases();
referenceParentNames();
	Node rootNameNode = n;
Node rootNameNode = n;
	referenceParentNames();
calculateReferences();
	Node rootNameNode = n;
Node rootNameNode = n;
	calculateReferences();
02:08:21.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:22.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:22.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:23.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:23.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:24.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:24.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:25.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:25.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:27.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:27.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:28.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:28.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:29.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:29.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:30.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:08:30.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:31.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:31.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1405
02:08:31.161 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
String name = "";
removeUnreferenced();
	String name = "";
String name = "";
	removeUnreferenced();
createName(name);
createName(name);
	String name = "";
String name = "";
	createName(name);
referenceAliases();
	String name = "";
String name = "";
	referenceAliases();
referenceParentNames();
	String name = "";
String name = "";
	referenceParentNames();
calculateReferences();
	String name = "";
String name = "";
	calculateReferences();
02:08:31.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:32.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:32.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:33.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:33.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:34.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:34.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:35.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:35.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:36.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:36.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:37.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:37.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:38.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:38.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:39.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:39.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:40.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:40.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:41.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:41.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:42.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:08:42.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:43.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:43.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1402
02:08:43.167 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node parent = n.getParent();
Node parent = n.getFirstChild();
Node parent = n.getLastChild();
Node parent = n.getNext();
Node parent = n.getLastSibling();
Node parent = n.detachFromParent();
Node parent = n.removeFirstChild();
Node parent = n.removeChildren();
Node parent = n.cloneNode();
Node parent = n.cloneTree();
02:08:43.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:44.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:44.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:45.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:45.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:46.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:46.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:47.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:47.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:48.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:48.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:49.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:49.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:50.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:50.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:51.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:51.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:52.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
Node parent = n.getParent(parent);
Node parent = n.getParent(t);
Node parent = n.getParent(this.compiler);
Node parent = n.getParent(this.allNames);
Node parent = n.getParent(this.referenceGraph);
Node parent = n.getParent(this.scopes);
Node parent = n.getParent(PROTOTYPE_SUBSTRING);
Node parent = n.getParent(PROTOTYPE_SUBSTRING_LEN);
Node parent = n.getParent(PROTOTYPE_SUFFIX_LEN);
Node parent = n.getParent(WINDOW);
Node parent = n.getParent(FUNCTION);
Node parent = n.getParent(DEFAULT_GLOBAL_NAMES);
Node parent = n.getParent(this.removeUnreferenced);
Node parent = n.getParent(this.globalNames);
Node parent = n.getParent(this.changeProxy);
Node parent = n.getParent(this.externalNames);
Node parent = n.getParent(this.refNodes);
Node parent = n.getParent(this.aliases);
Node parent = n.getParent(NON_LOCAL_RESULT_PREDICATE);
02:08:52.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:53.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:53.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:54.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:54.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:55.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:55.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:56.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:56.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:57.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:57.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:58.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:58.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:59.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:08:59.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:00.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:00.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:01.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:01.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:02.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:02.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:03.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:03.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:04.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:04.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:05.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:05.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:06.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:06.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:07.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:07.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:08.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:08.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:09.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:09.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:10.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:10.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:11.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
Node parent = parent.getParent();
Node parent = t.getParent();
Node parent = this.compiler.getParent();
Node parent = this.allNames.getParent();
Node parent = this.referenceGraph.getParent();
Node parent = this.scopes.getParent();
Node parent = PROTOTYPE_SUBSTRING.getParent();
Node parent = PROTOTYPE_SUBSTRING_LEN.getParent();
Node parent = PROTOTYPE_SUFFIX_LEN.getParent();
Node parent = WINDOW.getParent();
Node parent = FUNCTION.getParent();
Node parent = DEFAULT_GLOBAL_NAMES.getParent();
Node parent = this.removeUnreferenced.getParent();
Node parent = this.globalNames.getParent();
Node parent = this.changeProxy.getParent();
Node parent = this.externalNames.getParent();
Node parent = this.refNodes.getParent();
Node parent = this.aliases.getParent();
Node parent = NON_LOCAL_RESULT_PREDICATE.getParent();
02:09:11.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:12.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:12.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:13.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:13.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:14.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:14.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:15.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:15.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:16.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:16.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:17.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:17.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:18.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:18.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:19.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:19.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:20.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:20.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:21.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:21.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:22.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:22.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:23.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:23.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:24.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:24.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:25.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:25.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:26.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:26.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:27.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:27.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:28.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:28.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:29.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:29.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:30.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

02:09:30.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:31.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:09:31.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:32.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:32.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:33.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	Node parent = n.getParent();
Node parent = n.getParent();
	removeUnreferenced();
referenceAliases();
	Node parent = n.getParent();
Node parent = n.getParent();
	referenceAliases();
referenceParentNames();
	Node parent = n.getParent();
Node parent = n.getParent();
	referenceParentNames();
calculateReferences();
	Node parent = n.getParent();
Node parent = n.getParent();
	calculateReferences();
02:09:33.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:34.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:34.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:35.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:35.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:36.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:36.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:37.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:37.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:38.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:38.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:39.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:39.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:40.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:40.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:41.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 

02:09:41.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:42.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-107 ---Fixer: fix fail because of failed compiling! 
02:09:42.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1327
02:09:42.754 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
/**
   * Creates a {@link JsName} for the given name if it doesn't already
   * exist.
   *
   * @param name A fully qualified name
   */
  private void createName(String name) {
    JsName jsn = allNames.get(name);
    if (jsn == null) {
      jsn = new JsName();
      jsn.name = name;
      allNames.put(name, jsn);
    }
  }
