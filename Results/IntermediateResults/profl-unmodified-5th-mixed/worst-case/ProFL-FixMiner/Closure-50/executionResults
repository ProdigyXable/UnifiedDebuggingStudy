Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Closure-50
01:30:33.475 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 Failed Tests: 2
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/50.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/50.txt
01:34:23.159 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
01:34:23.218 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-50/generalSusInfo.profl
01:34:23.282 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-50/aggregatedSusInfo.profl
01:34:23.284 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
01:34:23.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===438
01:34:24.103 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return emptyStringNode;
if (emptyStringNode != null) {


}

01:34:24.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:25.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (emptyStringNode == null) {
    return null;
}

if (emptyStringNode == null) {
    throw new IllegalArgumentException("Empty variable: " + emptyStringNode);
}

01:34:25.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:26.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:26.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:26.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:34:26.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:27.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:27.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===437
01:34:27.970 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
reportCodeChange();
reportCodeChange(true);
reportCodeChange(false);
01:34:27.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:28.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:28.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:29.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(emptyStringNode);
reportCodeChange(originalSize);
reportCodeChange(elem);
reportCodeChange(prev);
reportCodeChange(foldedSize);
reportCodeChange(sb);
reportCodeChange(arrayFoldedChildren);
reportCodeChange(joinString);
reportCodeChange(functionName);
reportCodeChange(arrayNode);
reportCodeChange(right);
reportCodeChange(callTarget);
reportCodeChange(n);
reportCodeChange(ROOT_LOCALE);
01:34:29.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:30.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:30.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:31.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:31.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:32.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:32.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:33.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:33.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:34.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:34.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:35.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:35.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:35.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:35.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:36.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:36.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:37.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:37.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:38.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:38.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:39.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:39.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:40.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:40.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:41.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:41.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:42.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
01:34:42.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:43.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:43.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:44.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:44.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:44.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange();
	Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        
null
reportCodeChange();
	n.getParent().replaceChild(n, emptyStringNode);
        
null

        return emptyStringNode;
	reportCodeChange();

MOVE-BUGGY-STATEMENT
01:34:44.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:45.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:45.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:46.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:46.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:47.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:34:47.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:48.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:48.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===436
01:34:48.572 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
n.getParent().replaceChild(n, emptyStringNode);
n.getParent().replaceChild(true, n, emptyStringNode);
n.getParent().replaceChild(false, n, emptyStringNode);
n.getParent().replaceChild(n, true, emptyStringNode);
n.getParent().replaceChild(n, false, emptyStringNode);
n.getParent().replaceChild(n, emptyStringNode, true);
n.getParent().replaceChild(n, emptyStringNode, false);
01:34:48.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:49.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:49.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:50.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:50.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:51.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:51.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:52.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:52.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:52.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:52.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:53.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
n.getParent().replaceChild(originalSize, emptyStringNode);
n.getParent().replaceChild(elem, emptyStringNode);
n.getParent().replaceChild(prev, emptyStringNode);
n.getParent().replaceChild(foldedSize, emptyStringNode);
n.getParent().replaceChild(sb, emptyStringNode);
n.getParent().replaceChild(arrayFoldedChildren, emptyStringNode);
n.getParent().replaceChild(joinString, emptyStringNode);
n.getParent().replaceChild(functionName, emptyStringNode);
n.getParent().replaceChild(arrayNode, emptyStringNode);
n.getParent().replaceChild(right, emptyStringNode);
n.getParent().replaceChild(callTarget, emptyStringNode);
n.getParent().replaceChild(ROOT_LOCALE, emptyStringNode);
n.getParent().replaceChild( emptyStringNode);
n.getParent().replaceChild(originalSize, n, emptyStringNode);
n.getParent().replaceChild(elem, n, emptyStringNode);
n.getParent().replaceChild(prev, n, emptyStringNode);
n.getParent().replaceChild(foldedSize, n, emptyStringNode);
n.getParent().replaceChild(sb, n, emptyStringNode);
n.getParent().replaceChild(arrayFoldedChildren, n, emptyStringNode);
n.getParent().replaceChild(joinString, n, emptyStringNode);
n.getParent().replaceChild(functionName, n, emptyStringNode);
n.getParent().replaceChild(arrayNode, n, emptyStringNode);
n.getParent().replaceChild(right, n, emptyStringNode);
n.getParent().replaceChild(callTarget, n, emptyStringNode);
n.getParent().replaceChild(ROOT_LOCALE, n, emptyStringNode);
n.getParent().replaceChild(n, originalSize);
n.getParent().replaceChild(n, elem);
n.getParent().replaceChild(n, prev);
n.getParent().replaceChild(n, foldedSize);
n.getParent().replaceChild(n, sb);
n.getParent().replaceChild(n, arrayFoldedChildren);
n.getParent().replaceChild(n, joinString);
n.getParent().replaceChild(n, functionName);
n.getParent().replaceChild(n, arrayNode);
n.getParent().replaceChild(n, right);
n.getParent().replaceChild(n, callTarget);
n.getParent().replaceChild(n, ROOT_LOCALE);
n.getParent().replaceChild(n, );
n.getParent().replaceChild(n, originalSize, emptyStringNode);
n.getParent().replaceChild(n, elem, emptyStringNode);
n.getParent().replaceChild(n, prev, emptyStringNode);
n.getParent().replaceChild(n, foldedSize, emptyStringNode);
n.getParent().replaceChild(n, sb, emptyStringNode);
n.getParent().replaceChild(n, arrayFoldedChildren, emptyStringNode);
n.getParent().replaceChild(n, joinString, emptyStringNode);
n.getParent().replaceChild(n, functionName, emptyStringNode);
n.getParent().replaceChild(n, arrayNode, emptyStringNode);
n.getParent().replaceChild(n, right, emptyStringNode);
n.getParent().replaceChild(n, callTarget, emptyStringNode);
n.getParent().replaceChild(n, ROOT_LOCALE, emptyStringNode);
n.getParent().replaceChild(n, emptyStringNode, originalSize);
n.getParent().replaceChild(n, emptyStringNode, elem);
n.getParent().replaceChild(n, emptyStringNode, prev);
n.getParent().replaceChild(n, emptyStringNode, foldedSize);
n.getParent().replaceChild(n, emptyStringNode, sb);
n.getParent().replaceChild(n, emptyStringNode, arrayFoldedChildren);
n.getParent().replaceChild(n, emptyStringNode, joinString);
n.getParent().replaceChild(n, emptyStringNode, functionName);
n.getParent().replaceChild(n, emptyStringNode, arrayNode);
n.getParent().replaceChild(n, emptyStringNode, right);
n.getParent().replaceChild(n, emptyStringNode, callTarget);
n.getParent().replaceChild(n, emptyStringNode, ROOT_LOCALE);
01:34:53.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:54.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:54.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:55.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:55.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:56.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:56.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:57.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:57.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:58.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:58.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:34:59.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:34:59.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:00.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:00.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:00.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:00.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:01.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:01.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:02.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:02.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:03.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:03.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:04.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:04.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:05.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:05.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:06.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:06.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:07.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:07.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:08.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:08.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:08.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:08.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:09.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:09.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:10.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:10.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:11.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:11.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:12.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:12.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:13.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:13.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:14.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:14.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:15.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:15.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:15.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:15.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:16.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:16.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:17.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:17.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:18.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:18.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:19.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:19.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:20.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:20.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:21.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:21.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:22.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:22.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:22.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:22.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:23.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:23.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:24.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:24.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:25.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:25.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:26.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:26.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:26.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:26.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:27.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:27.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:28.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:28.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:29.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:29.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:30.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:30.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:31.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:31.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:32.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:32.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:32.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:32.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:33.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:33.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:34.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:34.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:35.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:35.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:36.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:36.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:37.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:37.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:38.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:38.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:39.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:39.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:39.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:39.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:40.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:40.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:41.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:41.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:42.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:42.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:43.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:43.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:44.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:44.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:45.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:45.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:46.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:46.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:46.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:46.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:47.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (n != null) {


}

if (emptyStringNode != null) {


}

01:35:47.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:48.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:48.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:48.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:48.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:49.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (emptyStringNode == null) {
    return null;
}

if (emptyStringNode == null) {
    throw new IllegalArgumentException("Empty variable: " + emptyStringNode);
}

01:35:49.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:50.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:50.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:51.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:51.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:51.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:51.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:52.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:52.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:53.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:53.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:54.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
n.getParent().replaceChild(n, emptyStringNode);
	Node emptyStringNode = Node.newString("");
        
null

        reportCodeChange();
	n.getParent().replaceChild(n, emptyStringNode);

MOVE-BUGGY-STATEMENT

        reportCodeChange();
        return emptyStringNode;
	n.getParent().replaceChild(n, emptyStringNode);

MOVE-BUGGY-STATEMENT
01:35:54.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:55.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:55.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:56.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:56.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:57.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:35:57.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:58.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:58.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===435
01:35:58.063 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node emptyStringNode = Node.newString("");
Node emptyStringNode = Node.setString("");
Node emptyStringNode = Node.setSourceFileForTesting("");
Node emptyStringNode = Node.addSuppression("");
01:35:58.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:59.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:59.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:35:59.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:35:59.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:00.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node emptyStringNode = Node.newString(emptyStringNode, "");
Node emptyStringNode = Node.newString(originalSize, "");
Node emptyStringNode = Node.newString(elem, "");
Node emptyStringNode = Node.newString(prev, "");
Node emptyStringNode = Node.newString(foldedSize, "");
Node emptyStringNode = Node.newString(sb, "");
Node emptyStringNode = Node.newString(arrayFoldedChildren, "");
Node emptyStringNode = Node.newString(joinString, "");
Node emptyStringNode = Node.newString(functionName, "");
Node emptyStringNode = Node.newString(arrayNode, "");
Node emptyStringNode = Node.newString(right, "");
Node emptyStringNode = Node.newString(callTarget, "");
Node emptyStringNode = Node.newString(n, "");
Node emptyStringNode = Node.newString(ROOT_LOCALE, "");
Node emptyStringNode = Node.newString("", emptyStringNode);
Node emptyStringNode = Node.newString("", originalSize);
Node emptyStringNode = Node.newString("", elem);
Node emptyStringNode = Node.newString("", prev);
Node emptyStringNode = Node.newString("", foldedSize);
Node emptyStringNode = Node.newString("", sb);
Node emptyStringNode = Node.newString("", arrayFoldedChildren);
Node emptyStringNode = Node.newString("", joinString);
Node emptyStringNode = Node.newString("", functionName);
Node emptyStringNode = Node.newString("", arrayNode);
Node emptyStringNode = Node.newString("", right);
Node emptyStringNode = Node.newString("", callTarget);
Node emptyStringNode = Node.newString("", n);
Node emptyStringNode = Node.newString("", ROOT_LOCALE);
01:36:00.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:01.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:01.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:02.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:02.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:03.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:03.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:04.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:04.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:05.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:05.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:06.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:06.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:06.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:06.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:07.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:07.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:08.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:08.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:09.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:09.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:10.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:10.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:11.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:11.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:12.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:12.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:13.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:13.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:14.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:14.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:14.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:14.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:15.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:15.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:16.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:16.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:17.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:17.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:18.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:18.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:19.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:19.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:20.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:20.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:21.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:21.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:22.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:22.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:23.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:23.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:24.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:24.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:24.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:24.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:25.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node emptyStringNode = emptyStringNode.newString("");
Node emptyStringNode = originalSize.newString("");
Node emptyStringNode = elem.newString("");
Node emptyStringNode = prev.newString("");
Node emptyStringNode = foldedSize.newString("");
Node emptyStringNode = sb.newString("");
Node emptyStringNode = arrayFoldedChildren.newString("");
Node emptyStringNode = joinString.newString("");
Node emptyStringNode = functionName.newString("");
Node emptyStringNode = arrayNode.newString("");
Node emptyStringNode = right.newString("");
Node emptyStringNode = callTarget.newString("");
Node emptyStringNode = n.newString("");
Node emptyStringNode = ROOT_LOCALE.newString("");
01:36:25.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:26.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:26.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:27.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:27.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:28.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:28.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:29.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:29.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:30.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:30.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:31.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:31.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:31.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:31.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:32.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:32.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:33.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:33.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:34.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:34.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:35.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:35.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:36.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:36.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:37.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:37.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:38.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:36:38.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:38.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:38.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1609
01:36:39.113 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return res;
if (res != null) {


}

01:36:39.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:40.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (res == null) {
    return null;
}

if (res == null) {
    throw new IllegalArgumentException("Empty variable: " + res);
}

01:36:40.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:41.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:41.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:42.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
detachChildren();
	return res;
return res;
	detachChildren();
setQuotedString();
	return res;
return res;
	setQuotedString();
01:36:42.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:42.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:42.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:43.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:43.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:44.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:44.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:45.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:36:45.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:46.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:46.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1567
01:36:46.899 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
if (node2 != null) {


}

01:36:46.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:47.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

01:36:47.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:48.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:48.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:49.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:36:49.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:50.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:50.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===475
01:36:50.780 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return n;
if (n != null) {


}

01:36:50.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:51.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

01:36:51.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:52.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:52.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:53.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:36:53.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:54.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:54.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===471
01:36:54.303 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
reportCodeChange();
reportCodeChange(true);
reportCodeChange(false);
01:36:54.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:55.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:55.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:56.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(node);
reportCodeChange(kJoinOverhead);
reportCodeChange(foldedStringNode);
reportCodeChange(emptyStringNode);
reportCodeChange(originalSize);
reportCodeChange(elem);
reportCodeChange(prev);
reportCodeChange(foldedSize);
reportCodeChange(sb);
reportCodeChange(arrayFoldedChildren);
reportCodeChange(joinString);
reportCodeChange(functionName);
reportCodeChange(arrayNode);
reportCodeChange(right);
reportCodeChange(callTarget);
reportCodeChange(n);
reportCodeChange(ROOT_LOCALE);
01:36:56.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:56.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:56.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:57.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:57.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:58.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:58.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:36:59.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:36:59.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:00.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:00.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:01.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:01.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:02.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:02.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:03.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:03.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:03.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:03.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:04.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:04.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:05.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:05.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:06.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:06.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:07.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:07.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:08.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:08.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:09.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:09.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:10.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:10.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:10.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
01:37:10.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:11.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:11.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:12.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:12.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:13.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:37:13.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:14.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:14.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===470
01:37:14.474 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
if (arrayFoldedChildren != null) {


}

01:37:14.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:15.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

01:37:15.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:16.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:16.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:17.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:37:17.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:17.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:17.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===469
01:37:17.965 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
arrayNode.addChildToBack(node);
arrayNode.addChildToBack(true, node);
arrayNode.addChildToBack(false, node);
arrayNode.addChildToBack(node, true);
arrayNode.addChildToBack(node, false);
01:37:17.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:18.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:18.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:19.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:19.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:20.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:20.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:21.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.addChildToBack(kJoinOverhead);
arrayNode.addChildToBack(foldedStringNode);
arrayNode.addChildToBack(emptyStringNode);
arrayNode.addChildToBack(originalSize);
arrayNode.addChildToBack(elem);
arrayNode.addChildToBack(prev);
arrayNode.addChildToBack(foldedSize);
arrayNode.addChildToBack(sb);
arrayNode.addChildToBack(arrayFoldedChildren);
arrayNode.addChildToBack(joinString);
arrayNode.addChildToBack(functionName);
arrayNode.addChildToBack(right);
arrayNode.addChildToBack(callTarget);
arrayNode.addChildToBack(n);
arrayNode.addChildToBack(ROOT_LOCALE);
arrayNode.addChildToBack();
arrayNode.addChildToBack(kJoinOverhead, node);
arrayNode.addChildToBack(foldedStringNode, node);
arrayNode.addChildToBack(emptyStringNode, node);
arrayNode.addChildToBack(originalSize, node);
arrayNode.addChildToBack(elem, node);
arrayNode.addChildToBack(prev, node);
arrayNode.addChildToBack(foldedSize, node);
arrayNode.addChildToBack(sb, node);
arrayNode.addChildToBack(arrayFoldedChildren, node);
arrayNode.addChildToBack(joinString, node);
arrayNode.addChildToBack(functionName, node);
arrayNode.addChildToBack(right, node);
arrayNode.addChildToBack(callTarget, node);
arrayNode.addChildToBack(n, node);
arrayNode.addChildToBack(ROOT_LOCALE, node);
arrayNode.addChildToBack(node, kJoinOverhead);
arrayNode.addChildToBack(node, foldedStringNode);
arrayNode.addChildToBack(node, emptyStringNode);
arrayNode.addChildToBack(node, originalSize);
arrayNode.addChildToBack(node, elem);
arrayNode.addChildToBack(node, prev);
arrayNode.addChildToBack(node, foldedSize);
arrayNode.addChildToBack(node, sb);
arrayNode.addChildToBack(node, arrayFoldedChildren);
arrayNode.addChildToBack(node, joinString);
arrayNode.addChildToBack(node, functionName);
arrayNode.addChildToBack(node, right);
arrayNode.addChildToBack(node, callTarget);
arrayNode.addChildToBack(node, n);
arrayNode.addChildToBack(node, ROOT_LOCALE);
01:37:21.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:22.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:22.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:23.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:23.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:24.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:24.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:25.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:25.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:25.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:25.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:26.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:26.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:27.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:27.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:28.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:28.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:29.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:29.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:30.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:30.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:31.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:31.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:32.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:32.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:33.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:33.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:33.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:33.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:34.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:34.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:35.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:35.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:36.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:36.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:37.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:37.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:38.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:38.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:39.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:39.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:40.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:40.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:40.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:40.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:41.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:41.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:42.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:42.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:43.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:43.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:44.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:44.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:45.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:45.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:46.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:46.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:47.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:47.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:48.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:48.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:48.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:48.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:49.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:49.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:50.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:50.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:51.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:51.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:52.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:52.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:53.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:53.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:54.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:54.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:55.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:55.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:55.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:55.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:56.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:56.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:57.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:57.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:58.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:58.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:37:59.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:37:59.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:00.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:00.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:01.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:01.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:02.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.getChildBefore(node);
arrayNode.clonePropsFrom(node);
arrayNode.removeChildAfter(node);
arrayNode.copyInformationFrom(node);
arrayNode.copyInformationFromForTree(node);
arrayNode.useSourceInfoFrom(node);
arrayNode.useSourceInfoFromForTree(node);
arrayNode.useSourceInfoIfMissingFrom(node);
arrayNode.useSourceInfoIfMissingFromForTree(node);
arrayNode.checkTreeEquals(node);
arrayNode.getIndexOfChild(node);
arrayNode.getNodeClass(node);
arrayNode.addChildToFront(node);
arrayNode.addChildrenToFront(node);
arrayNode.addChildrenToBack(node);
arrayNode.removeChild(node);
arrayNode.hasChild(node);
arrayNode.isEquivalentTo(node);
arrayNode.isEquivalentToTyped(node);
arrayNode.checkTreeEqualsImpl(node);
arrayNode.checkTreeTypeAwareEqualsImpl(node);
01:38:02.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:02.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:02.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:03.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:03.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:04.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:04.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:05.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:05.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:06.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:06.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:07.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:07.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:08.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:08.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:09.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:09.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:09.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:09.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:10.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:10.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:11.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:11.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:12.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:12.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:13.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:13.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:14.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:14.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:15.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:15.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:16.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:16.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:17.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:17.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:18.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:18.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:18.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:18.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:19.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:19.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:20.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode != null) {


}

if (node != null) {


}

01:38:20.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:21.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:21.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:22.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode == null) {
    return null;
}

if (arrayNode == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayNode);
}

if (node == null) {
    return null;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

01:38:22.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:23.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:23.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:24.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:24.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:25.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:25.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:25.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:38:25.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:26.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:26.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===468
01:38:26.773 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
if (arrayFoldedChildren != null) {


}

01:38:26.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:27.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

01:38:27.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:28.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:28.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:29.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:38:29.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:30.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:30.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===467
01:38:30.346 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
arrayNode.detachChildren();
arrayNode.detachChildren(true);
arrayNode.detachChildren(false);
01:38:30.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:31.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:31.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:32.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.detachChildren(kJoinOverhead);
arrayNode.detachChildren(foldedStringNode);
arrayNode.detachChildren(emptyStringNode);
arrayNode.detachChildren(originalSize);
arrayNode.detachChildren(elem);
arrayNode.detachChildren(prev);
arrayNode.detachChildren(foldedSize);
arrayNode.detachChildren(sb);
arrayNode.detachChildren(arrayFoldedChildren);
arrayNode.detachChildren(joinString);
arrayNode.detachChildren(functionName);
arrayNode.detachChildren(right);
arrayNode.detachChildren(callTarget);
arrayNode.detachChildren(n);
arrayNode.detachChildren(ROOT_LOCALE);
01:38:32.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:33.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:33.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:33.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:33.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:34.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:34.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:35.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:35.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:36.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:36.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:37.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:37.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:38.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:38.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:39.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:39.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:40.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:40.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:40.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:40.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:41.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:41.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:42.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:42.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:43.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:43.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:44.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:44.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:45.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.getInputId();
arrayNode.children();
arrayNode.siblings();
arrayNode.getJSDocInfo();
arrayNode.getAncestors();
arrayNode.getFirstChild();
arrayNode.getLastChild();
arrayNode.getNext();
arrayNode.getLastSibling();
arrayNode.getParent();
arrayNode.detachFromParent();
arrayNode.removeFirstChild();
arrayNode.removeChildren();
arrayNode.cloneNode();
arrayNode.cloneTree();
arrayNode.getJSType();
arrayNode.getString();
arrayNode.toString();
arrayNode.toStringTree();
arrayNode.toStringTreeImpl();
arrayNode.getSourceFileName();
arrayNode.getQualifiedName();
arrayNode.getType();
arrayNode.getLength();
arrayNode.getLineno();
arrayNode.getCharno();
arrayNode.getSourceOffset();
arrayNode.getSourcePosition();
arrayNode.getChildCount();
arrayNode.getSideEffectFlags();
arrayNode.getPropListHeadForTesting();
arrayNode.getSortedPropTypes();
arrayNode.setQuotedString();
arrayNode.hasChildren();
arrayNode.isFromExterns();
arrayNode.hasOneChild();
arrayNode.hasMoreThanOneChild();
arrayNode.hasSideEffects();
arrayNode.isQualifiedName();
arrayNode.isUnscopedQualifiedName();
arrayNode.isVarArgs();
arrayNode.isOptionalArg();
arrayNode.isSyntheticBlock();
arrayNode.wasEmptyNode();
arrayNode.isOnlyModifiesThisCall();
arrayNode.isNoSideEffectsCall();
arrayNode.isLocalResultCall();
arrayNode.isQuotedString();
arrayNode.getDirectives();
arrayNode.getStaticSourceFile();
arrayNode.getDouble();
arrayNode.getJsDocBuilderForNode();
01:38:45.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:46.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:46.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:47.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:47.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:47.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:47.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:48.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:48.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:49.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:49.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:50.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:50.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:51.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:51.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:52.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:52.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:53.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:53.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:54.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:54.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:54.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:54.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:55.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:55.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:56.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:56.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:57.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:57.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:58.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:58.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:38:59.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:38:59.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:00.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:00.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:01.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:01.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:01.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:01.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:02.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:02.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:03.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:03.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:04.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:04.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:05.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:05.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:06.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:06.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:07.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:07.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:08.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:08.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:09.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:09.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:09.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:09.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:10.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:10.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:11.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:11.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:12.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:12.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:13.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:13.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:14.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:14.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:15.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:15.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:16.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:16.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:17.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:17.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:17.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:17.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:18.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:18.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:19.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:19.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:20.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:20.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:21.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:21.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:22.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:22.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:23.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:23.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:24.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:24.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:24.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:24.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:25.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:25.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:26.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:26.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:27.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:27.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:28.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:28.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:29.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:29.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:30.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:30.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:31.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode != null) {


}

01:39:31.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:32.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode == null) {
    return null;
}

if (arrayNode == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayNode);
}

01:39:32.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:32.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:32.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:33.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:39:33.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:34.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:34.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===413
01:39:34.710 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
sb = null;
sb = null;
	Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          
null
sb = null;
	foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          
null
sb = null;
	arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          
null
01:39:34.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:35.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:35.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:36.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:36.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:37.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:39:37.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:38.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:38.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===411
01:39:38.302 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              true, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              false, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), true);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), false);
01:39:38.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:39.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:39.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:40.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:40.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:40.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:40.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:41.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(
              elem, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              prev, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              foldedSize, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              sb, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              joinString, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              functionName, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              arrayNode, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              right, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              callTarget, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              n, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              ROOT_LOCALE, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), elem);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), prev);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), foldedSize);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), sb);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), joinString);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), functionName);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), arrayNode);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), right);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), callTarget);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), n);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), ROOT_LOCALE);
01:39:41.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:42.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:42.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:43.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:43.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:44.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:44.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:45.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:45.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:46.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:46.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:47.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:47.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:47.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:47.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:48.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:48.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:49.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:49.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:50.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:50.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:51.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:51.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:52.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:52.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:53.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:53.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:54.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:54.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:54.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:54.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:55.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:55.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:56.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:56.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:57.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:57.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:58.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:58.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:39:59.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:39:59.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:00.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:00.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:01.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren != null) {


}

if (sb != null) {


}

if (prev != null) {


}

01:40:01.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:02.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:02.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:02.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:02.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:03.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

if (prev == null) {
    return null;
}

if (prev == null) {
    throw new IllegalArgumentException("Empty variable: " + prev);
}

01:40:03.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:04.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:04.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:05.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:05.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:06.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:06.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:07.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:07.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:08.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:08.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:08.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
	Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          
null
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
	foldedSize += sb.length() + 2;
          
null

          sb = null;
	arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));

MOVE-BUGGY-STATEMENT
01:40:08.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:09.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:09.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:10.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:10.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:11.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:40:11.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:12.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:12.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===410
01:40:12.480 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
foldedSize += sb.length() + 2;
if (sb != null) {


}

01:40:12.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:13.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

01:40:13.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:14.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:14.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:15.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
foldedSize += sb.length() + 2;
	Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          
null

          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
	foldedSize += sb.length() + 2;

MOVE-BUGGY-STATEMENT

          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
	foldedSize += sb.length() + 2;

MOVE-BUGGY-STATEMENT
01:40:15.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:16.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:16.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:16.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:16.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:17.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:40:17.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:18.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:18.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===408
01:40:18.734 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkNotNull(prev);
Preconditions.checkNotNull(true, prev);
Preconditions.checkNotNull(false, prev);
Preconditions.checkNotNull(prev, true);
Preconditions.checkNotNull(prev, false);
01:40:18.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:19.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:19.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:20.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:20.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:21.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:21.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:22.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkNotNull(elem);
Preconditions.checkNotNull(foldedSize);
Preconditions.checkNotNull(sb);
Preconditions.checkNotNull(arrayFoldedChildren);
Preconditions.checkNotNull(joinString);
Preconditions.checkNotNull(functionName);
Preconditions.checkNotNull(arrayNode);
Preconditions.checkNotNull(right);
Preconditions.checkNotNull(callTarget);
Preconditions.checkNotNull(n);
Preconditions.checkNotNull(ROOT_LOCALE);
Preconditions.checkNotNull();
Preconditions.checkNotNull(elem, prev);
Preconditions.checkNotNull(foldedSize, prev);
Preconditions.checkNotNull(sb, prev);
Preconditions.checkNotNull(arrayFoldedChildren, prev);
Preconditions.checkNotNull(joinString, prev);
Preconditions.checkNotNull(functionName, prev);
Preconditions.checkNotNull(arrayNode, prev);
Preconditions.checkNotNull(right, prev);
Preconditions.checkNotNull(callTarget, prev);
Preconditions.checkNotNull(n, prev);
Preconditions.checkNotNull(ROOT_LOCALE, prev);
Preconditions.checkNotNull(prev, elem);
Preconditions.checkNotNull(prev, foldedSize);
Preconditions.checkNotNull(prev, sb);
Preconditions.checkNotNull(prev, arrayFoldedChildren);
Preconditions.checkNotNull(prev, joinString);
Preconditions.checkNotNull(prev, functionName);
Preconditions.checkNotNull(prev, arrayNode);
Preconditions.checkNotNull(prev, right);
Preconditions.checkNotNull(prev, callTarget);
Preconditions.checkNotNull(prev, n);
Preconditions.checkNotNull(prev, ROOT_LOCALE);
01:40:22.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:23.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:23.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:24.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:24.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:25.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:25.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:25.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:25.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:26.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:26.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:27.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:27.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:28.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:28.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:29.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:29.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:30.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:30.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:31.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:31.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:31.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:31.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:32.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:32.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:33.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:33.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:34.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:34.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:35.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:35.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:36.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:36.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:37.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:37.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:38.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:38.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:39.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:39.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:39.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:39.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:40.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:40.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:41.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:41.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:42.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:42.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:43.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:43.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:44.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:44.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:45.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:45.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:46.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:46.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:46.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:46.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:47.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:47.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:48.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:48.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:49.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:49.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:50.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:50.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:51.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:51.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:52.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (prev != null) {


}

01:40:52.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:53.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (prev == null) {
    return null;
}

if (prev == null) {
    throw new IllegalArgumentException("Empty variable: " + prev);
}

01:40:53.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:54.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:54.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:54.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
	Preconditions.checkNotNull(prev);

MOVE-BUGGY-STATEMENT

          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
	Preconditions.checkNotNull(prev);

MOVE-BUGGY-STATEMENT

          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
	Preconditions.checkNotNull(prev);

MOVE-BUGGY-STATEMENT
01:40:54.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:55.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:55.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:56.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:56.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:57.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:40:57.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:58.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:40:58.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===433
01:40:58.445 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
if (arrayFoldedChildren != null) {


}

01:40:58.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:40:59.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

01:40:59.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:00.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:00.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:01.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	Node callTarget = n.getFirstChild();

    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    
null
switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	int originalSize = InlineCostEstimator.getCost(n);
    
null


    return n;
	switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

MOVE-BUGGY-STATEMENT
01:41:01.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:02.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:02.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:03.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:03.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:03.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:03.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:04.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:04.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:05.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:05.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:06.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:06.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:07.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:07.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:08.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:08.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:09.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:09.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:10.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:10.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:11.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:11.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:11.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:11.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:12.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:12.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:13.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:13.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:14.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:14.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:15.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:15.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:16.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:16.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:17.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:41:17.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:18.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:18.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===432
01:41:18.085 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
int originalSize = InlineCostEstimator.getCost(n);

double originalSize = InlineCostEstimator.getCost(n);
double originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        double kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

float originalSize = InlineCostEstimator.getCost(n);
float originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        float kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

long originalSize = InlineCostEstimator.getCost(n);
long originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        long kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

short originalSize = InlineCostEstimator.getCost(n);
short originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        short kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

byte originalSize = InlineCostEstimator.getCost(n);
byte originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        byte kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

01:41:18.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:18.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:18.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:19.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:19.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:20.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:20.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:21.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:21.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:22.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:22.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:23.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:23.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:24.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:24.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:25.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:25.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:26.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:26.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:26.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
int originalSize = InlineCostEstimator.getCost(originalSize);
int originalSize = InlineCostEstimator.getCost(elem);
int originalSize = InlineCostEstimator.getCost(prev);
int originalSize = InlineCostEstimator.getCost(foldedSize);
int originalSize = InlineCostEstimator.getCost(sb);
int originalSize = InlineCostEstimator.getCost(arrayFoldedChildren);
int originalSize = InlineCostEstimator.getCost(joinString);
int originalSize = InlineCostEstimator.getCost(functionName);
int originalSize = InlineCostEstimator.getCost(arrayNode);
int originalSize = InlineCostEstimator.getCost(right);
int originalSize = InlineCostEstimator.getCost(callTarget);
int originalSize = InlineCostEstimator.getCost(ROOT_LOCALE);
int originalSize = InlineCostEstimator.getCost();
int originalSize = InlineCostEstimator.getCost(originalSize, n);
int originalSize = InlineCostEstimator.getCost(elem, n);
int originalSize = InlineCostEstimator.getCost(prev, n);
int originalSize = InlineCostEstimator.getCost(foldedSize, n);
int originalSize = InlineCostEstimator.getCost(sb, n);
int originalSize = InlineCostEstimator.getCost(arrayFoldedChildren, n);
int originalSize = InlineCostEstimator.getCost(joinString, n);
int originalSize = InlineCostEstimator.getCost(functionName, n);
int originalSize = InlineCostEstimator.getCost(arrayNode, n);
int originalSize = InlineCostEstimator.getCost(right, n);
int originalSize = InlineCostEstimator.getCost(callTarget, n);
int originalSize = InlineCostEstimator.getCost(ROOT_LOCALE, n);
int originalSize = InlineCostEstimator.getCost(n, originalSize);
int originalSize = InlineCostEstimator.getCost(n, elem);
int originalSize = InlineCostEstimator.getCost(n, prev);
int originalSize = InlineCostEstimator.getCost(n, foldedSize);
int originalSize = InlineCostEstimator.getCost(n, sb);
int originalSize = InlineCostEstimator.getCost(n, arrayFoldedChildren);
int originalSize = InlineCostEstimator.getCost(n, joinString);
int originalSize = InlineCostEstimator.getCost(n, functionName);
int originalSize = InlineCostEstimator.getCost(n, arrayNode);
int originalSize = InlineCostEstimator.getCost(n, right);
int originalSize = InlineCostEstimator.getCost(n, callTarget);
int originalSize = InlineCostEstimator.getCost(n, ROOT_LOCALE);
01:41:26.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:27.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:27.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:28.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:28.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:29.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:29.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:30.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:30.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:31.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:31.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:32.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:32.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:32.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:32.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:33.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:33.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:34.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:34.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:35.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:35.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:36.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:36.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:37.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:37.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:38.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:38.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:39.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:39.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:40.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:40.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:40.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:40.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:41.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:41.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:42.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:42.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:43.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:43.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:44.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:44.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:45.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:45.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:46.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:46.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:47.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:47.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:47.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:47.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:48.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:48.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:49.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:49.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:50.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:50.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:51.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:51.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:52.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:52.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:53.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:53.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:54.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:54.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:54.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:54.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:55.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:55.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:56.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:56.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:57.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:57.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:58.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:41:58.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:41:59.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
int originalSize = originalSize.getCost(n);
int originalSize = elem.getCost(n);
int originalSize = prev.getCost(n);
int originalSize = foldedSize.getCost(n);
int originalSize = sb.getCost(n);
int originalSize = arrayFoldedChildren.getCost(n);
int originalSize = joinString.getCost(n);
int originalSize = functionName.getCost(n);
int originalSize = arrayNode.getCost(n);
int originalSize = right.getCost(n);
int originalSize = callTarget.getCost(n);
int originalSize = n.getCost(n);
int originalSize = ROOT_LOCALE.getCost(n);
01:41:59.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:00.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:00.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:01.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:01.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:02.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:02.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:03.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:03.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:03.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:03.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:04.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:04.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:05.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:05.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:06.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:06.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:07.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:07.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:08.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:08.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:09.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:09.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:10.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:10.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:10.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

01:42:10.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:11.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

01:42:11.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:12.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:12.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:13.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:42:13.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:14.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:14.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===430
01:42:14.518 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
foldedSize += arrayFoldedChildren.size() - 1;
if (arrayFoldedChildren != null) {


}

01:42:14.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:15.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

01:42:15.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:16.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:16.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:17.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
foldedSize += arrayFoldedChildren.size() - 1;
	Node callTarget = n.getFirstChild();

    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null
foldedSize += arrayFoldedChildren.size() - 1;
	if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    
null


    int originalSize = InlineCostEstimator.getCost(n);
	foldedSize += arrayFoldedChildren.size() - 1;

MOVE-BUGGY-STATEMENT


    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	foldedSize += arrayFoldedChildren.size() - 1;

MOVE-BUGGY-STATEMENT


    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

    return n;
	foldedSize += arrayFoldedChildren.size() - 1;

MOVE-BUGGY-STATEMENT
01:42:17.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:18.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:18.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:19.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:19.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:19.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:19.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:20.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:20.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:21.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:21.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:22.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:22.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:23.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:23.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:24.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:24.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:25.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:25.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:26.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:26.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:27.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:27.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:28.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:28.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:29.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:29.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:29.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:29.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:30.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:30.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:31.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:31.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:32.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:32.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:33.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:42:33.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:34.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:34.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===422
01:42:34.216 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
if (sb == null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
01:42:34.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:35.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {


}

01:42:35.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:36.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

01:42:36.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:36.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:36.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:37.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	Node callTarget = n.getFirstChild();

    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null
if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    
null

    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;
	if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }

MOVE-BUGGY-STATEMENT

    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
	if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }

MOVE-BUGGY-STATEMENT

    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }

MOVE-BUGGY-STATEMENT

    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

    return n;
	if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }

MOVE-BUGGY-STATEMENT
01:42:37.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:38.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:38.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:39.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:39.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:40.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:40.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:41.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:41.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:42.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:42.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:43.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:43.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:44.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:44.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:45.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:45.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:46.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:46.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:46.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:46.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:47.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:47.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:48.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:48.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:49.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:49.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:50.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:50.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:51.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:51.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:52.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:52.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:53.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:53.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:54.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:42:54.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:54.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:54.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===398
01:42:54.996 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
if (elem != null) {


}

01:42:54.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:55.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

01:42:55.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:56.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:56.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:57.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	Node callTarget = n.getFirstChild();

    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	Node functionName = arrayNode.getNext();

    if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null
while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    
null


    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

MOVE-BUGGY-STATEMENT


    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

MOVE-BUGGY-STATEMENT


    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

MOVE-BUGGY-STATEMENT


    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

MOVE-BUGGY-STATEMENT


    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

    return n;
	while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

MOVE-BUGGY-STATEMENT
01:42:57.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:58.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:58.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:42:59.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:42:59.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:00.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:00.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:01.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:01.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:02.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:02.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:03.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:03.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:04.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:04.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:05.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:05.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:05.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:05.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:06.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:06.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:07.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:07.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:08.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:08.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:09.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:09.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:10.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:10.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:11.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:11.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:12.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:12.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:13.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:13.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:14.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:43:14.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:14.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:14.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===396
01:43:14.972 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node elem = arrayNode.getFirstChild();
Node elem = arrayNode.getLastChild();
Node elem = arrayNode.getNext();
Node elem = arrayNode.getLastSibling();
Node elem = arrayNode.getParent();
Node elem = arrayNode.detachFromParent();
Node elem = arrayNode.removeFirstChild();
Node elem = arrayNode.removeChildren();
Node elem = arrayNode.cloneNode();
Node elem = arrayNode.cloneTree();
01:43:15.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:15.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:15.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:16.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:16.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:17.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:17.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:18.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:18.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:19.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:19.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:20.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:20.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:21.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:21.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:22.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:22.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:22.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node elem = arrayNode.getFirstChild(elem);
Node elem = arrayNode.getFirstChild(prev);
Node elem = arrayNode.getFirstChild(foldedSize);
Node elem = arrayNode.getFirstChild(sb);
Node elem = arrayNode.getFirstChild(arrayFoldedChildren);
Node elem = arrayNode.getFirstChild(joinString);
Node elem = arrayNode.getFirstChild(functionName);
Node elem = arrayNode.getFirstChild(right);
Node elem = arrayNode.getFirstChild(callTarget);
Node elem = arrayNode.getFirstChild(n);
Node elem = arrayNode.getFirstChild(ROOT_LOCALE);
01:43:22.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:23.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:23.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:24.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:24.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:25.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:25.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:26.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:26.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:27.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:27.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:28.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:28.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:28.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:28.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:29.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:29.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:30.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:30.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:31.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:31.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:32.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node elem = elem.getFirstChild();
Node elem = prev.getFirstChild();
Node elem = foldedSize.getFirstChild();
Node elem = sb.getFirstChild();
Node elem = arrayFoldedChildren.getFirstChild();
Node elem = joinString.getFirstChild();
Node elem = functionName.getFirstChild();
Node elem = right.getFirstChild();
Node elem = callTarget.getFirstChild();
Node elem = n.getFirstChild();
Node elem = ROOT_LOCALE.getFirstChild();
01:43:32.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:33.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:33.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:34.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:34.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:35.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:35.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:36.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:36.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:37.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:37.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:37.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:37.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:38.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:38.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:39.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:39.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:40.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:40.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:41.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:41.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:42.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode != null) {


}

01:43:42.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:43.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode == null) {
    return null;
}

if (arrayNode == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayNode);
}

01:43:43.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:44.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:44.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:44.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:43:44.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:45.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:45.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===395
01:43:45.796 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node prev = null;

01:43:45.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:46.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:46.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===394
01:43:46.701 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
int foldedSize = 0;

double foldedSize = 0;
double foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        double kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

float foldedSize = 0;
float foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        float kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

long foldedSize = 0;
long foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        long kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

short foldedSize = 0;
short foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        short kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

byte foldedSize = 0;
byte foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        byte kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

01:43:46.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:47.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:47.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:48.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:48.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:49.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:49.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:50.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:50.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:51.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:51.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:52.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:52.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:52.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:52.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:53.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:53.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:54.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:54.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:55.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:43:55.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:56.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:56.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===393
01:43:56.480 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
StringBuilder sb = null;

01:43:56.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:57.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:57.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===392
01:43:57.386 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
List<Node> arrayFoldedChildren = Lists.newLinkedList();
List<Node> arrayFoldedChildren = Lists.newLinkedList(arrayFoldedChildren);
List<Node> arrayFoldedChildren = Lists.newLinkedList(joinString);
List<Node> arrayFoldedChildren = Lists.newLinkedList(functionName);
List<Node> arrayFoldedChildren = Lists.newLinkedList(arrayNode);
List<Node> arrayFoldedChildren = Lists.newLinkedList(right);
List<Node> arrayFoldedChildren = Lists.newLinkedList(callTarget);
List<Node> arrayFoldedChildren = Lists.newLinkedList(n);
List<Node> arrayFoldedChildren = Lists.newLinkedList(ROOT_LOCALE);
01:43:57.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:58.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:58.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:43:59.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:43:59.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:00.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:00.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:01.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:01.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:01.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:01.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:02.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:02.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:03.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:03.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:04.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
List<Node> arrayFoldedChildren = arrayFoldedChildren.newLinkedList();
List<Node> arrayFoldedChildren = joinString.newLinkedList();
List<Node> arrayFoldedChildren = functionName.newLinkedList();
List<Node> arrayFoldedChildren = arrayNode.newLinkedList();
List<Node> arrayFoldedChildren = right.newLinkedList();
List<Node> arrayFoldedChildren = callTarget.newLinkedList();
List<Node> arrayFoldedChildren = n.newLinkedList();
List<Node> arrayFoldedChildren = ROOT_LOCALE.newLinkedList();
01:44:04.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:05.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:05.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:06.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:06.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:07.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:07.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:08.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:08.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:08.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:08.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:09.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:09.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:10.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:10.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:11.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:44:11.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:12.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:12.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===391
01:44:12.591 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
if (right != null) {


}

if (right != null) {


}

01:44:12.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:13.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:13.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:14.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (right == null) {
    return null;
}

if (right == null) {
    throw new IllegalArgumentException("Empty variable: " + right);
}

if (right == null) {
    return null;
}

if (right == null) {
    throw new IllegalArgumentException("Empty variable: " + right);
}

01:44:14.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:15.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:15.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:16.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:16.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:17.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:17.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:17.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:44:17.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:18.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:18.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===365
01:44:18.908 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case ASSIGN:
if (ASSIGN == 0) {
    new IllegalArgumentException("");
}

if (ASSIGN != 0) {

    
}

if (ASSIGN > 0) {

    
}

01:44:18.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:19.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:19.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:19.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:19.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:20.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:44:20.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:20.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:20.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===342
01:44:20.781 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case ARRAYLIT:
if (ARRAYLIT == 0) {
    new IllegalArgumentException("");
}

if (ARRAYLIT != 0) {

    
}

if (ARRAYLIT > 0) {

    
}

01:44:20.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:21.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:21.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:21.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:21.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:22.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:44:22.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:22.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:22.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1596
01:44:22.771 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return new NodeMismatch(this, node2);
if (node2 != null) {


}

01:44:22.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:23.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

01:44:23.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:24.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:24.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:25.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
addChildToFront(node2);
addChildToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToFront(node2);
addChildToBack(node2);
addChildToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToBack(node2);
addChildrenToFront(node2);
addChildrenToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToFront(node2);
addChildrenToBack(node2);
addChildrenToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToBack(node2);
removeChild(node2);
removeChild(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	removeChild(node2);
detachChildren();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	detachChildren();
setQuotedString();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	setQuotedString();
01:44:25.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:26.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:26.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:27.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:27.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:28.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:28.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:29.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:29.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:30.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:30.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:31.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:31.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:32.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:32.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:33.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:33.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:34.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:34.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:35.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:35.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:36.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:36.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:37.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:37.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:38.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:38.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:39.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:39.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:40.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:40.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:41.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:41.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:42.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:42.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:43.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:43.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:44.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:44:44.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:45.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:45.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===464
01:44:45.227 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (foldedSize > originalSize) {
          return n;
        }
if (foldedSize >= originalSize) {
          return n;
        }
if (foldedSize <= originalSize) {
          return n;
        }
if (foldedSize < originalSize) {
          return n;
        }
01:44:45.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:46.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:46.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:46.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:46.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:47.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (kJoinOverhead > originalSize) {
          return n;
        }
if (originalSize > originalSize) {
          return n;
        }
if (foldedSize > kJoinOverhead) {
          return n;
        }
01:44:47.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:48.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:48.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:49.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:49.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:50.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedSize == 0) {
    new IllegalArgumentException("");
}

if (foldedSize != 0) {

    
}

if (foldedSize > 0) {

    
}

if (originalSize == 0) {
    new IllegalArgumentException("");
}

if (originalSize != 0) {

    
}

if (originalSize > 0) {

    
}

01:44:50.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:51.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:51.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:52.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:52.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:53.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:53.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:54.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:54.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:54.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:54.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:55.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:44:55.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:56.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:56.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===463
01:44:56.711 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
if (right != null) {


}

if (right != null) {


}

01:44:56.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:57.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:57.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:58.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (right == null) {
    return null;
}

if (right == null) {
    throw new IllegalArgumentException("Empty variable: " + right);
}

if (right == null) {
    return null;
}

if (right == null) {
    throw new IllegalArgumentException("Empty variable: " + right);
}

01:44:58.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:44:59.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:44:59.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:00.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:00.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:01.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:01.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:02.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:45:02.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:02.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:02.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===462
01:45:02.948 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
foldedSize += kJoinOverhead;
if (kJoinOverhead == 0) {
    new IllegalArgumentException("");
}

if (kJoinOverhead != 0) {

    
}

if (kJoinOverhead > 0) {

    
}

01:45:02.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:03.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:03.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:04.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:04.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:05.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:45:05.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:06.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:06.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===461
01:45:06.355 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
int kJoinOverhead = "[].join()".length();

double kJoinOverhead = "[].join()".length();
float kJoinOverhead = "[].join()".length();
long kJoinOverhead = "[].join()".length();
short kJoinOverhead = "[].join()".length();
byte kJoinOverhead = "[].join()".length();
01:45:06.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:07.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:07.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:08.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:08.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:09.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:09.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:09.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:09.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:10.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
int kJoinOverhead = "[].join()".length(kJoinOverhead);
int kJoinOverhead = "[].join()".length(foldedStringNode);
int kJoinOverhead = "[].join()".length(emptyStringNode);
int kJoinOverhead = "[].join()".length(originalSize);
int kJoinOverhead = "[].join()".length(elem);
int kJoinOverhead = "[].join()".length(prev);
int kJoinOverhead = "[].join()".length(foldedSize);
int kJoinOverhead = "[].join()".length(sb);
int kJoinOverhead = "[].join()".length(arrayFoldedChildren);
int kJoinOverhead = "[].join()".length(joinString);
int kJoinOverhead = "[].join()".length(functionName);
int kJoinOverhead = "[].join()".length(arrayNode);
int kJoinOverhead = "[].join()".length(right);
int kJoinOverhead = "[].join()".length(callTarget);
int kJoinOverhead = "[].join()".length(n);
int kJoinOverhead = "[].join()".length(ROOT_LOCALE);
01:45:10.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:11.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:11.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:12.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:12.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:13.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:13.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:14.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:14.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:15.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:15.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:16.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:16.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:17.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:17.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:17.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:17.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:18.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:18.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:19.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:19.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:20.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:20.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:21.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:21.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:22.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:22.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:23.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:23.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:24.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:24.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:25.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:45:25.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:25.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:25.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===459
01:45:25.995 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return n;
if (n != null) {


}

01:45:25.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:26.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

01:45:26.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:27.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:27.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:28.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:45:28.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:29.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:29.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===458
01:45:29.468 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size() != arrayNode.getChildCount()) {
          return n;
        }
01:45:29.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:30.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren != null) {


}

if (arrayNode != null) {


}

01:45:30.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:31.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:31.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:32.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

if (arrayNode == null) {
    return null;
}

if (arrayNode == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayNode);
}

01:45:32.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:32.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:32.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:33.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:33.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:34.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:34.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:35.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:45:35.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:36.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:36.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===416
01:45:36.411 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
arrayFoldedChildren.add(elem);
arrayFoldedChildren.add(true, elem);
arrayFoldedChildren.add(false, elem);
arrayFoldedChildren.add(elem, true);
arrayFoldedChildren.add(elem, false);
01:45:36.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:37.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:37.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:38.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:38.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:39.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:39.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:39.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(prev);
arrayFoldedChildren.add(foldedSize);
arrayFoldedChildren.add(sb);
arrayFoldedChildren.add(joinString);
arrayFoldedChildren.add(functionName);
arrayFoldedChildren.add(arrayNode);
arrayFoldedChildren.add(right);
arrayFoldedChildren.add(callTarget);
arrayFoldedChildren.add(n);
arrayFoldedChildren.add(ROOT_LOCALE);
arrayFoldedChildren.add();
arrayFoldedChildren.add(prev, elem);
arrayFoldedChildren.add(foldedSize, elem);
arrayFoldedChildren.add(sb, elem);
arrayFoldedChildren.add(joinString, elem);
arrayFoldedChildren.add(functionName, elem);
arrayFoldedChildren.add(arrayNode, elem);
arrayFoldedChildren.add(right, elem);
arrayFoldedChildren.add(callTarget, elem);
arrayFoldedChildren.add(n, elem);
arrayFoldedChildren.add(ROOT_LOCALE, elem);
arrayFoldedChildren.add(elem, prev);
arrayFoldedChildren.add(elem, foldedSize);
arrayFoldedChildren.add(elem, sb);
arrayFoldedChildren.add(elem, joinString);
arrayFoldedChildren.add(elem, functionName);
arrayFoldedChildren.add(elem, arrayNode);
arrayFoldedChildren.add(elem, right);
arrayFoldedChildren.add(elem, callTarget);
arrayFoldedChildren.add(elem, n);
arrayFoldedChildren.add(elem, ROOT_LOCALE);
01:45:39.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:40.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:40.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:41.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:41.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:42.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:42.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:43.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:43.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:44.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:44.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:45.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:45.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:46.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:46.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:47.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:47.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:47.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:47.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:48.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:48.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:49.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:49.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:50.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:50.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:51.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:51.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:52.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:52.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:53.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:53.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:53.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:53.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:54.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:54.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:55.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:55.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:56.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:56.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:57.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:57.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:58.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:58.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:45:59.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:45:59.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:00.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:00.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:01.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:01.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:01.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:01.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:02.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:02.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:03.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:03.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:04.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:04.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:05.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:05.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:06.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:06.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:07.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren != null) {


}

if (elem != null) {


}

01:46:07.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:08.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:08.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:08.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

01:46:08.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:09.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:09.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:10.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:10.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:11.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:11.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:12.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(elem);
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        
null
arrayFoldedChildren.add(elem);
	sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        
null
arrayFoldedChildren.add(elem);
	if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        
null
arrayFoldedChildren.add(elem);
	foldedSize += InlineCostEstimator.getCost(elem);
        
null
01:46:12.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:13.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:13.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:14.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:14.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:15.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:15.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:16.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:46:16.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:16.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:16.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===415
01:46:16.949 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
foldedSize += InlineCostEstimator.getCost(elem);
foldedSize += InlineCostEstimator.getCost(true, elem);
foldedSize += InlineCostEstimator.getCost(false, elem);
foldedSize += InlineCostEstimator.getCost(elem, true);
foldedSize += InlineCostEstimator.getCost(elem, false);
01:46:16.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:17.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:17.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:18.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:18.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:19.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:19.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:20.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem != null) {


}

01:46:20.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:21.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

01:46:21.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:22.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:22.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:23.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
foldedSize += InlineCostEstimator.getCost(elem);
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        
null
foldedSize += InlineCostEstimator.getCost(elem);
	sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        
null
foldedSize += InlineCostEstimator.getCost(elem);
	if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        
null

        arrayFoldedChildren.add(elem);
	foldedSize += InlineCostEstimator.getCost(elem);

MOVE-BUGGY-STATEMENT
01:46:23.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:24.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:24.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:24.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:24.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:25.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:25.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:26.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:46:26.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:27.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:27.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===407
01:46:27.505 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
if (sb == null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
01:46:27.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:28.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {


}

01:46:28.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:29.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

01:46:29.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:30.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:30.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:31.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        
null
if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
	sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        
null

        foldedSize += InlineCostEstimator.getCost(elem);
	if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }

MOVE-BUGGY-STATEMENT

        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
	if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }

MOVE-BUGGY-STATEMENT
01:46:31.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:31.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:31.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:32.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:32.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:33.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:33.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:34.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:46:34.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:35.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:35.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===403
01:46:35.405 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
sb.append(joinString);
sb.append(true, joinString);
sb.append(false, joinString);
sb.append(joinString, true);
sb.append(joinString, false);
01:46:35.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:36.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:36.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:37.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:37.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:38.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:38.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:38.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
sb.append(elem);
sb.append(prev);
sb.append(foldedSize);
sb.append(arrayFoldedChildren);
sb.append(functionName);
sb.append(arrayNode);
sb.append(right);
sb.append(callTarget);
sb.append(n);
sb.append(ROOT_LOCALE);
sb.append();
sb.append(elem, joinString);
sb.append(prev, joinString);
sb.append(foldedSize, joinString);
sb.append(arrayFoldedChildren, joinString);
sb.append(functionName, joinString);
sb.append(arrayNode, joinString);
sb.append(right, joinString);
sb.append(callTarget, joinString);
sb.append(n, joinString);
sb.append(ROOT_LOCALE, joinString);
sb.append(joinString, elem);
sb.append(joinString, prev);
sb.append(joinString, foldedSize);
sb.append(joinString, arrayFoldedChildren);
sb.append(joinString, functionName);
sb.append(joinString, arrayNode);
sb.append(joinString, right);
sb.append(joinString, callTarget);
sb.append(joinString, n);
sb.append(joinString, ROOT_LOCALE);
01:46:38.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:39.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:39.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:40.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:40.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:41.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:41.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:42.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:42.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:43.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:43.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:44.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:44.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:44.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:44.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:45.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:45.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:46.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:46.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:47.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:47.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:48.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:48.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:49.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:49.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:50.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:50.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:51.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:51.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:52.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:52.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:52.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:52.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:53.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:53.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:54.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:54.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:55.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:55.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:56.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:56.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:57.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:57.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:58.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:58.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:58.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:58.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:46:59.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:46:59.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:00.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:00.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:01.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:01.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:02.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:02.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:03.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:03.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:04.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:04.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:05.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:05.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:06.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {


}

if (joinString != null) {


}

01:47:06.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:06.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:06.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:07.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

if (joinString == null) {
    return null;
}

if (joinString == null) {
    throw new IllegalArgumentException("Empty variable: " + joinString);
}

01:47:07.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:08.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:08.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:09.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:09.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:10.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:10.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:11.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
sb.append(joinString);
	sb = new StringBuilder();
        } else {
          
null
01:47:11.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:12.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:47:12.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:13.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:13.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===455
01:47:13.231 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return foldedStringNode;
if (foldedStringNode != null) {


}

01:47:13.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:14.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedStringNode == null) {
    return null;
}

if (foldedStringNode == null) {
    throw new IllegalArgumentException("Empty variable: " + foldedStringNode);
}

01:47:14.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:14.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:14.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:15.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:47:15.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:16.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:16.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===454
01:47:16.775 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
reportCodeChange();
reportCodeChange(true);
reportCodeChange(false);
01:47:16.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:17.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:17.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:18.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(foldedStringNode);
reportCodeChange(emptyStringNode);
reportCodeChange(originalSize);
reportCodeChange(elem);
reportCodeChange(prev);
reportCodeChange(foldedSize);
reportCodeChange(sb);
reportCodeChange(arrayFoldedChildren);
reportCodeChange(joinString);
reportCodeChange(functionName);
reportCodeChange(arrayNode);
reportCodeChange(right);
reportCodeChange(callTarget);
reportCodeChange(n);
reportCodeChange(ROOT_LOCALE);
01:47:18.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:19.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:19.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:20.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:20.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:21.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:21.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:22.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:22.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:23.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:23.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:24.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:24.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:24.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:24.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:25.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:25.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:26.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:26.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:27.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:27.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:28.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:28.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:29.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:29.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:30.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:30.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:31.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:31.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:31.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
01:47:31.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:32.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:32.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:33.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:33.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:34.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange();
	Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        
null
reportCodeChange();
	if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        
null
reportCodeChange();
	arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        
null
reportCodeChange();
	if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        
null
reportCodeChange();
	n.getParent().replaceChild(n, foldedStringNode);
        
null

        return foldedStringNode;
	reportCodeChange();

MOVE-BUGGY-STATEMENT
01:47:34.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:35.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:35.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:36.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:36.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:37.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:37.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:37.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:37.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:38.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:38.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:39.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:47:39.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:40.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:40.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===453
01:47:40.527 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
n.getParent().replaceChild(n, foldedStringNode);
n.getParent().replaceChild(true, n, foldedStringNode);
n.getParent().replaceChild(false, n, foldedStringNode);
n.getParent().replaceChild(n, true, foldedStringNode);
n.getParent().replaceChild(n, false, foldedStringNode);
n.getParent().replaceChild(n, foldedStringNode, true);
n.getParent().replaceChild(n, foldedStringNode, false);
01:47:40.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:41.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:41.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:42.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:42.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:43.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:43.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:44.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:44.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:44.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:44.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:45.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
n.getParent().replaceChild(emptyStringNode, foldedStringNode);
n.getParent().replaceChild(originalSize, foldedStringNode);
n.getParent().replaceChild(elem, foldedStringNode);
n.getParent().replaceChild(prev, foldedStringNode);
n.getParent().replaceChild(foldedSize, foldedStringNode);
n.getParent().replaceChild(sb, foldedStringNode);
n.getParent().replaceChild(arrayFoldedChildren, foldedStringNode);
n.getParent().replaceChild(joinString, foldedStringNode);
n.getParent().replaceChild(functionName, foldedStringNode);
n.getParent().replaceChild(arrayNode, foldedStringNode);
n.getParent().replaceChild(right, foldedStringNode);
n.getParent().replaceChild(callTarget, foldedStringNode);
n.getParent().replaceChild(ROOT_LOCALE, foldedStringNode);
n.getParent().replaceChild( foldedStringNode);
n.getParent().replaceChild(emptyStringNode, n, foldedStringNode);
n.getParent().replaceChild(originalSize, n, foldedStringNode);
n.getParent().replaceChild(elem, n, foldedStringNode);
n.getParent().replaceChild(prev, n, foldedStringNode);
n.getParent().replaceChild(foldedSize, n, foldedStringNode);
n.getParent().replaceChild(sb, n, foldedStringNode);
n.getParent().replaceChild(arrayFoldedChildren, n, foldedStringNode);
n.getParent().replaceChild(joinString, n, foldedStringNode);
n.getParent().replaceChild(functionName, n, foldedStringNode);
n.getParent().replaceChild(arrayNode, n, foldedStringNode);
n.getParent().replaceChild(right, n, foldedStringNode);
n.getParent().replaceChild(callTarget, n, foldedStringNode);
n.getParent().replaceChild(ROOT_LOCALE, n, foldedStringNode);
n.getParent().replaceChild(n, emptyStringNode);
n.getParent().replaceChild(n, originalSize);
n.getParent().replaceChild(n, elem);
n.getParent().replaceChild(n, prev);
n.getParent().replaceChild(n, foldedSize);
n.getParent().replaceChild(n, sb);
n.getParent().replaceChild(n, arrayFoldedChildren);
n.getParent().replaceChild(n, joinString);
n.getParent().replaceChild(n, functionName);
n.getParent().replaceChild(n, arrayNode);
n.getParent().replaceChild(n, right);
n.getParent().replaceChild(n, callTarget);
n.getParent().replaceChild(n, ROOT_LOCALE);
n.getParent().replaceChild(n, );
n.getParent().replaceChild(n, emptyStringNode, foldedStringNode);
n.getParent().replaceChild(n, originalSize, foldedStringNode);
n.getParent().replaceChild(n, elem, foldedStringNode);
n.getParent().replaceChild(n, prev, foldedStringNode);
n.getParent().replaceChild(n, foldedSize, foldedStringNode);
n.getParent().replaceChild(n, sb, foldedStringNode);
n.getParent().replaceChild(n, arrayFoldedChildren, foldedStringNode);
n.getParent().replaceChild(n, joinString, foldedStringNode);
n.getParent().replaceChild(n, functionName, foldedStringNode);
n.getParent().replaceChild(n, arrayNode, foldedStringNode);
n.getParent().replaceChild(n, right, foldedStringNode);
n.getParent().replaceChild(n, callTarget, foldedStringNode);
n.getParent().replaceChild(n, ROOT_LOCALE, foldedStringNode);
n.getParent().replaceChild(n, foldedStringNode, emptyStringNode);
n.getParent().replaceChild(n, foldedStringNode, originalSize);
n.getParent().replaceChild(n, foldedStringNode, elem);
n.getParent().replaceChild(n, foldedStringNode, prev);
n.getParent().replaceChild(n, foldedStringNode, foldedSize);
n.getParent().replaceChild(n, foldedStringNode, sb);
n.getParent().replaceChild(n, foldedStringNode, arrayFoldedChildren);
n.getParent().replaceChild(n, foldedStringNode, joinString);
n.getParent().replaceChild(n, foldedStringNode, functionName);
n.getParent().replaceChild(n, foldedStringNode, arrayNode);
n.getParent().replaceChild(n, foldedStringNode, right);
n.getParent().replaceChild(n, foldedStringNode, callTarget);
n.getParent().replaceChild(n, foldedStringNode, ROOT_LOCALE);
01:47:45.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:46.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:46.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:47.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:47.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:48.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:48.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:49.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:49.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:49.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:49.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:50.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:50.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:51.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:51.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:52.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:52.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:53.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:53.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:54.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:54.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:55.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:55.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:56.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:56.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:56.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:56.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:57.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:57.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:58.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:58.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:47:59.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:47:59.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:00.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:00.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:01.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:01.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:02.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:02.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:02.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:02.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:03.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:03.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:04.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:04.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:05.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:05.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:06.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:06.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:07.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:07.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:08.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:08.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:09.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:09.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:10.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:10.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:11.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:11.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:11.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:11.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:12.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:12.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:13.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:13.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:14.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:14.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:15.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:15.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:16.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:16.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:17.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:17.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:18.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:18.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:19.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:19.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:20.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:20.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:20.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:20.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:21.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:21.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:22.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:22.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:23.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:23.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:23.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:23.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:24.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:24.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:25.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:25.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:26.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:26.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:27.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:27.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:28.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:28.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:29.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:29.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:30.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:30.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:30.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:30.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:31.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:31.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:32.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:32.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:33.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:33.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:34.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:34.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:35.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:35.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:36.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:36.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:37.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:37.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:37.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:37.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:38.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:38.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:39.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:39.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:40.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:40.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:41.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:41.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:42.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:42.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:43.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:43.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:43.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (n != null) {


}

if (foldedStringNode != null) {


}

01:48:43.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:44.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:44.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:45.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:45.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:46.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (foldedStringNode == null) {
    return null;
}

if (foldedStringNode == null) {
    throw new IllegalArgumentException("Empty variable: " + foldedStringNode);
}

01:48:46.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:47.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:47.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:48.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:48.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:49.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:49.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:50.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:50.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:50.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:50.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:51.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
n.getParent().replaceChild(n, foldedStringNode);
	Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        
null
n.getParent().replaceChild(n, foldedStringNode);
	if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        
null
n.getParent().replaceChild(n, foldedStringNode);
	arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        
null
n.getParent().replaceChild(n, foldedStringNode);
	if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        
null

        reportCodeChange();
	n.getParent().replaceChild(n, foldedStringNode);

MOVE-BUGGY-STATEMENT

        reportCodeChange();
        return foldedStringNode;
	n.getParent().replaceChild(n, foldedStringNode);

MOVE-BUGGY-STATEMENT
01:48:51.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:52.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:52.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:53.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:53.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:54.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:54.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:55.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:55.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:56.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:56.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:57.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:48:57.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:57.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:48:57.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===445
01:48:57.975 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType() == Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
01:48:57.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:58.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedStringNode != null) {


}

01:48:58.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:48:59.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedStringNode == null) {
    return null;
}

if (foldedStringNode == null) {
    throw new IllegalArgumentException("Empty variable: " + foldedStringNode);
}

01:48:59.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:00.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:00.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:01.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
	Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        
null
if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
	if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        
null
if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
	arrayNode.detachChildren();
        
null

        n.getParent().replaceChild(n, foldedStringNode);
	if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }

MOVE-BUGGY-STATEMENT

        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
	if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }

MOVE-BUGGY-STATEMENT

        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
	if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }

MOVE-BUGGY-STATEMENT
01:49:01.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:02.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:02.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:03.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:03.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:04.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:04.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:05.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:05.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:06.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:06.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:06.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:49:06.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:07.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:07.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===444
01:49:07.804 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
arrayNode.detachChildren();
arrayNode.detachChildren(true);
arrayNode.detachChildren(false);
01:49:07.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:08.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:08.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:09.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.detachChildren(foldedStringNode);
arrayNode.detachChildren(emptyStringNode);
arrayNode.detachChildren(originalSize);
arrayNode.detachChildren(elem);
arrayNode.detachChildren(prev);
arrayNode.detachChildren(foldedSize);
arrayNode.detachChildren(sb);
arrayNode.detachChildren(arrayFoldedChildren);
arrayNode.detachChildren(joinString);
arrayNode.detachChildren(functionName);
arrayNode.detachChildren(right);
arrayNode.detachChildren(callTarget);
arrayNode.detachChildren(n);
arrayNode.detachChildren(ROOT_LOCALE);
01:49:09.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:10.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:10.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:11.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:11.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:12.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:12.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:13.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:13.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:13.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:13.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:14.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:14.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:15.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:15.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:16.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:16.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:17.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:17.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:18.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:18.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:19.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:19.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:20.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:20.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:21.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:21.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:21.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.getInputId();
arrayNode.children();
arrayNode.siblings();
arrayNode.getJSDocInfo();
arrayNode.getAncestors();
arrayNode.getFirstChild();
arrayNode.getLastChild();
arrayNode.getNext();
arrayNode.getLastSibling();
arrayNode.getParent();
arrayNode.detachFromParent();
arrayNode.removeFirstChild();
arrayNode.removeChildren();
arrayNode.cloneNode();
arrayNode.cloneTree();
arrayNode.getJSType();
arrayNode.getString();
arrayNode.toString();
arrayNode.toStringTree();
arrayNode.toStringTreeImpl();
arrayNode.getSourceFileName();
arrayNode.getQualifiedName();
arrayNode.getType();
arrayNode.getLength();
arrayNode.getLineno();
arrayNode.getCharno();
arrayNode.getSourceOffset();
arrayNode.getSourcePosition();
arrayNode.getChildCount();
arrayNode.getSideEffectFlags();
arrayNode.getPropListHeadForTesting();
arrayNode.getSortedPropTypes();
arrayNode.setQuotedString();
arrayNode.hasChildren();
arrayNode.isFromExterns();
arrayNode.hasOneChild();
arrayNode.hasMoreThanOneChild();
arrayNode.hasSideEffects();
arrayNode.isQualifiedName();
arrayNode.isUnscopedQualifiedName();
arrayNode.isVarArgs();
arrayNode.isOptionalArg();
arrayNode.isSyntheticBlock();
arrayNode.wasEmptyNode();
arrayNode.isOnlyModifiesThisCall();
arrayNode.isNoSideEffectsCall();
arrayNode.isLocalResultCall();
arrayNode.isQuotedString();
arrayNode.getDirectives();
arrayNode.getStaticSourceFile();
arrayNode.getDouble();
arrayNode.getJsDocBuilderForNode();
01:49:22.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:22.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:22.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:23.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:23.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:24.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:24.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:25.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:25.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:26.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:26.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:27.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:27.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:28.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:28.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:29.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:29.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:30.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:30.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:30.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:30.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:31.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:31.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:32.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:32.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:33.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:33.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:34.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:34.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:35.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:35.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:36.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:36.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:37.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:37.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:38.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:38.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:38.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:38.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:39.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:39.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:40.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:40.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:41.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:41.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:42.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:42.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:43.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:43.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:44.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:44.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:45.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:45.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:45.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:45.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:46.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:46.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:47.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:47.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:48.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:48.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:49.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:49.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:50.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:50.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:51.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:51.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:52.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:52.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:52.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:52.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:53.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:53.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:54.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:54.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:55.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:55.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:56.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:56.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:57.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:57.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:57.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:57.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:58.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:58.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:49:59.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:49:59.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:00.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:00.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:01.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:01.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:02.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:02.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:03.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:03.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:03.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:03.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:04.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:04.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:05.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:05.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:06.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:06.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:07.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode != null) {


}

01:50:07.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:07.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode == null) {
    return null;
}

if (arrayNode == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayNode);
}

01:50:07.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:08.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:08.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:09.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.detachChildren();
	Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        
null
arrayNode.detachChildren();
	if (foldedSize > originalSize) {
          return n;
        }
        
null

        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
	arrayNode.detachChildren();

MOVE-BUGGY-STATEMENT

        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
	arrayNode.detachChildren();

MOVE-BUGGY-STATEMENT

        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
	arrayNode.detachChildren();

MOVE-BUGGY-STATEMENT

        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
	arrayNode.detachChildren();

MOVE-BUGGY-STATEMENT
01:50:09.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:10.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:10.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:11.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:11.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:12.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:12.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:13.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:13.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:13.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:13.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:14.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:50:14.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:15.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:15.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===441
01:50:15.696 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (foldedSize > originalSize) {
          return n;
        }
if (foldedSize >= originalSize) {
          return n;
        }
if (foldedSize <= originalSize) {
          return n;
        }
if (foldedSize < originalSize) {
          return n;
        }
01:50:15.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:16.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:16.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:17.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:17.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:18.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (originalSize > originalSize) {
          return n;
        }
01:50:18.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:19.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedSize == 0) {
    new IllegalArgumentException("");
}

if (foldedSize != 0) {

    
}

if (foldedSize > 0) {

    
}

if (originalSize == 0) {
    new IllegalArgumentException("");
}

if (originalSize != 0) {

    
}

if (originalSize > 0) {

    
}

01:50:19.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:20.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:20.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:20.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:20.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:20.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:20.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:21.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:21.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:22.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:22.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:22.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedSize > originalSize) {
          return n;
        }
	Node foldedStringNode = arrayFoldedChildren.remove(0);
        
null

        arrayNode.detachChildren();
	if (foldedSize > originalSize) {
          return n;
        }

MOVE-BUGGY-STATEMENT

        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
	if (foldedSize > originalSize) {
          return n;
        }

MOVE-BUGGY-STATEMENT

        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
	if (foldedSize > originalSize) {
          return n;
        }

MOVE-BUGGY-STATEMENT

        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
	if (foldedSize > originalSize) {
          return n;
        }

MOVE-BUGGY-STATEMENT

        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
	if (foldedSize > originalSize) {
          return n;
        }

MOVE-BUGGY-STATEMENT
01:50:22.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:23.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:23.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:24.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:24.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:25.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:25.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:25.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:25.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:26.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:26.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:27.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:50:27.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:28.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:28.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===440
01:50:28.540 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node foldedStringNode = arrayFoldedChildren.remove(0);
Node foldedStringNode = arrayFoldedChildren.remove(foldedStringNode, 0);
Node foldedStringNode = arrayFoldedChildren.remove(emptyStringNode, 0);
Node foldedStringNode = arrayFoldedChildren.remove(originalSize, 0);
Node foldedStringNode = arrayFoldedChildren.remove(elem, 0);
Node foldedStringNode = arrayFoldedChildren.remove(prev, 0);
Node foldedStringNode = arrayFoldedChildren.remove(foldedSize, 0);
Node foldedStringNode = arrayFoldedChildren.remove(sb, 0);
Node foldedStringNode = arrayFoldedChildren.remove(joinString, 0);
Node foldedStringNode = arrayFoldedChildren.remove(functionName, 0);
Node foldedStringNode = arrayFoldedChildren.remove(arrayNode, 0);
Node foldedStringNode = arrayFoldedChildren.remove(right, 0);
Node foldedStringNode = arrayFoldedChildren.remove(callTarget, 0);
Node foldedStringNode = arrayFoldedChildren.remove(n, 0);
Node foldedStringNode = arrayFoldedChildren.remove(ROOT_LOCALE, 0);
Node foldedStringNode = arrayFoldedChildren.remove(0, foldedStringNode);
Node foldedStringNode = arrayFoldedChildren.remove(0, emptyStringNode);
Node foldedStringNode = arrayFoldedChildren.remove(0, originalSize);
Node foldedStringNode = arrayFoldedChildren.remove(0, elem);
Node foldedStringNode = arrayFoldedChildren.remove(0, prev);
Node foldedStringNode = arrayFoldedChildren.remove(0, foldedSize);
Node foldedStringNode = arrayFoldedChildren.remove(0, sb);
Node foldedStringNode = arrayFoldedChildren.remove(0, joinString);
Node foldedStringNode = arrayFoldedChildren.remove(0, functionName);
Node foldedStringNode = arrayFoldedChildren.remove(0, arrayNode);
Node foldedStringNode = arrayFoldedChildren.remove(0, right);
Node foldedStringNode = arrayFoldedChildren.remove(0, callTarget);
Node foldedStringNode = arrayFoldedChildren.remove(0, n);
Node foldedStringNode = arrayFoldedChildren.remove(0, ROOT_LOCALE);
01:50:28.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:29.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:29.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:30.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:30.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:31.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:31.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:32.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:32.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:32.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:32.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:33.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:33.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:34.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:34.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:35.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:35.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:36.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:36.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:37.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:37.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:38.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:38.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:38.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:38.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:39.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:39.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:40.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:40.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:41.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:41.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:42.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:42.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:43.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:43.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:44.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:44.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:45.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:45.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:46.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:46.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:46.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:46.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:47.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:47.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:48.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:48.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:49.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:49.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:50.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:50.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:51.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:51.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:52.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:52.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:53.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node foldedStringNode = foldedStringNode.remove(0);
Node foldedStringNode = emptyStringNode.remove(0);
Node foldedStringNode = originalSize.remove(0);
Node foldedStringNode = elem.remove(0);
Node foldedStringNode = prev.remove(0);
Node foldedStringNode = foldedSize.remove(0);
Node foldedStringNode = sb.remove(0);
Node foldedStringNode = joinString.remove(0);
Node foldedStringNode = functionName.remove(0);
Node foldedStringNode = arrayNode.remove(0);
Node foldedStringNode = right.remove(0);
Node foldedStringNode = callTarget.remove(0);
Node foldedStringNode = n.remove(0);
Node foldedStringNode = ROOT_LOCALE.remove(0);
01:50:53.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:53.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:53.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:54.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:54.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:55.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:55.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:56.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:56.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:57.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:57.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:58.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:58.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:50:59.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:50:59.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:00.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:00.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:01.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:01.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:02.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:02.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:02.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:02.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:03.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:03.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:04.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:04.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:05.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren != null) {


}

01:51:05.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:05.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

01:51:05.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:06.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:06.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:07.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:51:07.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:08.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:08.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===426
01:51:08.577 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          true, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          false, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), true);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), false);
01:51:08.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:09.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:09.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:10.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:10.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:11.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:11.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:12.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(
          elem, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          prev, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          foldedSize, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          sb, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          joinString, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          functionName, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          arrayNode, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          right, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          callTarget, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          n, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          ROOT_LOCALE, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), elem);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), prev);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), foldedSize);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), sb);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), joinString);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), functionName);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), arrayNode);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), right);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), callTarget);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), n);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), ROOT_LOCALE);
01:51:12.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:12.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:12.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:13.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:13.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:14.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:14.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:15.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:15.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:16.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:16.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:17.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:17.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:18.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:18.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:19.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:19.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:20.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:20.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:21.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:21.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:21.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:21.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:22.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:22.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:23.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:23.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:24.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:24.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:25.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:25.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:26.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:26.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:27.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:27.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:28.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:28.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:29.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:29.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:29.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:29.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:30.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:30.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:31.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren != null) {


}

if (sb != null) {


}

if (prev != null) {


}

01:51:31.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:32.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:32.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:33.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:33.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:34.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren == null) {
    return null;
}

if (arrayFoldedChildren == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayFoldedChildren);
}

if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

if (prev == null) {
    return null;
}

if (prev == null) {
    throw new IllegalArgumentException("Empty variable: " + prev);
}

01:51:34.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:35.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:35.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:36.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:36.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:36.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:36.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:37.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:37.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:38.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:38.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:39.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
	Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      
null
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
	foldedSize += sb.length() + 2;
      
null
01:51:39.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:40.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:40.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:41.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:51:41.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:42.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:42.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===425
01:51:42.191 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
foldedSize += sb.length() + 2;
if (sb != null) {


}

01:51:42.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:43.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

01:51:43.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:43.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:43.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:44.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
foldedSize += sb.length() + 2;
	Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      
null

      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
	foldedSize += sb.length() + 2;

MOVE-BUGGY-STATEMENT
01:51:44.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:45.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:45.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:46.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:51:46.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:47.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:47.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===423
01:51:47.326 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkNotNull(prev);
Preconditions.checkNotNull(true, prev);
Preconditions.checkNotNull(false, prev);
Preconditions.checkNotNull(prev, true);
Preconditions.checkNotNull(prev, false);
01:51:47.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:48.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:48.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:49.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:49.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:49.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:49.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:50.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkNotNull(elem);
Preconditions.checkNotNull(foldedSize);
Preconditions.checkNotNull(sb);
Preconditions.checkNotNull(arrayFoldedChildren);
Preconditions.checkNotNull(joinString);
Preconditions.checkNotNull(functionName);
Preconditions.checkNotNull(arrayNode);
Preconditions.checkNotNull(right);
Preconditions.checkNotNull(callTarget);
Preconditions.checkNotNull(n);
Preconditions.checkNotNull(ROOT_LOCALE);
Preconditions.checkNotNull();
Preconditions.checkNotNull(elem, prev);
Preconditions.checkNotNull(foldedSize, prev);
Preconditions.checkNotNull(sb, prev);
Preconditions.checkNotNull(arrayFoldedChildren, prev);
Preconditions.checkNotNull(joinString, prev);
Preconditions.checkNotNull(functionName, prev);
Preconditions.checkNotNull(arrayNode, prev);
Preconditions.checkNotNull(right, prev);
Preconditions.checkNotNull(callTarget, prev);
Preconditions.checkNotNull(n, prev);
Preconditions.checkNotNull(ROOT_LOCALE, prev);
Preconditions.checkNotNull(prev, elem);
Preconditions.checkNotNull(prev, foldedSize);
Preconditions.checkNotNull(prev, sb);
Preconditions.checkNotNull(prev, arrayFoldedChildren);
Preconditions.checkNotNull(prev, joinString);
Preconditions.checkNotNull(prev, functionName);
Preconditions.checkNotNull(prev, arrayNode);
Preconditions.checkNotNull(prev, right);
Preconditions.checkNotNull(prev, callTarget);
Preconditions.checkNotNull(prev, n);
Preconditions.checkNotNull(prev, ROOT_LOCALE);
01:51:50.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:51.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:51.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:52.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:52.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:53.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:53.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:54.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:54.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:55.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:55.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:55.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:55.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:56.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:56.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:57.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:57.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:58.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:58.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:51:59.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:51:59.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:00.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:00.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:01.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:01.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:02.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:02.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:02.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:02.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:03.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:03.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:04.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:04.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:05.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:05.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:06.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:06.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:07.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:07.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:08.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:08.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:08.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:08.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:09.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:09.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:10.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:10.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:11.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:11.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:12.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:12.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:13.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:13.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:14.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:14.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:15.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:15.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:16.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:16.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:17.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:17.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:17.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:17.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:18.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:18.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:19.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:19.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:20.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (prev != null) {


}

01:52:20.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:21.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (prev == null) {
    return null;
}

if (prev == null) {
    throw new IllegalArgumentException("Empty variable: " + prev);
}

01:52:21.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:22.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:22.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:23.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
	Preconditions.checkNotNull(prev);

MOVE-BUGGY-STATEMENT

      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
	Preconditions.checkNotNull(prev);

MOVE-BUGGY-STATEMENT
01:52:23.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:24.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:24.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:24.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:52:24.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:25.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:25.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===419
01:52:25.793 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
elem = elem.getNext();
elem = elem.getNext(true);
elem = elem.getNext(false);
01:52:25.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:26.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:26.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:27.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
elem = elem.getFirstChild();
elem = elem.getLastChild();
elem = elem.getLastSibling();
elem = elem.getParent();
elem = elem.detachFromParent();
elem = elem.removeFirstChild();
elem = elem.removeChildren();
elem = elem.cloneNode();
elem = elem.cloneTree();
01:52:27.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:28.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:28.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:29.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:29.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:30.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:30.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:31.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:31.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:31.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:31.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:32.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:32.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:33.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:33.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:34.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:34.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:35.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem != null) {


}

01:52:35.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:36.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

01:52:36.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:37.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:37.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:38.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
elem = elem.getNext();
	if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      
null
elem = elem.getNext();
	prev = elem;
      
null
01:52:38.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:38.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:38.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:39.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:52:39.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:40.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:40.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===418
01:52:40.685 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
prev = elem;
if (elem != null) {


}

01:52:40.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:41.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

01:52:41.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:42.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:42.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:43.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
prev = elem;
	if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      
null

      elem = elem.getNext();
	prev = elem;

MOVE-BUGGY-STATEMENT
01:52:43.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:44.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:44.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:45.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:52:45.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:45.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:45.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===405
01:52:45.885 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
sb.append(NodeUtil.getArrayElementStringValue(elem));
sb.append(true, NodeUtil.getArrayElementStringValue(elem));
sb.append(false, NodeUtil.getArrayElementStringValue(elem));
sb.append(NodeUtil.getArrayElementStringValue(elem), true);
sb.append(NodeUtil.getArrayElementStringValue(elem), false);
01:52:45.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:46.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:46.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:47.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:47.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:48.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:48.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:49.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
sb.append(elem, NodeUtil.getArrayElementStringValue(elem));
sb.append(prev, NodeUtil.getArrayElementStringValue(elem));
sb.append(foldedSize, NodeUtil.getArrayElementStringValue(elem));
sb.append(arrayFoldedChildren, NodeUtil.getArrayElementStringValue(elem));
sb.append(joinString, NodeUtil.getArrayElementStringValue(elem));
sb.append(functionName, NodeUtil.getArrayElementStringValue(elem));
sb.append(arrayNode, NodeUtil.getArrayElementStringValue(elem));
sb.append(right, NodeUtil.getArrayElementStringValue(elem));
sb.append(callTarget, NodeUtil.getArrayElementStringValue(elem));
sb.append(n, NodeUtil.getArrayElementStringValue(elem));
sb.append(ROOT_LOCALE, NodeUtil.getArrayElementStringValue(elem));
sb.append(NodeUtil.getArrayElementStringValue(elem), elem);
sb.append(NodeUtil.getArrayElementStringValue(elem), prev);
sb.append(NodeUtil.getArrayElementStringValue(elem), foldedSize);
sb.append(NodeUtil.getArrayElementStringValue(elem), arrayFoldedChildren);
sb.append(NodeUtil.getArrayElementStringValue(elem), joinString);
sb.append(NodeUtil.getArrayElementStringValue(elem), functionName);
sb.append(NodeUtil.getArrayElementStringValue(elem), arrayNode);
sb.append(NodeUtil.getArrayElementStringValue(elem), right);
sb.append(NodeUtil.getArrayElementStringValue(elem), callTarget);
sb.append(NodeUtil.getArrayElementStringValue(elem), n);
sb.append(NodeUtil.getArrayElementStringValue(elem), ROOT_LOCALE);
01:52:49.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:50.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:50.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:51.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:51.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:52.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:52.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:52.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:52.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:53.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:53.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:54.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:54.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:55.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:55.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:56.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:56.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:57.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:57.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:58.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:58.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:59.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:52:59.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:00.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:00.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:01.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:01.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:01.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:01.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:02.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:02.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:03.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:03.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:04.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:04.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:05.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:05.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:06.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:06.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:07.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:07.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:08.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:08.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:09.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {


}

if (elem != null) {


}

01:53:09.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:09.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:09.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:10.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

01:53:10.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:11.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:11.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:12.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:12.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:13.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:13.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:14.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
sb.append(NodeUtil.getArrayElementStringValue(elem));
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        
null

      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
	sb.append(NodeUtil.getArrayElementStringValue(elem));

MOVE-BUGGY-STATEMENT

      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
	sb.append(NodeUtil.getArrayElementStringValue(elem));

MOVE-BUGGY-STATEMENT

      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
	sb.append(NodeUtil.getArrayElementStringValue(elem));

MOVE-BUGGY-STATEMENT
01:53:14.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:15.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:15.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:16.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:16.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:17.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:17.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:17.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:53:17.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:18.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:18.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===401
01:53:18.786 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
sb = new StringBuilder();

        } else {
          sb.append(joinString);
	sb = new StringBuilder();

MOVE-BUGGY-STATEMENT
01:53:18.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:19.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:53:19.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:20.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:20.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===400
01:53:20.636 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
if (sb != null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
01:53:20.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:21.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {


}

01:53:21.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:22.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return null;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

01:53:22.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:23.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:23.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:24.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

        sb.append(NodeUtil.getArrayElementStringValue(elem));
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }

MOVE-BUGGY-STATEMENT

        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }

MOVE-BUGGY-STATEMENT

        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }

MOVE-BUGGY-STATEMENT

        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
	if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }

MOVE-BUGGY-STATEMENT
01:53:24.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:25.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:25.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:25.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:25.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:26.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:26.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:27.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:53:27.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:28.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:28.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===399
01:53:28.542 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) && elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType() != Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
01:53:28.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:29.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:29.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:30.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem != null) {


}

if (elem != null) {


}

01:53:30.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:31.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:31.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:32.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

if (elem == null) {
    return null;
}

if (elem == null) {
    throw new IllegalArgumentException("Empty variable: " + elem);
}

01:53:32.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:32.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:32.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:33.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:33.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:34.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:34.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:35.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

      prev = elem;
	if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }

MOVE-BUGGY-STATEMENT

      prev = elem;
      elem = elem.getNext();
	if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }

MOVE-BUGGY-STATEMENT
01:53:35.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:36.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:36.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:37.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

01:53:37.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:38.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:38.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.InlineCostEstimator ===39
01:53:38.125 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return getCost(root, Integer.MAX_VALUE);
return getCost(ESTIMATED_IDENTIFIER, Integer.MAX_VALUE);
return getCost(ESTIMATED_IDENTIFIER_COST, Integer.MAX_VALUE);
return getCost( Integer.MAX_VALUE);
return getCost(ESTIMATED_IDENTIFIER, root, Integer.MAX_VALUE);
return getCost(ESTIMATED_IDENTIFIER_COST, root, Integer.MAX_VALUE);
return getCost(root, ESTIMATED_IDENTIFIER, Integer.MAX_VALUE);
return getCost(root, ESTIMATED_IDENTIFIER_COST, Integer.MAX_VALUE);
return getCost(root, Integer.MAX_VALUE, ESTIMATED_IDENTIFIER);
return getCost(root, Integer.MAX_VALUE, ESTIMATED_IDENTIFIER_COST);
01:53:38.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:38.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:38.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:39.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:39.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:40.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:40.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:40.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:40.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:41.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:41.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:42.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:42.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:43.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:43.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:43.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:43.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:44.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
return getCost(true, root, Integer.MAX_VALUE);
return getCost(false, root, Integer.MAX_VALUE);
return getCost(root, true, Integer.MAX_VALUE);
return getCost(root, false, Integer.MAX_VALUE);
return getCost(root, Integer.MAX_VALUE, true);
return getCost(root, Integer.MAX_VALUE, false);
01:53:44.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:45.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:45.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:45.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:45.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:46.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:46.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:47.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:47.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:47.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
01:53:47.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:48.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (root != null) {


}

01:53:48.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:49.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (root == null) {
    return 0;
}

if (root == null) {
    throw new IllegalArgumentException("Empty variable: " + root);
}

01:53:49.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:50.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
01:53:50.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
01:57:23.714 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 2, [com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin]
01:57:23.714 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 2, [- com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin, - com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd]
01:57:23.715 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin
01:57:23.715 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd
01:57:23.715 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=2, fp=0, pf=0, pp=Unknown
01:57:23.715 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
01:57:24.037 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-50/aggregatedSusInfo.profl
01:57:24.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = com.google.javascript.jscomp.InlineCostEstimator:getCost(Lcom/google/javascript/rhino/Node;)I in com.google.javascript.jscomp.InlineCostEstimator:39
01:57:24.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 2 Closure-50
01:57:24.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:24.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
01:57:24.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
02:00:52.990 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 2, [com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd, com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin]
02:00:52.990 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 2, [- com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin, - com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd]
02:00:52.990 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin
02:00:52.990 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd
02:00:52.991 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=2, fp=0, pf=0, pp=Unknown
02:00:52.991 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
02:00:58.376 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-50/aggregatedSusInfo.profl
02:00:58.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = com.google.javascript.jscomp.InlineCostEstimator:getCost(Lcom/google/javascript/rhino/Node;)I in com.google.javascript.jscomp.InlineCostEstimator:39
02:00:58.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 2 Closure-50

02:00:58.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:59.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:00:59.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===384
02:00:59.066 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) && !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType() == Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
02:00:59.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:59.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:00:59.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:00.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode != null) {


}

if (functionName != null) {


}

02:01:00.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:01.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:01.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:02.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode == null) {
    return null;
}

if (arrayNode == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayNode);
}

if (functionName == null) {
    return null;
}

if (functionName == null) {
    throw new IllegalArgumentException("Empty variable: " + functionName);
}

02:01:02.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:03.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:03.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:04.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:04.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:05.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:05.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:05.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
	Node callTarget = n.getFirstChild();

    if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    
null
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
	if (callTarget == null || !NodeUtil.isGetProp(callTarget)) {
      return n;
    }

    Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    
null
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
	Node right = callTarget.getNext();
    if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    
null
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
	if (right != null) {
      if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
    }

    Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    
null
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
	Node arrayNode = callTarget.getFirstChild();
    Node functionName = arrayNode.getNext();

    
null
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
	Node functionName = arrayNode.getNext();

    
null


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT


      // "," is the default, it doesn't need to be explicit

    String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);
    List<Node> arrayFoldedChildren = Lists.newLinkedList();
    StringBuilder sb = null;
    int foldedSize = 0;
    Node prev = null;
    Node elem = arrayNode.getFirstChild();
    // Merges adjacent String nodes.
    while (elem != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }

    if (sb != null) {
      Preconditions.checkNotNull(prev);
      // + 2 for the quotes.
      foldedSize += sb.length() + 2;
      arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev));
    }
    // one for each comma.
    foldedSize += arrayFoldedChildren.size() - 1;

    int originalSize = InlineCostEstimator.getCost(n);
    switch (arrayFoldedChildren.size()) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }

    return n;
	if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }

MOVE-BUGGY-STATEMENT
02:01:05.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:06.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:06.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:07.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:07.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:08.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:08.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:09.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:09.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:10.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:10.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:11.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:11.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:11.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:11.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:12.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:12.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:13.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:13.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:14.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:14.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:15.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:15.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:16.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:16.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:17.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:17.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:18.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:18.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:18.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:18.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:19.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:19.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:20.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:20.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:21.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

02:01:21.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:22.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:22.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===382
02:01:22.369 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node functionName = arrayNode.getNext();
Node functionName = arrayNode.getFirstChild();
Node functionName = arrayNode.getLastChild();
Node functionName = arrayNode.getLastSibling();
Node functionName = arrayNode.getParent();
Node functionName = arrayNode.detachFromParent();
Node functionName = arrayNode.removeFirstChild();
Node functionName = arrayNode.removeChildren();
Node functionName = arrayNode.cloneNode();
Node functionName = arrayNode.cloneTree();
02:01:22.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:23.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:23.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:24.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:24.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:24.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:24.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:25.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:25.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:26.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:26.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:27.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:27.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:28.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:28.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:29.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:29.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:30.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node functionName = arrayNode.getNext(functionName);
Node functionName = arrayNode.getNext(right);
Node functionName = arrayNode.getNext(callTarget);
Node functionName = arrayNode.getNext(n);
Node functionName = arrayNode.getNext(ROOT_LOCALE);
02:01:30.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:30.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:30.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:31.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:31.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:32.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:32.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:33.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:33.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:34.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node functionName = functionName.getNext();
Node functionName = right.getNext();
Node functionName = callTarget.getNext();
Node functionName = n.getNext();
Node functionName = ROOT_LOCALE.getNext();
02:01:34.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:35.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:35.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:35.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:35.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:36.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:36.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:37.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:37.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:38.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode != null) {


}

02:01:38.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:39.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayNode == null) {
    return null;
}

if (arrayNode == null) {
    throw new IllegalArgumentException("Empty variable: " + arrayNode);
}

02:01:39.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:40.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:40.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:41.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

02:01:41.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:42.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:42.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===381
02:01:42.052 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node arrayNode = callTarget.getFirstChild();
Node arrayNode = callTarget.getLastChild();
Node arrayNode = callTarget.getNext();
Node arrayNode = callTarget.getLastSibling();
Node arrayNode = callTarget.getParent();
Node arrayNode = callTarget.detachFromParent();
Node arrayNode = callTarget.removeFirstChild();
Node arrayNode = callTarget.removeChildren();
Node arrayNode = callTarget.cloneNode();
Node arrayNode = callTarget.cloneTree();
02:01:42.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:42.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:42.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:43.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:43.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:44.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:44.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:45.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:45.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:46.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:46.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:47.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:47.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:48.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:48.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:48.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:48.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:49.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node arrayNode = callTarget.getFirstChild(arrayNode);
Node arrayNode = callTarget.getFirstChild(right);
Node arrayNode = callTarget.getFirstChild(n);
Node arrayNode = callTarget.getFirstChild(ROOT_LOCALE);
02:01:49.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:50.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:50.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:51.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:51.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:52.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:52.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:53.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node arrayNode = arrayNode.getFirstChild();
Node arrayNode = right.getFirstChild();
Node arrayNode = n.getFirstChild();
Node arrayNode = ROOT_LOCALE.getFirstChild();
02:01:53.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:53.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:53.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:54.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:54.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:55.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:55.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:56.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (callTarget != null) {


}

02:01:56.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:57.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (callTarget == null) {
    return null;
}

if (callTarget == null) {
    throw new IllegalArgumentException("Empty variable: " + callTarget);
}

02:01:57.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:58.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:58.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:59.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

02:01:59.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:59.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:01:59.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeReplaceKnownMethods ===376
02:01:59.983 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!NodeUtil.isImmutableValue(right)) {
        return n;
      }
if (right != null) {


}

02:01:59.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:00.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (right == null) {
    return null;
}

if (right == null) {
    throw new IllegalArgumentException("Empty variable: " + right);
}

02:02:00.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:01.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:01.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:02.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 

02:02:02.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:03.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
return elem;
return prev;
return functionName;
return arrayNode;
return right;
return callTarget;
return n;
02:02:03.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:04.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:04.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:05.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:05.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:05.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:05.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:06.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:06.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:07.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:07.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:08.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:08.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:09.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(emptyStringNode);
reportCodeChange(originalSize);
reportCodeChange(elem);
reportCodeChange(prev);
reportCodeChange(foldedSize);
reportCodeChange(sb);
reportCodeChange(arrayFoldedChildren);
reportCodeChange(joinString);
reportCodeChange(functionName);
reportCodeChange(arrayNode);
reportCodeChange(right);
reportCodeChange(callTarget);
reportCodeChange(n);
reportCodeChange(ROOT_LOCALE);
reportCodeChange(true);
reportCodeChange(false);
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
02:02:09.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:10.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:10.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:11.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:11.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:12.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:12.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:12.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:12.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:13.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:13.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:14.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:14.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:15.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:15.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:16.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:16.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:17.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:17.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:18.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:18.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:19.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:19.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:19.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:19.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:20.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:20.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:21.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:21.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:22.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:22.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:23.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:23.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:24.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:24.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:25.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:25.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:26.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
n.getParent().replaceChild(originalSize, emptyStringNode);
n.getParent().replaceChild(elem, emptyStringNode);
n.getParent().replaceChild(prev, emptyStringNode);
n.getParent().replaceChild(foldedSize, emptyStringNode);
n.getParent().replaceChild(sb, emptyStringNode);
n.getParent().replaceChild(arrayFoldedChildren, emptyStringNode);
n.getParent().replaceChild(joinString, emptyStringNode);
n.getParent().replaceChild(functionName, emptyStringNode);
n.getParent().replaceChild(arrayNode, emptyStringNode);
n.getParent().replaceChild(right, emptyStringNode);
n.getParent().replaceChild(callTarget, emptyStringNode);
n.getParent().replaceChild(ROOT_LOCALE, emptyStringNode);
n.getParent().replaceChild( emptyStringNode);
n.getParent().replaceChild(originalSize, n, emptyStringNode);
n.getParent().replaceChild(elem, n, emptyStringNode);
n.getParent().replaceChild(prev, n, emptyStringNode);
n.getParent().replaceChild(foldedSize, n, emptyStringNode);
n.getParent().replaceChild(sb, n, emptyStringNode);
n.getParent().replaceChild(arrayFoldedChildren, n, emptyStringNode);
n.getParent().replaceChild(joinString, n, emptyStringNode);
n.getParent().replaceChild(functionName, n, emptyStringNode);
n.getParent().replaceChild(arrayNode, n, emptyStringNode);
n.getParent().replaceChild(right, n, emptyStringNode);
n.getParent().replaceChild(callTarget, n, emptyStringNode);
n.getParent().replaceChild(ROOT_LOCALE, n, emptyStringNode);
n.getParent().replaceChild(n, originalSize);
n.getParent().replaceChild(n, elem);
n.getParent().replaceChild(n, prev);
n.getParent().replaceChild(n, foldedSize);
n.getParent().replaceChild(n, sb);
n.getParent().replaceChild(n, arrayFoldedChildren);
n.getParent().replaceChild(n, joinString);
n.getParent().replaceChild(n, functionName);
n.getParent().replaceChild(n, arrayNode);
n.getParent().replaceChild(n, right);
n.getParent().replaceChild(n, callTarget);
n.getParent().replaceChild(n, ROOT_LOCALE);
n.getParent().replaceChild(n, );
n.getParent().replaceChild(n, originalSize, emptyStringNode);
n.getParent().replaceChild(n, elem, emptyStringNode);
n.getParent().replaceChild(n, prev, emptyStringNode);
n.getParent().replaceChild(n, foldedSize, emptyStringNode);
n.getParent().replaceChild(n, sb, emptyStringNode);
n.getParent().replaceChild(n, arrayFoldedChildren, emptyStringNode);
n.getParent().replaceChild(n, joinString, emptyStringNode);
n.getParent().replaceChild(n, functionName, emptyStringNode);
n.getParent().replaceChild(n, arrayNode, emptyStringNode);
n.getParent().replaceChild(n, right, emptyStringNode);
n.getParent().replaceChild(n, callTarget, emptyStringNode);
n.getParent().replaceChild(n, ROOT_LOCALE, emptyStringNode);
n.getParent().replaceChild(n, emptyStringNode, originalSize);
n.getParent().replaceChild(n, emptyStringNode, elem);
n.getParent().replaceChild(n, emptyStringNode, prev);
n.getParent().replaceChild(n, emptyStringNode, foldedSize);
n.getParent().replaceChild(n, emptyStringNode, sb);
n.getParent().replaceChild(n, emptyStringNode, arrayFoldedChildren);
n.getParent().replaceChild(n, emptyStringNode, joinString);
n.getParent().replaceChild(n, emptyStringNode, functionName);
n.getParent().replaceChild(n, emptyStringNode, arrayNode);
n.getParent().replaceChild(n, emptyStringNode, right);
n.getParent().replaceChild(n, emptyStringNode, callTarget);
n.getParent().replaceChild(n, emptyStringNode, ROOT_LOCALE);
n.getParent().replaceChild(true, n, emptyStringNode);
n.getParent().replaceChild(false, n, emptyStringNode);
n.getParent().replaceChild(n, true, emptyStringNode);
n.getParent().replaceChild(n, false, emptyStringNode);
n.getParent().replaceChild(n, emptyStringNode, true);
n.getParent().replaceChild(n, emptyStringNode, false);
02:02:26.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:26.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:26.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:27.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:27.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:28.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:28.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:29.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:29.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:30.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:30.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:31.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:31.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:32.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:32.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:33.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:33.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:33.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:33.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:34.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:34.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:35.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:35.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:36.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:36.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:37.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:37.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:38.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:38.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:39.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:39.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:39.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:39.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:40.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:40.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:41.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:41.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:42.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:42.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:43.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:43.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:44.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:44.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:45.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:45.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:45.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:45.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:46.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:46.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:47.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:47.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:48.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:48.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:49.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:49.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:50.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:50.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:51.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:51.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:51.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:51.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:52.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:52.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:53.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:53.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:54.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:54.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:55.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:55.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:56.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:56.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:57.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:57.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:58.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:58.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:58.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:58.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:59.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:02:59.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:00.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:00.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:00.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:00.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:01.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:01.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:02.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:02.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:03.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:03.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:04.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:04.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:05.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:05.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:06.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:06.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:07.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:07.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:07.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:07.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:08.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:08.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:09.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:09.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:10.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:10.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:11.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:11.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:12.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:12.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:13.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:13.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:14.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:14.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:15.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:15.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:15.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:15.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:16.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:16.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:17.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:17.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:18.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:18.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:19.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:19.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:20.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:20.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:21.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:21.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:22.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:22.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:23.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:23.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:23.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:23.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:24.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node elem = Node.newString("");
Node prev = Node.newString("");
Node functionName = Node.newString("");
Node arrayNode = Node.newString("");
Node right = Node.newString("");
Node callTarget = Node.newString("");
Node n = Node.newString("");
02:03:24.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:25.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:25.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:26.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:26.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:27.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:27.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:28.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:28.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:29.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:29.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:29.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:29.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:30.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(diff) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(node2) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LOCAL_BLOCK_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(OBJECT_IDS_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(CATCH_SCOPE_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LABEL_ID_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(TARGET_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(BREAK_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(CONTINUE_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(ENUM_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FUNCTION_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(TEMP_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LOCAL_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(CODEOFFSET_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FIXUPS_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(VARS_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(USES_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(REGEXP_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(CASES_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(DEFAULT_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(CASEARRAY_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SOURCENAME_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(TYPE_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SPECIAL_PROP_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LABEL_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FINALLY_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LOCALCOUNT_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(TARGETBLOCK_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(VARIABLE_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LASTUSE_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(ISNUMBER_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(DIRECTCALL_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SPECIALCALL_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(DEBUGSOURCE_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(JSDOC_INFO_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(VAR_ARGS_NAME) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SKIP_INDEXES_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(INCRDECR_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(MEMBER_TYPE_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(NAME_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(PARENTHESIZED_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(QUOTED_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(OPT_ARG_NAME) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SYNTHETIC_BLOCK_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(EMPTY_BLOCK) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(ORIGINALNAME_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(BRACELESS_TYPE) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SIDE_EFFECT_FLAGS) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(IS_CONSTANT_NAME) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(IS_OPTIONAL_PARAM) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(IS_VAR_ARGS_PARAM) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(IS_NAMESPACE) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(IS_DISPATCHER) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(DIRECTIVES) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(DIRECT_EVAL) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FREE_CALL) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(STATIC_SOURCE_FILE) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LENGTH) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(INPUT_ID) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LAST_PROP) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(BOTH) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(LEFT) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(RIGHT) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(NON_SPECIALCALL) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SPECIALCALL_EVAL) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SPECIALCALL_WITH) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(DECR_FLAG) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(POST_FLAG) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(PROPERTY_FLAG) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(ATTRIBUTE_FLAG) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(DESCENDANTS_FLAG) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.type) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.next) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.first) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.last) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.propListHead) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(COLUMN_BITS) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(MAX_COLUMN_NUMBER) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(COLUMN_MASK) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.sourcePosition) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.jsType) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(this.parent) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FLAG_GLOBAL_STATE_UNMODIFIED) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FLAG_THIS_UNMODIFIED) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FLAG_ARGUMENTS_UNMODIFIED) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FLAG_NO_THROWS) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(FLAG_LOCAL_RESULTS) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SIDE_EFFECTS_FLAGS_MASK) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(SIDE_EFFECTS_ALL) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree(NO_SIDE_EFFECTS) +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
toStringTree(true);
toStringTree(false);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(diff) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LOCAL_BLOCK_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(OBJECT_IDS_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(CATCH_SCOPE_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LABEL_ID_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(TARGET_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(BREAK_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(CONTINUE_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(ENUM_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FUNCTION_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(TEMP_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LOCAL_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(CODEOFFSET_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FIXUPS_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(VARS_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(USES_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(REGEXP_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(CASES_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(DEFAULT_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(CASEARRAY_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SOURCENAME_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(TYPE_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SPECIAL_PROP_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LABEL_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FINALLY_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LOCALCOUNT_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(TARGETBLOCK_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(VARIABLE_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LASTUSE_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(ISNUMBER_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(DIRECTCALL_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SPECIALCALL_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(DEBUGSOURCE_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(JSDOC_INFO_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(VAR_ARGS_NAME) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SKIP_INDEXES_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(INCRDECR_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(MEMBER_TYPE_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(NAME_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(PARENTHESIZED_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(QUOTED_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(OPT_ARG_NAME) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SYNTHETIC_BLOCK_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(EMPTY_BLOCK) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(ORIGINALNAME_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(BRACELESS_TYPE) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SIDE_EFFECT_FLAGS) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(IS_CONSTANT_NAME) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(IS_OPTIONAL_PARAM) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(IS_VAR_ARGS_PARAM) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(IS_NAMESPACE) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(IS_DISPATCHER) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(DIRECTIVES) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(DIRECT_EVAL) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FREE_CALL) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(STATIC_SOURCE_FILE) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LENGTH) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(INPUT_ID) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LAST_PROP) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(BOTH) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(LEFT) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(RIGHT) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(NON_SPECIALCALL) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SPECIALCALL_EVAL) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SPECIALCALL_WITH) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(DECR_FLAG) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(POST_FLAG) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(PROPERTY_FLAG) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(ATTRIBUTE_FLAG) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(DESCENDANTS_FLAG) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.type) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.next) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.first) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.last) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.propListHead) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(COLUMN_BITS) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(MAX_COLUMN_NUMBER) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(COLUMN_MASK) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.sourcePosition) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.jsType) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(this.parent) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FLAG_GLOBAL_STATE_UNMODIFIED) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FLAG_THIS_UNMODIFIED) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FLAG_ARGUMENTS_UNMODIFIED) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FLAG_NO_THROWS) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(FLAG_LOCAL_RESULTS) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SIDE_EFFECTS_FLAGS_MASK) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(SIDE_EFFECTS_ALL) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(NO_SIDE_EFFECTS) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(true) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree(false) +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getAncestors() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getJSType() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getType() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getLength() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getLineno() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getCharno() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getSourceOffset() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getSourcePosition() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getChildCount() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getSideEffectFlags() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getSortedPropTypes() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getPropListHeadForTesting() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.detachChildren() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.setQuotedString() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getDouble() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getStaticSourceFile() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getInputId() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.children() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.siblings() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getJSDocInfo() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getFirstChild() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getLastChild() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getNext() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getLastSibling() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getParent() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.detachFromParent() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.removeFirstChild() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.removeChildren() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.cloneNode() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.cloneTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getString() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toString() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTreeImpl() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getSourceFileName() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getQualifiedName() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.hasChildren() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isFromExterns() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.hasOneChild() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.hasMoreThanOneChild() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.hasSideEffects() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isQualifiedName() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isUnscopedQualifiedName() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isVarArgs() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isOptionalArg() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isSyntheticBlock() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.wasEmptyNode() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isOnlyModifiesThisCall() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isNoSideEffectsCall() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isLocalResultCall() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.isQuotedString() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getDirectives() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.getJsDocBuilderForNode() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getType().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + hasChildren().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getFirstChild().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getLastChild().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getNext().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getLastSibling().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getSortedPropTypes().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getDouble().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getString().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + toString().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + toStringTree().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + toStringTreeImpl().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getSourceFileName().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getStaticSourceFile().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getInputId().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isFromExterns().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getLength().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getLineno().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getCharno().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getSourceOffset().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getSourcePosition().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + children().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + siblings().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getPropListHeadForTesting().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getParent().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getAncestors().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + hasOneChild().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + hasMoreThanOneChild().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getChildCount().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + hasSideEffects().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getQualifiedName().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isQualifiedName().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isUnscopedQualifiedName().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + detachFromParent().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + removeFirstChild().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + removeChildren().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + cloneNode().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + cloneTree().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getJSType().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getJsDocBuilderForNode().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getJSDocInfo().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isVarArgs().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isOptionalArg().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isSyntheticBlock().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getDirectives().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + wasEmptyNode().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + getSideEffectFlags().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isOnlyModifiesThisCall().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isNoSideEffectsCall().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isLocalResultCall().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + isQuotedString().toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(diff) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(node2) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LOCAL_BLOCK_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(OBJECT_IDS_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(CATCH_SCOPE_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LABEL_ID_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(TARGET_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(BREAK_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(CONTINUE_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(ENUM_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FUNCTION_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(TEMP_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LOCAL_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(CODEOFFSET_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FIXUPS_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(VARS_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(USES_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(REGEXP_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(CASES_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(DEFAULT_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(CASEARRAY_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SOURCENAME_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(TYPE_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SPECIAL_PROP_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LABEL_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FINALLY_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LOCALCOUNT_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(TARGETBLOCK_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(VARIABLE_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LASTUSE_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(ISNUMBER_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(DIRECTCALL_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SPECIALCALL_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(DEBUGSOURCE_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(JSDOC_INFO_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(VAR_ARGS_NAME) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SKIP_INDEXES_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(INCRDECR_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(MEMBER_TYPE_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(NAME_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(PARENTHESIZED_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(QUOTED_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(OPT_ARG_NAME) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SYNTHETIC_BLOCK_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(EMPTY_BLOCK) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(ORIGINALNAME_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(BRACELESS_TYPE) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SIDE_EFFECT_FLAGS) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(IS_CONSTANT_NAME) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(IS_OPTIONAL_PARAM) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(IS_VAR_ARGS_PARAM) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(IS_NAMESPACE) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(IS_DISPATCHER) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(DIRECTIVES) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(DIRECT_EVAL) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FREE_CALL) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(STATIC_SOURCE_FILE) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LENGTH) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(INPUT_ID) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LAST_PROP) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(BOTH) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(LEFT) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(RIGHT) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(NON_SPECIALCALL) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SPECIALCALL_EVAL) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SPECIALCALL_WITH) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(DECR_FLAG) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(POST_FLAG) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(PROPERTY_FLAG) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(ATTRIBUTE_FLAG) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(DESCENDANTS_FLAG) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.type) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.next) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.first) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.last) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.propListHead) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(COLUMN_BITS) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(MAX_COLUMN_NUMBER) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(COLUMN_MASK) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.sourcePosition) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.jsType) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(this.parent) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FLAG_GLOBAL_STATE_UNMODIFIED) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FLAG_THIS_UNMODIFIED) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FLAG_ARGUMENTS_UNMODIFIED) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FLAG_NO_THROWS) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(FLAG_LOCAL_RESULTS) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SIDE_EFFECTS_FLAGS_MASK) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(SIDE_EFFECTS_ALL) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(NO_SIDE_EFFECTS) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(true) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree(false) +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getType().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + hasChildren().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getFirstChild().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getLastChild().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getNext().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getLastSibling().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getSortedPropTypes().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getDouble().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getString().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + toString().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + toStringTree().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + toStringTreeImpl().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getSourceFileName().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getStaticSourceFile().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getInputId().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isFromExterns().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getLength().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getLineno().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getCharno().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getSourceOffset().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getSourcePosition().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + children().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + siblings().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getPropListHeadForTesting().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getParent().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getAncestors().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + hasOneChild().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + hasMoreThanOneChild().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getChildCount().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + hasSideEffects().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getQualifiedName().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isQualifiedName().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isUnscopedQualifiedName().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + detachFromParent().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + removeFirstChild().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + removeChildren().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + cloneNode().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + cloneTree().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getJSType().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getJsDocBuilderForNode().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getJSDocInfo().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isVarArgs().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isOptionalArg().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isSyntheticBlock().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getDirectives().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + wasEmptyNode().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + getSideEffectFlags().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isOnlyModifiesThisCall().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isNoSideEffectsCall().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isLocalResultCall().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + isQuotedString().toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(diff);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(node2);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LOCAL_BLOCK_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(OBJECT_IDS_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(CATCH_SCOPE_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LABEL_ID_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(TARGET_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(BREAK_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(CONTINUE_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(ENUM_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FUNCTION_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(TEMP_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LOCAL_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(CODEOFFSET_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FIXUPS_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(VARS_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(USES_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(REGEXP_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(CASES_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(DEFAULT_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(CASEARRAY_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SOURCENAME_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(TYPE_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SPECIAL_PROP_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LABEL_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FINALLY_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LOCALCOUNT_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(TARGETBLOCK_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(VARIABLE_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LASTUSE_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(ISNUMBER_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(DIRECTCALL_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SPECIALCALL_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(DEBUGSOURCE_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(JSDOC_INFO_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(VAR_ARGS_NAME);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SKIP_INDEXES_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(INCRDECR_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(MEMBER_TYPE_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(NAME_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(PARENTHESIZED_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(QUOTED_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(OPT_ARG_NAME);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SYNTHETIC_BLOCK_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(EMPTY_BLOCK);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(ORIGINALNAME_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(BRACELESS_TYPE);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SIDE_EFFECT_FLAGS);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(IS_CONSTANT_NAME);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(IS_OPTIONAL_PARAM);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(IS_VAR_ARGS_PARAM);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(IS_NAMESPACE);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(IS_DISPATCHER);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(DIRECTIVES);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(DIRECT_EVAL);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FREE_CALL);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(STATIC_SOURCE_FILE);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LENGTH);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(INPUT_ID);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LAST_PROP);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(BOTH);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(LEFT);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(RIGHT);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(NON_SPECIALCALL);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SPECIALCALL_EVAL);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SPECIALCALL_WITH);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(DECR_FLAG);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(POST_FLAG);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(PROPERTY_FLAG);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(ATTRIBUTE_FLAG);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(DESCENDANTS_FLAG);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.type);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.next);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.first);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.last);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.propListHead);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(COLUMN_BITS);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(MAX_COLUMN_NUMBER);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(COLUMN_MASK);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.sourcePosition);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.jsType);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(this.parent);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FLAG_GLOBAL_STATE_UNMODIFIED);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FLAG_THIS_UNMODIFIED);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FLAG_ARGUMENTS_UNMODIFIED);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FLAG_NO_THROWS);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(FLAG_LOCAL_RESULTS);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SIDE_EFFECTS_FLAGS_MASK);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(SIDE_EFFECTS_ALL);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(NO_SIDE_EFFECTS);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(true);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree(false);
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getType().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + hasChildren().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getFirstChild().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getLastChild().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getNext().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getLastSibling().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getSortedPropTypes().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getDouble().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getString().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + toString().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + toStringTree().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + toStringTreeImpl().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getSourceFileName().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getStaticSourceFile().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getInputId().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isFromExterns().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getLength().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getLineno().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getCharno().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getSourceOffset().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getSourcePosition().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + children().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + siblings().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getPropListHeadForTesting().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getParent().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getAncestors().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + hasOneChild().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + hasMoreThanOneChild().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getChildCount().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + hasSideEffects().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getQualifiedName().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isQualifiedName().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isUnscopedQualifiedName().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + detachFromParent().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + removeFirstChild().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + removeChildren().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + cloneNode().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + cloneTree().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getJSType().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getJsDocBuilderForNode().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getJSDocInfo().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isVarArgs().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isOptionalArg().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isSyntheticBlock().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getDirectives().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + wasEmptyNode().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + getSideEffectFlags().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isOnlyModifiesThisCall().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isNoSideEffectsCall().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isLocalResultCall().toStringTree();
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + isQuotedString().toStringTree();
02:03:30.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:31.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:31.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:32.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:32.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:33.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:33.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:34.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:34.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:35.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:35.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:36.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:36.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:37.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:37.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:38.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:38.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:39.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:39.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:40.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:40.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:41.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:41.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:42.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:42.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:43.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:43.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:44.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:44.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:45.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:45.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:46.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:46.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:47.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:47.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:48.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:48.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:49.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:49.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:50.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:50.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:51.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:51.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:52.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:52.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:53.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:53.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:53.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:53.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:54.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:54.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:55.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:55.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:56.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:56.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:57.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:57.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:58.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:58.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:59.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:03:59.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:00.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:00.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:01.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:01.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:02.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:02.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:03.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:03.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:04.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:04.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:05.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:05.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:06.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:06.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:07.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:07.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:08.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:08.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:09.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:09.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:10.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:10.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:11.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:11.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:12.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:12.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:13.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:13.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:14.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:14.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:15.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:15.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:16.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:16.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:17.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:17.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:18.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:18.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:19.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:19.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:20.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:20.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:21.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:21.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:22.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:22.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:23.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:23.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:24.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:24.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:25.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:25.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:26.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:26.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:27.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:27.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:28.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:28.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:29.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:29.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:30.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:30.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:31.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:31.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:32.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:32.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:33.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:33.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:34.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:34.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:35.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:35.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:36.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:36.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:37.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:37.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:38.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:38.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:39.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:39.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:40.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:40.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:41.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:41.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:42.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:42.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:43.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:43.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:44.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:44.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:45.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:45.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:46.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:46.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:47.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:47.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:47.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:47.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:48.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:48.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:49.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:49.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:50.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:50.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:51.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:51.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:52.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:52.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:53.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:53.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:54.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:54.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:55.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:55.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:56.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:56.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:57.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:57.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:58.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:58.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:59.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:04:59.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:00.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:00.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:01.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:01.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:02.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:02.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:03.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:03.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:04.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:04.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:05.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:05.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:06.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:06.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:07.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:07.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:08.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:08.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:09.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:09.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:09.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:09.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:10.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:10.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:11.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:11.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:12.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:12.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:13.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:13.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:14.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:14.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:15.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:15.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:16.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:16.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:17.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:17.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:18.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:18.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:19.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:19.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:20.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:20.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:21.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:21.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:22.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:22.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:23.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:23.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:24.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:24.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:25.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:25.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:26.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:26.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:27.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:27.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:28.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:28.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:29.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:29.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:30.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:30.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:31.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:31.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:32.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:32.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:33.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:33.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:34.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:34.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:35.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:35.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:36.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:36.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:37.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:37.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:38.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:38.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:39.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:39.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:40.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:40.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:41.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:41.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:42.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:42.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:43.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:43.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:44.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:44.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:45.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:45.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:46.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:46.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:47.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:47.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:48.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:48.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:49.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:49.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:50.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:50.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:50.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:50.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:51.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:51.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:52.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:52.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:53.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:53.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:54.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:54.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:55.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:55.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:56.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:56.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:57.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:57.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:58.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:58.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:59.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:05:59.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:00.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:00.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:01.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:01.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:02.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:02.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:03.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:03.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:04.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:04.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:05.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:05.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:06.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:06.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:07.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:07.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:08.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:08.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:09.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:09.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:10.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:10.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:11.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:11.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:12.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:12.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:13.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:13.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:14.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:14.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:15.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:15.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:16.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:16.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:17.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:17.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:18.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:18.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:19.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:19.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:20.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:20.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:21.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:21.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:22.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:22.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:23.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:23.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:24.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:24.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:25.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:25.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:26.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:26.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:27.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:27.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:28.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:28.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:29.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:29.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:30.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:30.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:31.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:31.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:32.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:32.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:33.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:33.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:33.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:33.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:34.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:34.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:35.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:35.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:36.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:36.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:37.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:37.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:38.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:38.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:39.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:39.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:40.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:40.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:41.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:41.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:42.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:42.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:43.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:43.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:44.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:44.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:45.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:45.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:46.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:46.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:47.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:47.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:48.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:48.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:49.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:49.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:50.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:50.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:51.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:51.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:52.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:52.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:53.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:53.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:54.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:54.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:55.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:55.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:55.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:55.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:56.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:56.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:57.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:57.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:58.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:58.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:59.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:06:59.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:00.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:00.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:01.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:01.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:02.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:02.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:03.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:03.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:04.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:04.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:05.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:05.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:06.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:06.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:07.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:07.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:08.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:08.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:09.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:09.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:10.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:10.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:11.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:11.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:12.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:12.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:13.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:13.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:14.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:14.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:15.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:15.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:16.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:16.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:17.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:17.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:18.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:18.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:19.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:19.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:20.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:20.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:21.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:21.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:22.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:22.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:23.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:23.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:24.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:24.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:25.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:25.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:26.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:26.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:27.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:27.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:28.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:28.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:29.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:29.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:30.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:30.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:31.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:31.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:32.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:32.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:33.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:33.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:34.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:34.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:35.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:35.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:35.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:35.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:36.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:36.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:37.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:37.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:38.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:38.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:39.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:39.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:40.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:40.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:41.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:41.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:42.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:42.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:43.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:43.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:44.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:44.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:45.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:45.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:46.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:46.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:47.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:47.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:48.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:48.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:49.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:49.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:50.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:50.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:51.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:51.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:52.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:52.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:53.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:53.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:54.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:54.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:55.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:55.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:56.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:56.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:57.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:57.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:58.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:58.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:59.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:07:59.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:00.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:00.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:01.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:01.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:02.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:02.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:03.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:03.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:04.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:04.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:04.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:04.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:05.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:05.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:06.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:06.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:07.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:07.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:08.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:08.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:09.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:09.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:10.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:10.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:11.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:11.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:12.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:12.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:13.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:13.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:14.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:14.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:15.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:15.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:17.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:17.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:18.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:18.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:18.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:19.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:20.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:20.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:20.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:20.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:21.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:21.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:22.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:22.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:23.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:23.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:24.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:24.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:25.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:25.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:26.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:26.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:27.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:27.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:28.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:28.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:29.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:29.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:30.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:30.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:31.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:31.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:32.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:32.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:33.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:33.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:34.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:34.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:35.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:35.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:36.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:36.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:37.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:37.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:38.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:38.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:39.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:39.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:40.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:40.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:41.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:41.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:42.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:42.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:43.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:43.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:44.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:44.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:45.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:45.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:46.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:46.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:47.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:47.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:48.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:48.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:48.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:48.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:49.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:49.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:50.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:50.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:51.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:51.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:52.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:52.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:53.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:53.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:54.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:54.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:55.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:55.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:56.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:56.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:57.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:57.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:58.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:58.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:59.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:08:59.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:00.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:00.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:01.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:01.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:02.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:02.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:03.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:03.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:04.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:04.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:05.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:05.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:06.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:06.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:07.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:07.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:08.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:08.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:09.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:09.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:10.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:10.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:11.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:11.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:12.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:12.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:13.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:13.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:14.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:14.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:15.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:15.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:16.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:16.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:17.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:17.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:18.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:18.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:19.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:19.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:20.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:20.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:21.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:21.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:22.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:22.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:23.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:23.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:24.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:24.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:25.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:25.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:26.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:26.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:27.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:27.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:28.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:28.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:29.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:29.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:30.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:30.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:31.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:31.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:32.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:32.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:32.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:32.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:33.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:33.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:34.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:34.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:35.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:35.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:36.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:36.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:37.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:37.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:38.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:38.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:39.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:39.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:40.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:40.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:41.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:41.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:42.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:42.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:43.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:43.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:44.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:44.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:45.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:45.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:46.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:46.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:47.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:47.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:48.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:48.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:49.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:49.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:50.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:50.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:51.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:51.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:52.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:52.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:53.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:53.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:54.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:54.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:55.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:55.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:56.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:56.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:57.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:57.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:57.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:57.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:58.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:58.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:59.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:09:59.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:00.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:00.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:01.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:01.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:02.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:02.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:03.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:03.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:04.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:04.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:05.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:05.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:06.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:06.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:07.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:07.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:08.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:08.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:09.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:09.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:10.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:10.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:11.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:11.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:12.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:12.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:13.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:13.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:14.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:14.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:15.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:15.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:16.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:16.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:17.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:17.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:18.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:18.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:19.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:19.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:20.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:20.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:21.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:21.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:22.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:22.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:23.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:23.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:24.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:24.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:25.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:25.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:26.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:26.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:27.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:27.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:28.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:28.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:29.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:29.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:30.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:30.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:31.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:31.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:32.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:32.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:33.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:33.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:34.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:34.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:35.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:35.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:36.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:36.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:37.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:37.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:38.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:38.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:39.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:39.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:39.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:39.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:40.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:40.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:41.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:41.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:42.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:42.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:43.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:43.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:44.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:44.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:45.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:45.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:46.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:46.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:47.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:47.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:48.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:48.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:49.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:49.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:50.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:50.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:51.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:51.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:52.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:52.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:53.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:53.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:54.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:54.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:55.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:55.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:56.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:56.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:57.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:57.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:58.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:58.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:10:59.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:10:59.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:00.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:00.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:01.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:01.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:02.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:02.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:03.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:03.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:04.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:04.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:05.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:05.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:06.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:06.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:07.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:07.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:08.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:08.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:09.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:09.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:10.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:10.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:11.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:11.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:12.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:12.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:13.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:13.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:14.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:14.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:15.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:15.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:16.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:16.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:17.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:17.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:18.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:18.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:19.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:19.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:20.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:20.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:21.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:21.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:22.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:22.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:23.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:23.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:24.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:24.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:25.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:25.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:26.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:26.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:27.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:27.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:28.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:28.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:29.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:29.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:30.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:30.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:31.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:31.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:32.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:32.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:33.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:33.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:34.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:34.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:35.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:35.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:36.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:36.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:37.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:37.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:38.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:38.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:39.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:39.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:40.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:40.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:41.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:41.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:42.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:42.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:43.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:43.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:43.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:43.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:44.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:44.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:45.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:45.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:46.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:46.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:47.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:47.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:48.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:48.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:49.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:49.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:50.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:50.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:51.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:51.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:52.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:52.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:53.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:53.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:54.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:54.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:55.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:55.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:56.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:56.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:57.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:57.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:58.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:58.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:11:59.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:11:59.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:00.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:00.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:01.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:01.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:02.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:02.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:03.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:03.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:04.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:04.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:05.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:05.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:06.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:06.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:07.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:07.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:07.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:07.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:08.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:08.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:09.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:09.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:10.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:10.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:11.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:11.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:12.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:12.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:13.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:13.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:14.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:14.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:15.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:15.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:16.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:16.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:17.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:17.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:18.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:18.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:19.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:19.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:20.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:20.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:21.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:21.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:22.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:22.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:23.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:23.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:24.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:24.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:25.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:25.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:26.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:26.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:27.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:27.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:28.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:28.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:29.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:29.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:30.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:30.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:31.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:31.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:32.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:32.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:33.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:33.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:34.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:34.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:35.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:35.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:36.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:36.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:37.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:37.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:38.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:38.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:39.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:39.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:40.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:40.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:41.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:41.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:42.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:42.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:43.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:43.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:44.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:44.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:45.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:45.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:46.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:46.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:47.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:47.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:48.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
return elem;
return prev;
return functionName;
return arrayNode;
return right;
return callTarget;
02:12:48.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:49.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:49.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:50.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:50.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:50.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:50.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:51.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:51.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:52.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:52.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:53.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(node);
reportCodeChange(kJoinOverhead);
reportCodeChange(foldedStringNode);
reportCodeChange(emptyStringNode);
reportCodeChange(originalSize);
reportCodeChange(elem);
reportCodeChange(prev);
reportCodeChange(foldedSize);
reportCodeChange(sb);
reportCodeChange(arrayFoldedChildren);
reportCodeChange(joinString);
reportCodeChange(functionName);
reportCodeChange(arrayNode);
reportCodeChange(right);
reportCodeChange(callTarget);
reportCodeChange(n);
reportCodeChange(ROOT_LOCALE);
reportCodeChange(true);
reportCodeChange(false);
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
02:12:53.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:54.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:54.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:55.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:55.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:56.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:56.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:57.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:57.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:57.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:57.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:58.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:58.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:12:59.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:12:59.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:00.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:00.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:01.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:01.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:02.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:02.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:03.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:03.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:04.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:04.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:04.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:04.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:05.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:05.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:06.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:06.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:07.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:07.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:08.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:08.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:09.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:09.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:10.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:10.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:11.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:11.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:12.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:12.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:12.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.addChildToBack(kJoinOverhead);
arrayNode.addChildToBack(foldedStringNode);
arrayNode.addChildToBack(emptyStringNode);
arrayNode.addChildToBack(originalSize);
arrayNode.addChildToBack(elem);
arrayNode.addChildToBack(prev);
arrayNode.addChildToBack(foldedSize);
arrayNode.addChildToBack(sb);
arrayNode.addChildToBack(arrayFoldedChildren);
arrayNode.addChildToBack(joinString);
arrayNode.addChildToBack(functionName);
arrayNode.addChildToBack(right);
arrayNode.addChildToBack(callTarget);
arrayNode.addChildToBack(n);
arrayNode.addChildToBack(ROOT_LOCALE);
arrayNode.addChildToBack();
arrayNode.addChildToBack(kJoinOverhead, node);
arrayNode.addChildToBack(foldedStringNode, node);
arrayNode.addChildToBack(emptyStringNode, node);
arrayNode.addChildToBack(originalSize, node);
arrayNode.addChildToBack(elem, node);
arrayNode.addChildToBack(prev, node);
arrayNode.addChildToBack(foldedSize, node);
arrayNode.addChildToBack(sb, node);
arrayNode.addChildToBack(arrayFoldedChildren, node);
arrayNode.addChildToBack(joinString, node);
arrayNode.addChildToBack(functionName, node);
arrayNode.addChildToBack(right, node);
arrayNode.addChildToBack(callTarget, node);
arrayNode.addChildToBack(n, node);
arrayNode.addChildToBack(ROOT_LOCALE, node);
arrayNode.addChildToBack(node, kJoinOverhead);
arrayNode.addChildToBack(node, foldedStringNode);
arrayNode.addChildToBack(node, emptyStringNode);
arrayNode.addChildToBack(node, originalSize);
arrayNode.addChildToBack(node, elem);
arrayNode.addChildToBack(node, prev);
arrayNode.addChildToBack(node, foldedSize);
arrayNode.addChildToBack(node, sb);
arrayNode.addChildToBack(node, arrayFoldedChildren);
arrayNode.addChildToBack(node, joinString);
arrayNode.addChildToBack(node, functionName);
arrayNode.addChildToBack(node, right);
arrayNode.addChildToBack(node, callTarget);
arrayNode.addChildToBack(node, n);
arrayNode.addChildToBack(node, ROOT_LOCALE);
arrayNode.addChildToBack(true, node);
arrayNode.addChildToBack(false, node);
arrayNode.addChildToBack(node, true);
arrayNode.addChildToBack(node, false);
arrayNode.getChildBefore(node);
arrayNode.clonePropsFrom(node);
arrayNode.removeChildAfter(node);
arrayNode.copyInformationFrom(node);
arrayNode.copyInformationFromForTree(node);
arrayNode.useSourceInfoFrom(node);
arrayNode.useSourceInfoFromForTree(node);
arrayNode.useSourceInfoIfMissingFrom(node);
arrayNode.useSourceInfoIfMissingFromForTree(node);
arrayNode.checkTreeEquals(node);
arrayNode.getIndexOfChild(node);
arrayNode.getNodeClass(node);
arrayNode.addChildToFront(node);
arrayNode.addChildrenToFront(node);
arrayNode.addChildrenToBack(node);
arrayNode.removeChild(node);
arrayNode.hasChild(node);
arrayNode.isEquivalentTo(node);
arrayNode.isEquivalentToTyped(node);
arrayNode.checkTreeEqualsImpl(node);
arrayNode.checkTreeTypeAwareEqualsImpl(node);
02:13:12.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:13.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:13.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:14.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:14.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:15.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:15.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:16.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:16.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:17.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:17.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:18.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:18.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:19.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:19.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:20.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:20.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:21.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:21.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:21.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:21.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:22.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:22.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:23.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:23.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:24.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:24.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:25.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:25.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:26.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:26.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:27.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:27.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:28.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:28.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:28.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:28.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:29.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:29.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:30.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:30.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:31.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:31.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:32.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:32.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:33.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:33.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:34.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:34.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:34.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:34.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:35.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:35.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:36.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:36.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:37.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:37.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:38.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:38.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:39.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:39.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:40.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:40.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:40.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:40.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:41.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:41.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:42.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:42.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:43.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:43.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:44.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:44.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:45.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:45.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:46.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:46.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:46.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:46.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:47.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:47.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:48.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:48.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:49.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:49.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:50.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:50.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:51.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:51.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:52.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:52.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:52.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:52.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:53.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:53.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:54.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:54.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:55.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:55.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:56.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:56.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:57.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:57.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:58.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:58.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:58.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:58.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:13:59.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:13:59.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:00.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:00.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:01.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:01.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:02.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:02.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:03.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:03.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:04.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:04.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:04.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:04.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:05.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:05.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:06.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:06.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:07.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:07.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:08.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:08.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:09.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:09.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:10.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:10.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:11.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:11.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:11.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:11.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:12.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:12.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:13.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:13.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:14.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.detachChildren(kJoinOverhead);
arrayNode.detachChildren(foldedStringNode);
arrayNode.detachChildren(emptyStringNode);
arrayNode.detachChildren(originalSize);
arrayNode.detachChildren(elem);
arrayNode.detachChildren(prev);
arrayNode.detachChildren(foldedSize);
arrayNode.detachChildren(sb);
arrayNode.detachChildren(arrayFoldedChildren);
arrayNode.detachChildren(joinString);
arrayNode.detachChildren(functionName);
arrayNode.detachChildren(right);
arrayNode.detachChildren(callTarget);
arrayNode.detachChildren(n);
arrayNode.detachChildren(ROOT_LOCALE);
arrayNode.detachChildren(true);
arrayNode.detachChildren(false);
arrayNode.getInputId();
arrayNode.children();
arrayNode.siblings();
arrayNode.getJSDocInfo();
arrayNode.getAncestors();
arrayNode.getFirstChild();
arrayNode.getLastChild();
arrayNode.getNext();
arrayNode.getLastSibling();
arrayNode.getParent();
arrayNode.detachFromParent();
arrayNode.removeFirstChild();
arrayNode.removeChildren();
arrayNode.cloneNode();
arrayNode.cloneTree();
arrayNode.getJSType();
arrayNode.getString();
arrayNode.toString();
arrayNode.toStringTree();
arrayNode.toStringTreeImpl();
arrayNode.getSourceFileName();
arrayNode.getQualifiedName();
arrayNode.getType();
arrayNode.getLength();
arrayNode.getLineno();
arrayNode.getCharno();
arrayNode.getSourceOffset();
arrayNode.getSourcePosition();
arrayNode.getChildCount();
arrayNode.getSideEffectFlags();
arrayNode.getPropListHeadForTesting();
arrayNode.getSortedPropTypes();
arrayNode.setQuotedString();
arrayNode.hasChildren();
arrayNode.isFromExterns();
arrayNode.hasOneChild();
arrayNode.hasMoreThanOneChild();
arrayNode.hasSideEffects();
arrayNode.isQualifiedName();
arrayNode.isUnscopedQualifiedName();
arrayNode.isVarArgs();
arrayNode.isOptionalArg();
arrayNode.isSyntheticBlock();
arrayNode.wasEmptyNode();
arrayNode.isOnlyModifiesThisCall();
arrayNode.isNoSideEffectsCall();
arrayNode.isLocalResultCall();
arrayNode.isQuotedString();
arrayNode.getDirectives();
arrayNode.getStaticSourceFile();
arrayNode.getDouble();
arrayNode.getJsDocBuilderForNode();
02:14:14.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:15.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:15.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:16.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:16.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:17.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:17.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:18.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:18.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:19.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:19.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:20.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:20.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:20.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:20.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:21.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:21.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:22.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:22.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:23.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:23.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:24.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:24.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:25.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:25.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:26.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:26.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:27.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:27.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:28.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:28.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:28.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:28.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:29.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:29.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:30.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:30.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:31.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:31.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:32.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:32.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:33.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:33.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:34.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:34.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:35.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:35.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:35.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:35.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:36.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:36.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:37.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:37.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:38.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:38.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:39.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:39.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:40.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:40.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:41.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:41.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:41.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:41.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:42.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:42.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:43.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:43.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:44.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:44.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:45.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:45.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:46.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:46.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:47.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:47.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:47.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:47.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:48.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:48.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:49.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:49.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:50.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:50.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:51.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:51.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:52.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:52.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:53.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:53.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:53.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:53.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:54.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:54.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:55.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:55.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:56.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:56.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:57.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:57.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:58.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:58.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:14:59.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:14:59.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:00.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:00.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:00.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:00.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:01.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:01.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:02.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:02.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:03.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:03.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:04.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:04.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:05.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:05.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:06.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:06.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:06.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:06.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:07.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:07.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:08.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:08.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:09.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:09.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:10.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:10.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:11.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:11.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:12.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:12.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:12.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:12.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:13.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:13.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:14.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(
              elem, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              prev, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              foldedSize, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              sb, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              joinString, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              functionName, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              arrayNode, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              right, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              callTarget, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              n, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              ROOT_LOCALE, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), elem);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), prev);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), foldedSize);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), sb);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), joinString);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), functionName);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), arrayNode);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), right);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), callTarget);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), n);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), ROOT_LOCALE);
arrayFoldedChildren.add(
              true, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              false, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), true);
arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev), false);
02:15:14.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:15.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:15.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:16.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:16.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:17.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:17.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:18.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:18.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:19.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:19.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:20.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:20.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:21.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:21.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:21.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:21.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:22.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:22.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:23.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:23.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:24.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:24.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:25.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:25.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:26.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:26.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:27.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:27.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:28.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:28.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:29.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:29.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:29.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:29.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:30.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:30.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:31.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:31.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:32.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:32.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:33.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:33.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:34.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:34.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:35.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:35.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:36.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:36.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:36.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:36.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:37.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkNotNull(elem);
Preconditions.checkNotNull(foldedSize);
Preconditions.checkNotNull(sb);
Preconditions.checkNotNull(arrayFoldedChildren);
Preconditions.checkNotNull(joinString);
Preconditions.checkNotNull(functionName);
Preconditions.checkNotNull(arrayNode);
Preconditions.checkNotNull(right);
Preconditions.checkNotNull(callTarget);
Preconditions.checkNotNull(n);
Preconditions.checkNotNull(ROOT_LOCALE);
Preconditions.checkNotNull();
Preconditions.checkNotNull(elem, prev);
Preconditions.checkNotNull(foldedSize, prev);
Preconditions.checkNotNull(sb, prev);
Preconditions.checkNotNull(arrayFoldedChildren, prev);
Preconditions.checkNotNull(joinString, prev);
Preconditions.checkNotNull(functionName, prev);
Preconditions.checkNotNull(arrayNode, prev);
Preconditions.checkNotNull(right, prev);
Preconditions.checkNotNull(callTarget, prev);
Preconditions.checkNotNull(n, prev);
Preconditions.checkNotNull(ROOT_LOCALE, prev);
Preconditions.checkNotNull(prev, elem);
Preconditions.checkNotNull(prev, foldedSize);
Preconditions.checkNotNull(prev, sb);
Preconditions.checkNotNull(prev, arrayFoldedChildren);
Preconditions.checkNotNull(prev, joinString);
Preconditions.checkNotNull(prev, functionName);
Preconditions.checkNotNull(prev, arrayNode);
Preconditions.checkNotNull(prev, right);
Preconditions.checkNotNull(prev, callTarget);
Preconditions.checkNotNull(prev, n);
Preconditions.checkNotNull(prev, ROOT_LOCALE);
Preconditions.checkNotNull(true, prev);
Preconditions.checkNotNull(false, prev);
Preconditions.checkNotNull(prev, true);
Preconditions.checkNotNull(prev, false);
02:15:37.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:38.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:38.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:39.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:39.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:40.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:40.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:41.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:41.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:42.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:42.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:43.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:43.031 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:43.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:43.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:44.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:44.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:45.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:45.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:46.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:46.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:47.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:47.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:48.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:48.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:48.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:48.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:49.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:49.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:50.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:50.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:51.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:51.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:52.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:52.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:53.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:53.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:54.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:54.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:54.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:54.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:55.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:55.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:56.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:56.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:57.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:57.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:58.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:58.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:15:59.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:15:59.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:00.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:00.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:00.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:00.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:01.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:01.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:02.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:02.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:03.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:03.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:04.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:04.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:05.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:05.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:06.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:06.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:06.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:06.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:07.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:07.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:08.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:08.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:09.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:09.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:10.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
switch (arrayFoldedChildren.size(originalSize)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(elem)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(prev)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(foldedSize)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(sb)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(joinString)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(functionName)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(arrayNode)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(right)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(callTarget)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(n)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(ROOT_LOCALE)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(true)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
switch (arrayFoldedChildren.size(false)) {
      case 0:
        Node emptyStringNode = Node.newString("");
        n.getParent().replaceChild(n, emptyStringNode);
        reportCodeChange();
        return emptyStringNode;
      case 1:
        Node foldedStringNode = arrayFoldedChildren.remove(0);
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        if (foldedStringNode.getType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
        n.getParent().replaceChild(n, foldedStringNode);
        reportCodeChange();
        return foldedStringNode;
      default:
        // No folding could actually be performed.
        if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {
          return n;
        }
        int kJoinOverhead = "[].join()".length();
        foldedSize += kJoinOverhead;
        foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
        if (foldedSize > originalSize) {
          return n;
        }
        arrayNode.detachChildren();
        for (Node node : arrayFoldedChildren) {
          arrayNode.addChildToBack(node);
        }
        reportCodeChange();
        break;
    }
02:16:10.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:11.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:11.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:12.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:12.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:13.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:13.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:14.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:14.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:14.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:14.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:15.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:15.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:16.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:16.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:17.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:17.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:18.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:18.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:19.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:19.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:20.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:20.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:21.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:21.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:21.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:21.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:22.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
int foldedSize = InlineCostEstimator.getCost(n);
02:16:22.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:23.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
while (prev != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
while (functionName != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
while (arrayNode != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
while (right != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
while (callTarget != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
while (n != null) {
      if (NodeUtil.isImmutableValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
      prev = elem;
      elem = elem.getNext();
    }
02:16:23.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:24.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:24.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:25.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:25.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:26.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:26.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:27.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:27.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:28.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:28.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:28.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node prev = arrayNode.getFirstChild();
Node functionName = arrayNode.getFirstChild();
Node arrayNode = arrayNode.getFirstChild();
Node right = arrayNode.getFirstChild();
Node callTarget = arrayNode.getFirstChild();
Node n = arrayNode.getFirstChild();
02:16:28.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:29.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:29.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:30.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:30.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:31.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:31.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:32.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:32.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:33.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:33.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:34.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node functionName = null;
Node arrayNode = null;
Node right = null;
Node callTarget = null;
Node n = null;
02:16:34.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:35.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:35.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:35.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:35.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:36.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:36.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:37.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:37.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:38.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
String joinString = (functionName == null) ? "," : NodeUtil.getStringValue(right);
String joinString = (arrayNode == null) ? "," : NodeUtil.getStringValue(right);
String joinString = (callTarget == null) ? "," : NodeUtil.getStringValue(right);
String joinString = (n == null) ? "," : NodeUtil.getStringValue(right);
02:16:38.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:39.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:39.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:40.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:40.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:41.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:41.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:41.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (kJoinOverhead > originalSize) {
          return n;
        }
if (originalSize > originalSize) {
          return n;
        }
if (foldedSize > kJoinOverhead) {
          return n;
        }
02:16:41.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:42.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:42.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:43.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:43.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:44.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
kJoinOverhead += (right != null) ? InlineCostEstimator.getCost(right) : 0;
originalSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (foldedStringNode != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (emptyStringNode != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (elem != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (prev != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (functionName != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (arrayNode != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (callTarget != null) ? InlineCostEstimator.getCost(right) : 0;
foldedSize += (n != null) ? InlineCostEstimator.getCost(right) : 0;
02:16:44.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:45.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:45.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:46.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:46.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:47.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:47.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:48.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:48.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:48.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:48.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:49.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:49.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:50.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:50.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:51.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:51.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:52.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:52.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:53.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
kJoinOverhead += kJoinOverhead;
originalSize += kJoinOverhead;
foldedSize += originalSize;
02:16:53.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:53.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:53.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:54.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:54.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:55.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
int originalSize = "[].join()".length();
int foldedSize = "[].join()".length();
02:16:55.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:56.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:56.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:57.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
return foldedStringNode;
return emptyStringNode;
return elem;
return prev;
return functionName;
return arrayNode;
return right;
return callTarget;
02:16:57.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:58.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:58.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:16:59.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:16:59.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:00.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:00.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:00.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:00.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:01.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:01.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:02.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:02.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:03.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:03.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:04.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (arrayFoldedChildren.size(foldedStringNode) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(emptyStringNode) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(originalSize) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(elem) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(prev) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(foldedSize) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(sb) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(joinString) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(functionName) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(arrayNode) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(right) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(callTarget) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(n) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(ROOT_LOCALE) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(true) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size(false) == arrayNode.getChildCount()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(foldedStringNode)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(emptyStringNode)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(originalSize)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(elem)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(prev)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(foldedSize)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(sb)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(arrayFoldedChildren)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(joinString)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(functionName)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(right)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(callTarget)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(n)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(ROOT_LOCALE)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(true)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getChildCount(false)) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getAncestors()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getJSType()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getType()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getLength()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getLineno()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getCharno()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getSourceOffset()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getSourcePosition()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getSideEffectFlags()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getSortedPropTypes()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getPropListHeadForTesting()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.detachChildren()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.setQuotedString()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getDouble()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getStaticSourceFile()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getInputId()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.children()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.siblings()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getJSDocInfo()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getFirstChild()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getLastChild()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getNext()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getLastSibling()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getParent()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.detachFromParent()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.removeFirstChild()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.removeChildren()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.cloneNode()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.cloneTree()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getString()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.toString()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.toStringTree()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.toStringTreeImpl()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getSourceFileName()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getQualifiedName()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.hasChildren()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isFromExterns()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.hasOneChild()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.hasMoreThanOneChild()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.hasSideEffects()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isQualifiedName()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isUnscopedQualifiedName()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isVarArgs()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isOptionalArg()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isSyntheticBlock()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.wasEmptyNode()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isOnlyModifiesThisCall()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isNoSideEffectsCall()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isLocalResultCall()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.isQuotedString()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getDirectives()) {
          return n;
        }
if (arrayFoldedChildren.size() == arrayNode.getJsDocBuilderForNode()) {
          return n;
        }
02:17:04.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:05.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:05.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:06.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:06.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:07.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:07.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:07.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:07.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:08.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:08.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:09.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:09.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:10.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:10.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:11.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:11.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:12.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:12.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:13.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:13.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:14.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:14.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:15.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:15.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:15.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:15.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:16.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:16.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:17.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:17.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:18.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:18.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:19.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:19.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:20.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:20.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:21.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:21.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:22.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:22.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:23.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:23.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:23.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:23.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:24.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:24.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:25.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:25.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:26.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:26.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:27.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:27.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:28.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:28.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:29.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:29.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:30.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:30.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:30.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:30.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:31.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:31.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:32.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:32.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:33.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:33.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:34.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:34.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:35.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:35.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:36.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:36.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:36.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:36.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:37.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:37.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:38.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:38.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:39.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:39.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:40.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:40.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:41.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:41.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:42.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:42.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:43.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:43.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:43.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:43.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:44.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:44.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:45.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:45.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:46.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:46.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:47.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:47.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:48.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:48.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:49.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:49.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:49.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:49.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:50.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:50.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:51.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:51.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:52.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:52.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:53.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:53.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:54.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:54.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:55.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:55.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:56.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:56.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:56.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:56.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:57.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:57.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:58.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:58.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:17:59.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:17:59.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:00.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:00.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:01.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:01.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:02.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:02.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:03.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:03.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:03.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:03.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:04.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:04.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:05.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:05.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:06.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:06.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:07.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:07.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:08.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:08.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:09.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:09.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:10.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:10.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:11.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:11.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:11.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:11.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:12.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:12.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:13.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:13.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:14.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:14.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:15.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:15.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:16.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:16.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:17.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:17.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:18.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(prev);
arrayFoldedChildren.add(foldedSize);
arrayFoldedChildren.add(sb);
arrayFoldedChildren.add(joinString);
arrayFoldedChildren.add(functionName);
arrayFoldedChildren.add(arrayNode);
arrayFoldedChildren.add(right);
arrayFoldedChildren.add(callTarget);
arrayFoldedChildren.add(n);
arrayFoldedChildren.add(ROOT_LOCALE);
arrayFoldedChildren.add();
arrayFoldedChildren.add(prev, elem);
arrayFoldedChildren.add(foldedSize, elem);
arrayFoldedChildren.add(sb, elem);
arrayFoldedChildren.add(joinString, elem);
arrayFoldedChildren.add(functionName, elem);
arrayFoldedChildren.add(arrayNode, elem);
arrayFoldedChildren.add(right, elem);
arrayFoldedChildren.add(callTarget, elem);
arrayFoldedChildren.add(n, elem);
arrayFoldedChildren.add(ROOT_LOCALE, elem);
arrayFoldedChildren.add(elem, prev);
arrayFoldedChildren.add(elem, foldedSize);
arrayFoldedChildren.add(elem, sb);
arrayFoldedChildren.add(elem, joinString);
arrayFoldedChildren.add(elem, functionName);
arrayFoldedChildren.add(elem, arrayNode);
arrayFoldedChildren.add(elem, right);
arrayFoldedChildren.add(elem, callTarget);
arrayFoldedChildren.add(elem, n);
arrayFoldedChildren.add(elem, ROOT_LOCALE);
arrayFoldedChildren.add(true, elem);
arrayFoldedChildren.add(false, elem);
arrayFoldedChildren.add(elem, true);
arrayFoldedChildren.add(elem, false);
02:18:18.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:19.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:19.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:20.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:20.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:20.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:20.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:21.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:21.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:22.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:22.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:23.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:23.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:24.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:24.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:25.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:25.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:26.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:26.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:27.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:27.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:27.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:27.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:28.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:28.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:29.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:29.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:30.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:30.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:31.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:31.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:32.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:32.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:33.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:33.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:34.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:34.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:34.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:34.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:35.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:35.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:36.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:36.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:37.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:37.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:38.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:38.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:39.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:39.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:40.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:40.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:41.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:41.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:41.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:41.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:42.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:42.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:43.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:43.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:44.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:44.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:45.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:45.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:46.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:46.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:47.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:47.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:47.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:47.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:48.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
sb.append(elem);
sb.append(prev);
sb.append(foldedSize);
sb.append(arrayFoldedChildren);
sb.append(functionName);
sb.append(arrayNode);
sb.append(right);
sb.append(callTarget);
sb.append(n);
sb.append(ROOT_LOCALE);
sb.append();
sb.append(elem, joinString);
sb.append(prev, joinString);
sb.append(foldedSize, joinString);
sb.append(arrayFoldedChildren, joinString);
sb.append(functionName, joinString);
sb.append(arrayNode, joinString);
sb.append(right, joinString);
sb.append(callTarget, joinString);
sb.append(n, joinString);
sb.append(ROOT_LOCALE, joinString);
sb.append(joinString, elem);
sb.append(joinString, prev);
sb.append(joinString, foldedSize);
sb.append(joinString, arrayFoldedChildren);
sb.append(joinString, functionName);
sb.append(joinString, arrayNode);
sb.append(joinString, right);
sb.append(joinString, callTarget);
sb.append(joinString, n);
sb.append(joinString, ROOT_LOCALE);
sb.append(true, joinString);
sb.append(false, joinString);
sb.append(joinString, true);
sb.append(joinString, false);
02:18:48.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:49.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:49.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:50.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:50.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:51.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:51.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:52.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:52.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:53.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:53.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:54.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:54.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:54.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:54.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:55.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:55.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:56.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:56.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:57.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:57.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:58.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:58.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:18:59.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:18:59.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:00.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:00.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:00.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:00.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:01.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:01.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:02.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:02.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:03.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:03.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:04.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:04.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:05.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:05.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:06.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:06.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:07.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:07.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:07.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:07.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:08.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:08.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:09.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:09.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:10.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:10.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:11.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:11.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:12.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:12.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:13.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:13.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:14.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:14.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:15.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:15.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:16.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:16.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:17.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:17.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:17.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:17.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:18.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:18.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:19.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
return emptyStringNode;
return elem;
return prev;
return functionName;
return arrayNode;
return right;
return callTarget;
return n;
02:19:19.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:20.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:20.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:21.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:21.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:22.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:22.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:23.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:23.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:24.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:24.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:24.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:24.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:25.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:25.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:26.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(foldedStringNode);
reportCodeChange(emptyStringNode);
reportCodeChange(originalSize);
reportCodeChange(elem);
reportCodeChange(prev);
reportCodeChange(foldedSize);
reportCodeChange(sb);
reportCodeChange(arrayFoldedChildren);
reportCodeChange(joinString);
reportCodeChange(functionName);
reportCodeChange(arrayNode);
reportCodeChange(right);
reportCodeChange(callTarget);
reportCodeChange(n);
reportCodeChange(ROOT_LOCALE);
reportCodeChange(true);
reportCodeChange(false);
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
02:19:26.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:27.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:27.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:28.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:28.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:29.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:29.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:30.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:30.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:31.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:31.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:31.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:31.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:32.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:32.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:33.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:33.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:34.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:34.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:35.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:35.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:36.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:36.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:37.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:37.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:38.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:38.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:38.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:38.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:39.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:39.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:40.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:40.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:41.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:41.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:42.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:42.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:43.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:43.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:44.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
n.getParent().replaceChild(emptyStringNode, foldedStringNode);
n.getParent().replaceChild(originalSize, foldedStringNode);
n.getParent().replaceChild(elem, foldedStringNode);
n.getParent().replaceChild(prev, foldedStringNode);
n.getParent().replaceChild(foldedSize, foldedStringNode);
n.getParent().replaceChild(sb, foldedStringNode);
n.getParent().replaceChild(arrayFoldedChildren, foldedStringNode);
n.getParent().replaceChild(joinString, foldedStringNode);
n.getParent().replaceChild(functionName, foldedStringNode);
n.getParent().replaceChild(arrayNode, foldedStringNode);
n.getParent().replaceChild(right, foldedStringNode);
n.getParent().replaceChild(callTarget, foldedStringNode);
n.getParent().replaceChild(ROOT_LOCALE, foldedStringNode);
n.getParent().replaceChild( foldedStringNode);
n.getParent().replaceChild(emptyStringNode, n, foldedStringNode);
n.getParent().replaceChild(originalSize, n, foldedStringNode);
n.getParent().replaceChild(elem, n, foldedStringNode);
n.getParent().replaceChild(prev, n, foldedStringNode);
n.getParent().replaceChild(foldedSize, n, foldedStringNode);
n.getParent().replaceChild(sb, n, foldedStringNode);
n.getParent().replaceChild(arrayFoldedChildren, n, foldedStringNode);
n.getParent().replaceChild(joinString, n, foldedStringNode);
n.getParent().replaceChild(functionName, n, foldedStringNode);
n.getParent().replaceChild(arrayNode, n, foldedStringNode);
n.getParent().replaceChild(right, n, foldedStringNode);
n.getParent().replaceChild(callTarget, n, foldedStringNode);
n.getParent().replaceChild(ROOT_LOCALE, n, foldedStringNode);
n.getParent().replaceChild(n, emptyStringNode);
n.getParent().replaceChild(n, originalSize);
n.getParent().replaceChild(n, elem);
n.getParent().replaceChild(n, prev);
n.getParent().replaceChild(n, foldedSize);
n.getParent().replaceChild(n, sb);
n.getParent().replaceChild(n, arrayFoldedChildren);
n.getParent().replaceChild(n, joinString);
n.getParent().replaceChild(n, functionName);
n.getParent().replaceChild(n, arrayNode);
n.getParent().replaceChild(n, right);
n.getParent().replaceChild(n, callTarget);
n.getParent().replaceChild(n, ROOT_LOCALE);
n.getParent().replaceChild(n, );
n.getParent().replaceChild(n, emptyStringNode, foldedStringNode);
n.getParent().replaceChild(n, originalSize, foldedStringNode);
n.getParent().replaceChild(n, elem, foldedStringNode);
n.getParent().replaceChild(n, prev, foldedStringNode);
n.getParent().replaceChild(n, foldedSize, foldedStringNode);
n.getParent().replaceChild(n, sb, foldedStringNode);
n.getParent().replaceChild(n, arrayFoldedChildren, foldedStringNode);
n.getParent().replaceChild(n, joinString, foldedStringNode);
n.getParent().replaceChild(n, functionName, foldedStringNode);
n.getParent().replaceChild(n, arrayNode, foldedStringNode);
n.getParent().replaceChild(n, right, foldedStringNode);
n.getParent().replaceChild(n, callTarget, foldedStringNode);
n.getParent().replaceChild(n, ROOT_LOCALE, foldedStringNode);
n.getParent().replaceChild(n, foldedStringNode, emptyStringNode);
n.getParent().replaceChild(n, foldedStringNode, originalSize);
n.getParent().replaceChild(n, foldedStringNode, elem);
n.getParent().replaceChild(n, foldedStringNode, prev);
n.getParent().replaceChild(n, foldedStringNode, foldedSize);
n.getParent().replaceChild(n, foldedStringNode, sb);
n.getParent().replaceChild(n, foldedStringNode, arrayFoldedChildren);
n.getParent().replaceChild(n, foldedStringNode, joinString);
n.getParent().replaceChild(n, foldedStringNode, functionName);
n.getParent().replaceChild(n, foldedStringNode, arrayNode);
n.getParent().replaceChild(n, foldedStringNode, right);
n.getParent().replaceChild(n, foldedStringNode, callTarget);
n.getParent().replaceChild(n, foldedStringNode, ROOT_LOCALE);
n.getParent().replaceChild(true, n, foldedStringNode);
n.getParent().replaceChild(false, n, foldedStringNode);
n.getParent().replaceChild(n, true, foldedStringNode);
n.getParent().replaceChild(n, false, foldedStringNode);
n.getParent().replaceChild(n, foldedStringNode, true);
n.getParent().replaceChild(n, foldedStringNode, false);
02:19:44.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:44.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:44.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:45.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:45.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:46.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:46.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:47.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:47.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:48.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:48.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:49.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:49.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:50.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:50.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:50.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:50.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:51.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:51.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:52.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:52.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:53.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:53.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:54.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:54.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:55.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:55.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:56.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:56.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:56.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:56.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:57.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:57.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:58.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:58.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:19:59.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:19:59.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:00.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:00.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:01.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:01.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:02.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:02.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:03.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:03.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:03.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:03.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:04.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:04.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:05.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:05.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:06.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:06.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:07.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:07.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:08.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:08.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:09.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:09.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:09.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:09.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:10.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:10.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:11.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:11.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:12.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:12.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:13.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:13.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:14.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:14.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:15.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:15.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:16.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:16.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:17.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:17.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:17.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:17.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:18.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:18.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:19.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:19.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:20.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:20.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:20.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:20.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:21.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:21.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:22.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:22.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:23.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:23.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:24.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:24.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:25.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:25.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:26.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:26.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:27.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:27.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:28.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:28.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:28.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:28.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:29.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:29.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:30.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:30.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:31.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:31.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:32.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:32.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:33.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:33.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:34.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:34.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:35.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:35.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:36.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:36.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:36.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:36.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:37.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:37.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:38.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:38.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:39.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:39.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:40.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:40.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:41.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:41.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:42.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:42.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:42.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:42.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:43.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:43.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:44.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:44.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:45.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:45.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:46.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:46.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:47.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (foldedStringNode.getType(emptyStringNode) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(originalSize) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(elem) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(prev) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(foldedSize) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(sb) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(arrayFoldedChildren) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(joinString) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(functionName) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(arrayNode) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(right) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(callTarget) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(n) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(ROOT_LOCALE) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(true) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getType(false) != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getAncestors() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getJSType() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getLength() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getLineno() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getCharno() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getSourceOffset() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getSourcePosition() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getChildCount() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getSideEffectFlags() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getSortedPropTypes() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getPropListHeadForTesting() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.detachChildren() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.setQuotedString() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getDouble() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getStaticSourceFile() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getInputId() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.children() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.siblings() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getJSDocInfo() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getFirstChild() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getLastChild() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getNext() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getLastSibling() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getParent() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.detachFromParent() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.removeFirstChild() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.removeChildren() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.cloneNode() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.cloneTree() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getString() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.toString() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.toStringTree() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.toStringTreeImpl() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getSourceFileName() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getQualifiedName() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.hasChildren() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isFromExterns() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.hasOneChild() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.hasMoreThanOneChild() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.hasSideEffects() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isQualifiedName() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isUnscopedQualifiedName() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isVarArgs() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isOptionalArg() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isSyntheticBlock() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.wasEmptyNode() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isOnlyModifiesThisCall() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isNoSideEffectsCall() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isLocalResultCall() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.isQuotedString() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getDirectives() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
if (foldedStringNode.getJsDocBuilderForNode() != Token.STRING) {
          // If the Node is not a string literal, ensure that
          // it is coerced to a string.
          Node replacement = new Node(Token.ADD,
              Node.newString("").copyInformationFrom(n),
              foldedStringNode);
          foldedStringNode = replacement;
        }
02:20:47.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:48.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:48.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:49.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:49.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:49.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:49.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:50.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:50.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:51.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:51.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:52.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:52.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:53.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:53.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:54.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:54.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:55.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:55.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:56.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:56.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:56.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:56.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:57.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:57.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:58.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:58.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:20:59.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:20:59.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:00.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:00.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:01.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:01.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:02.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:02.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:03.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:03.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:04.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:04.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:04.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:04.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:05.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:05.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:06.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:06.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:07.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:07.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:08.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:08.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:09.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:09.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:10.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:10.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:11.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:11.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:12.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:12.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:13.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:13.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:13.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:13.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:14.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:14.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:15.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:15.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:16.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:16.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:17.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:17.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:18.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:18.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:19.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:19.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:20.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:20.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:21.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:21.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:22.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:22.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:23.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:23.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:23.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:23.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:24.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:24.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:25.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:25.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:26.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:26.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:27.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:27.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:28.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:28.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:29.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:29.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:30.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:30.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:31.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:31.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:32.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:32.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:33.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:33.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:33.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:33.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:34.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:34.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:35.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:35.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:36.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:36.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:37.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:37.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:38.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:38.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:39.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:39.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:40.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:40.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:41.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:41.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:42.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:42.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:42.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:42.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:43.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:43.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:44.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:44.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:45.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:45.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:46.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:46.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:47.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:47.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:48.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayNode.detachChildren(foldedStringNode);
arrayNode.detachChildren(emptyStringNode);
arrayNode.detachChildren(originalSize);
arrayNode.detachChildren(elem);
arrayNode.detachChildren(prev);
arrayNode.detachChildren(foldedSize);
arrayNode.detachChildren(sb);
arrayNode.detachChildren(arrayFoldedChildren);
arrayNode.detachChildren(joinString);
arrayNode.detachChildren(functionName);
arrayNode.detachChildren(right);
arrayNode.detachChildren(callTarget);
arrayNode.detachChildren(n);
arrayNode.detachChildren(ROOT_LOCALE);
arrayNode.detachChildren(true);
arrayNode.detachChildren(false);
arrayNode.getInputId();
arrayNode.children();
arrayNode.siblings();
arrayNode.getJSDocInfo();
arrayNode.getAncestors();
arrayNode.getFirstChild();
arrayNode.getLastChild();
arrayNode.getNext();
arrayNode.getLastSibling();
arrayNode.getParent();
arrayNode.detachFromParent();
arrayNode.removeFirstChild();
arrayNode.removeChildren();
arrayNode.cloneNode();
arrayNode.cloneTree();
arrayNode.getJSType();
arrayNode.getString();
arrayNode.toString();
arrayNode.toStringTree();
arrayNode.toStringTreeImpl();
arrayNode.getSourceFileName();
arrayNode.getQualifiedName();
arrayNode.getType();
arrayNode.getLength();
arrayNode.getLineno();
arrayNode.getCharno();
arrayNode.getSourceOffset();
arrayNode.getSourcePosition();
arrayNode.getChildCount();
arrayNode.getSideEffectFlags();
arrayNode.getPropListHeadForTesting();
arrayNode.getSortedPropTypes();
arrayNode.setQuotedString();
arrayNode.hasChildren();
arrayNode.isFromExterns();
arrayNode.hasOneChild();
arrayNode.hasMoreThanOneChild();
arrayNode.hasSideEffects();
arrayNode.isQualifiedName();
arrayNode.isUnscopedQualifiedName();
arrayNode.isVarArgs();
arrayNode.isOptionalArg();
arrayNode.isSyntheticBlock();
arrayNode.wasEmptyNode();
arrayNode.isOnlyModifiesThisCall();
arrayNode.isNoSideEffectsCall();
arrayNode.isLocalResultCall();
arrayNode.isQuotedString();
arrayNode.getDirectives();
arrayNode.getStaticSourceFile();
arrayNode.getDouble();
arrayNode.getJsDocBuilderForNode();
02:21:48.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:49.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:49.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:49.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:49.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:50.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:50.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:51.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:51.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:52.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:52.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:53.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:53.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:54.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:54.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:54.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:54.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:55.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:55.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:56.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:56.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:57.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:57.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:58.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:58.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:21:59.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:21:59.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:00.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:00.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:01.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:01.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:01.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:01.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:02.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:02.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:03.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:03.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:04.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:04.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:05.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:05.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:06.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:06.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:07.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:07.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:07.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:07.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:08.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:08.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:09.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:09.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:10.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:10.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:11.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:11.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:12.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:12.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:13.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:13.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:14.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:14.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:15.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:15.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:15.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:15.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:16.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:16.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:17.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:17.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:18.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:18.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:19.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:19.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:20.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:20.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:21.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:21.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:22.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:22.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:23.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:23.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:23.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:23.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:24.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:24.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:25.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:25.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:26.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:26.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:27.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:27.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:28.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:28.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:29.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:29.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:30.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:30.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:31.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:31.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:31.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:31.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:32.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:32.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:33.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:33.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:34.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:34.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:35.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:35.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:36.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:36.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:37.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:37.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:37.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:37.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:38.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:38.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:39.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:39.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:40.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:40.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:41.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:41.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:42.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:42.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:43.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:43.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:43.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:43.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:44.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:44.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:45.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:45.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:46.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:46.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:47.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (originalSize > originalSize) {
          return n;
        }
02:22:47.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:48.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node emptyStringNode = arrayFoldedChildren.remove(0);
Node elem = arrayFoldedChildren.remove(0);
Node prev = arrayFoldedChildren.remove(0);
Node functionName = arrayFoldedChildren.remove(0);
Node arrayNode = arrayFoldedChildren.remove(0);
Node right = arrayFoldedChildren.remove(0);
Node callTarget = arrayFoldedChildren.remove(0);
Node n = arrayFoldedChildren.remove(0);
02:22:48.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:49.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:49.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:49.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:49.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:50.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:50.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:51.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:51.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:52.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:52.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:53.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:53.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:54.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:54.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:55.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
arrayFoldedChildren.add(
          elem, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          prev, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          foldedSize, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          sb, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          joinString, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          functionName, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          arrayNode, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          right, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          callTarget, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          n, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          ROOT_LOCALE, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), elem);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), prev);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), foldedSize);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), sb);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), joinString);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), functionName);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), arrayNode);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), right);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), callTarget);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), n);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), ROOT_LOCALE);
arrayFoldedChildren.add(
          true, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          false, Node.newString(sb.toString()).copyInformationFrom(prev));
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), true);
arrayFoldedChildren.add(
          Node.newString(sb.toString()).copyInformationFrom(prev), false);
02:22:55.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:56.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:56.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:56.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:56.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:57.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:57.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:58.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:58.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:22:59.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:22:59.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:00.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:00.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:01.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:01.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:02.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:02.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:03.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:03.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:04.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:04.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:04.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:04.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:05.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:05.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:06.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:06.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:07.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:07.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:08.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:08.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:09.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:09.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:10.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:10.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:11.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:11.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:12.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:12.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:12.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:12.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:13.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:13.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:14.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:14.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:15.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:15.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:16.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:16.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:17.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:17.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:18.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkNotNull(elem);
Preconditions.checkNotNull(foldedSize);
Preconditions.checkNotNull(sb);
Preconditions.checkNotNull(arrayFoldedChildren);
Preconditions.checkNotNull(joinString);
Preconditions.checkNotNull(functionName);
Preconditions.checkNotNull(arrayNode);
Preconditions.checkNotNull(right);
Preconditions.checkNotNull(callTarget);
Preconditions.checkNotNull(n);
Preconditions.checkNotNull(ROOT_LOCALE);
Preconditions.checkNotNull();
Preconditions.checkNotNull(elem, prev);
Preconditions.checkNotNull(foldedSize, prev);
Preconditions.checkNotNull(sb, prev);
Preconditions.checkNotNull(arrayFoldedChildren, prev);
Preconditions.checkNotNull(joinString, prev);
Preconditions.checkNotNull(functionName, prev);
Preconditions.checkNotNull(arrayNode, prev);
Preconditions.checkNotNull(right, prev);
Preconditions.checkNotNull(callTarget, prev);
Preconditions.checkNotNull(n, prev);
Preconditions.checkNotNull(ROOT_LOCALE, prev);
Preconditions.checkNotNull(prev, elem);
Preconditions.checkNotNull(prev, foldedSize);
Preconditions.checkNotNull(prev, sb);
Preconditions.checkNotNull(prev, arrayFoldedChildren);
Preconditions.checkNotNull(prev, joinString);
Preconditions.checkNotNull(prev, functionName);
Preconditions.checkNotNull(prev, arrayNode);
Preconditions.checkNotNull(prev, right);
Preconditions.checkNotNull(prev, callTarget);
Preconditions.checkNotNull(prev, n);
Preconditions.checkNotNull(prev, ROOT_LOCALE);
Preconditions.checkNotNull(true, prev);
Preconditions.checkNotNull(false, prev);
Preconditions.checkNotNull(prev, true);
Preconditions.checkNotNull(prev, false);
02:23:18.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:19.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:19.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:20.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:20.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:21.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:21.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:21.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:21.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:22.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:22.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:23.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:23.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:24.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:24.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:25.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:25.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:26.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:26.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:27.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:27.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:28.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:28.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:28.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:28.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:29.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:29.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:30.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:30.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:31.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:31.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:32.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:32.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:33.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:33.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:34.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:34.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:35.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:35.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:35.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:35.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:36.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:36.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:37.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:37.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:38.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:38.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:39.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:39.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:40.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:40.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:41.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:41.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:41.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:41.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:42.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:42.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:43.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:43.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:44.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:44.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:45.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:45.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:46.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:46.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:47.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:47.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:47.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:47.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:48.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:48.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:49.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:49.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:50.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:50.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:51.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
prev = elem.getNext();
functionName = elem.getNext();
arrayNode = elem.getNext();
right = elem.getNext();
callTarget = elem.getNext();
n = elem.getNext();
02:23:51.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:52.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:52.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:53.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:53.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:53.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:53.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:54.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:54.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:55.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:55.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:56.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
elem = elem;
functionName = elem;
arrayNode = elem;
right = elem;
callTarget = elem;
n = elem;
prev = functionName;
prev = arrayNode;
prev = right;
prev = callTarget;
prev = n;
02:23:56.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:57.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:57.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:58.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:58.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:23:59.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:23:59.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:00.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:00.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:00.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:00.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:01.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:01.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:02.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:02.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:03.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:03.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:04.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:04.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:05.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:05.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:06.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
sb.append(elem, NodeUtil.getArrayElementStringValue(elem));
sb.append(prev, NodeUtil.getArrayElementStringValue(elem));
sb.append(foldedSize, NodeUtil.getArrayElementStringValue(elem));
sb.append(arrayFoldedChildren, NodeUtil.getArrayElementStringValue(elem));
sb.append(joinString, NodeUtil.getArrayElementStringValue(elem));
sb.append(functionName, NodeUtil.getArrayElementStringValue(elem));
sb.append(arrayNode, NodeUtil.getArrayElementStringValue(elem));
sb.append(right, NodeUtil.getArrayElementStringValue(elem));
sb.append(callTarget, NodeUtil.getArrayElementStringValue(elem));
sb.append(n, NodeUtil.getArrayElementStringValue(elem));
sb.append(ROOT_LOCALE, NodeUtil.getArrayElementStringValue(elem));
sb.append(NodeUtil.getArrayElementStringValue(elem), elem);
sb.append(NodeUtil.getArrayElementStringValue(elem), prev);
sb.append(NodeUtil.getArrayElementStringValue(elem), foldedSize);
sb.append(NodeUtil.getArrayElementStringValue(elem), arrayFoldedChildren);
sb.append(NodeUtil.getArrayElementStringValue(elem), joinString);
sb.append(NodeUtil.getArrayElementStringValue(elem), functionName);
sb.append(NodeUtil.getArrayElementStringValue(elem), arrayNode);
sb.append(NodeUtil.getArrayElementStringValue(elem), right);
sb.append(NodeUtil.getArrayElementStringValue(elem), callTarget);
sb.append(NodeUtil.getArrayElementStringValue(elem), n);
sb.append(NodeUtil.getArrayElementStringValue(elem), ROOT_LOCALE);
sb.append(true, NodeUtil.getArrayElementStringValue(elem));
sb.append(false, NodeUtil.getArrayElementStringValue(elem));
sb.append(NodeUtil.getArrayElementStringValue(elem), true);
sb.append(NodeUtil.getArrayElementStringValue(elem), false);
02:24:06.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:07.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:07.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:07.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:07.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:08.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:08.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:09.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:09.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:10.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:10.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:11.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:11.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:12.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:12.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:13.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:13.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:14.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:14.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:15.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:15.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:16.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:16.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:17.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:17.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:17.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:17.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:18.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:18.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:19.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:19.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:20.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:20.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:21.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:21.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:22.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:22.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:23.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:23.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:24.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:24.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:25.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:25.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:25.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:25.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:26.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:26.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:27.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:27.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:28.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:28.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:29.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil.isImmutableValue(prev) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(foldedSize) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(sb) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(arrayFoldedChildren) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(joinString) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(functionName) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(arrayNode) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(right) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(callTarget) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(n) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(ROOT_LOCALE) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue() || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(prev, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(foldedSize, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(sb, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(arrayFoldedChildren, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(joinString, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(functionName, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(arrayNode, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(right, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(callTarget, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(n, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(ROOT_LOCALE, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, prev) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, foldedSize) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, sb) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, arrayFoldedChildren) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, joinString) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, functionName) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, arrayNode) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, right) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, callTarget) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, n) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, ROOT_LOCALE) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(true, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(false, elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, true) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem, false) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getNumberValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getInputId(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getVarsDeclaredInBranch(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getInfoForNameNode(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getFunctionJSDocInfo(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getBestJSDocInfo(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.newExpr(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getAssignedValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getLoopCodeBlock(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getConditionExpression(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getFunctionBody(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getAddingRoot(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getRootOfQualifiedName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getPrototypeClassName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.newUndefinedNode(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getCatchBlock(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getFunctionParameters(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getBestLValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getBestLValueOwner(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getOpFromAssignmentOp(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getStringValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getArrayElementStringValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.arrayToString(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getFunctionName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getNearestFunctionName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getObjectLitKeyName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getPrototypePropertyName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getSourceName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getBestLValueName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getImpureBooleanValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getPureBooleanValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.maybeAddFinally(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.redeclareVarsInsideBranch(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isSymmetricOperation(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isRelationalOperation(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isEmptyBlock(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isSimpleOperator(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.mayEffectMutableState(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.mayHaveSideEffects(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.constructorCallHasSideEffects(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.functionCallHasSideEffects(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.callHasLocalResult(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.newHasLocalResult(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.nodeTypeMayHaveSideEffects(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.canBeSideEffected(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isNumericResult(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isNumericResultHelper(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isBooleanResult(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isBooleanResultHelper(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isUndefined(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isNull(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isNullOrUndefined(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.mayBeString(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.mayBeStringHelper(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isAssignmentOp(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isExpressionNode(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.containsFunction(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.referencesThis(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isGet(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isGetProp(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isNew(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isVar(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isVarDeclaration(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isString(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isExprAssign(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isAssign(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isExprCall(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isForIn(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isLoopStructure(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isWithinLoop(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isControlStructure(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isStatementBlock(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isStatement(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isStatementParent(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isSwitchCase(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isReferenceName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isLabelName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isTryCatchNodeContainer(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.tryMergeBlock(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isCall(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isCallOrNew(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isFunction(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isThis(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isArrayLiteral(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.containsCall(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isFunctionDeclaration(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isHoistedFunctionDeclaration(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isFunctionExpression(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isEmptyFunctionExpression(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isVarArgsFunction(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isFunctionObjectCall(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isFunctionObjectApply(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isFunctionObjectCallOrApply(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isSimpleFunctionObjectCall(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isLValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isGetOrSetKey(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isPrototypePropertyDeclaration(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isPrototypeProperty(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.hasFinally(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.hasCatchHandler(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isConstantName(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.evaluatesToLocalValue(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isToStringMethodCall(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.getSourceFile(elem) || elem.getType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(prev) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(foldedSize) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(sb) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(arrayFoldedChildren) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(joinString) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(functionName) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(arrayNode) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(right) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(callTarget) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(n) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(ROOT_LOCALE) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(true) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getType(false) == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getAncestors() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getJSType() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getLength() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getLineno() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getCharno() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getSourceOffset() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getSourcePosition() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getChildCount() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getSideEffectFlags() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getSortedPropTypes() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getPropListHeadForTesting() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.detachChildren() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.setQuotedString() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getDouble() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getStaticSourceFile() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getInputId() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.children() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.siblings() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getJSDocInfo() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getFirstChild() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getLastChild() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getNext() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getLastSibling() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getParent() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.detachFromParent() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.removeFirstChild() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.removeChildren() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.cloneNode() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.cloneTree() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getString() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.toString() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.toStringTree() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.toStringTreeImpl() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getSourceFileName() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getQualifiedName() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.hasChildren() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isFromExterns() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.hasOneChild() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.hasMoreThanOneChild() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.hasSideEffects() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isQualifiedName() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isUnscopedQualifiedName() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isVarArgs() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isOptionalArg() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isSyntheticBlock() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.wasEmptyNode() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isOnlyModifiesThisCall() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isNoSideEffectsCall() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isLocalResultCall() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.isQuotedString() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getDirectives() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
if (NodeUtil.isImmutableValue(elem) || elem.getJsDocBuilderForNode() == Token.EMPTY) {
        if (sb == null) {
          sb = new StringBuilder();
        } else {
          sb.append(joinString);
        }
        sb.append(NodeUtil.getArrayElementStringValue(elem));
      } else {
        if (sb != null) {
          Preconditions.checkNotNull(prev);
          // + 2 for the quotes.
          foldedSize += sb.length() + 2;
          arrayFoldedChildren.add(
              Node.newString(sb.toString()).copyInformationFrom(prev));
          sb = null;
        }
        foldedSize += InlineCostEstimator.getCost(elem);
        arrayFoldedChildren.add(elem);
      }
02:24:29.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:30.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:30.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:31.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:31.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:32.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:32.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:33.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:33.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:33.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:33.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:34.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:34.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:35.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:35.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:36.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:36.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:37.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:37.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:38.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:38.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:39.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:39.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:39.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:39.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:40.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:40.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:41.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:41.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:42.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:42.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:43.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:43.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:44.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:44.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:45.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:45.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:46.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:46.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:46.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:46.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:47.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:47.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:48.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:48.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:49.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:49.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:50.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:50.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:51.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:51.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:51.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:51.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:52.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:52.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:53.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:53.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:54.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:54.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:55.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:55.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:56.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:56.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:57.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:57.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:57.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:57.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:58.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:58.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:24:59.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:24:59.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:00.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:00.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:01.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:01.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:02.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:02.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:03.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:03.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:03.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:03.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:04.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:04.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:05.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:05.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:06.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:06.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:07.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:07.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:08.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:08.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:09.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:09.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:10.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:10.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:10.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:10.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:11.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:11.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:12.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:12.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:13.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:13.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:14.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:14.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:15.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:15.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:16.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:16.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:17.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:17.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:18.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:18.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:19.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:19.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:20.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:20.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:20.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:20.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:21.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:21.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:22.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:22.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:23.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:23.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:24.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:24.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:25.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:25.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:26.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:26.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:27.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:27.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:28.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:28.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:28.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:28.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:29.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:29.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:30.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:30.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:31.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:31.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:32.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:32.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:33.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:33.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:34.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:34.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:34.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:34.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:35.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:35.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:36.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:36.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:37.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:37.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:38.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:38.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:39.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:39.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:40.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:40.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:41.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:41.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:41.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:41.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:42.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:42.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:43.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:43.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:44.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:44.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:45.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:45.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:46.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:46.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:47.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:47.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:48.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:48.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:48.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:48.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:49.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:49.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:50.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:50.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:51.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:51.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:52.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:52.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:53.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:53.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:54.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:54.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:54.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:54.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:55.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:55.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:56.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:56.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:57.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:57.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:58.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:58.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:25:59.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:25:59.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:00.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:00.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:00.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:00.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:01.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:01.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:02.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:02.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:03.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:03.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:04.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:04.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:05.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:05.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:06.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:06.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:06.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:06.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:07.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:07.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:08.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:08.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:09.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:09.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:10.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:10.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:11.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:11.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:12.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:12.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:13.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:13.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:14.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:14.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:15.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:15.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:15.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:15.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:16.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:16.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:17.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:17.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:18.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:18.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:19.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:19.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:20.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:20.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:21.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:21.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:22.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:22.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:23.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:23.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:23.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:23.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:24.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:24.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:25.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:25.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:26.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:26.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:27.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:27.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:28.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:28.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:29.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:29.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:30.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:30.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:31.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:31.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:31.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:31.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:32.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:32.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:33.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:33.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:34.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:34.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:35.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:35.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:36.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:36.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:37.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:37.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:38.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:38.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:38.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:38.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:39.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:39.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:40.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:40.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:41.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:41.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:42.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:42.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:43.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:43.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:44.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:44.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:44.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:44.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:45.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:45.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:46.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:46.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:47.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:47.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:48.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:48.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:49.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:49.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:50.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:50.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:50.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:50.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:51.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:51.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:52.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:52.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:53.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:53.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:54.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:54.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:55.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:55.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:56.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:56.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:56.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:56.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:57.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:57.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:58.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:58.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:26:59.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:26:59.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:00.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:00.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:01.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:01.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:02.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:02.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:03.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:03.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:03.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:03.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:04.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:04.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:05.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:05.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:06.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:06.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:07.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:07.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:08.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:08.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:09.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:09.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:10.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:10.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:11.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:11.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:12.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:12.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:12.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:12.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:13.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:13.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:14.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:14.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:15.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:15.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:16.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:16.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:17.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:17.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:18.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:18.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:19.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:19.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:20.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:20.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:21.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:21.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:21.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:21.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:22.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:22.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:23.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:23.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:24.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:24.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:25.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:25.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:26.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:26.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:27.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:27.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:28.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:28.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:29.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:29.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:29.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:29.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:30.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:30.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:31.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
return getCost(ESTIMATED_IDENTIFIER, Integer.MAX_VALUE);
return getCost(ESTIMATED_IDENTIFIER_COST, Integer.MAX_VALUE);
return getCost( Integer.MAX_VALUE);
return getCost(ESTIMATED_IDENTIFIER, root, Integer.MAX_VALUE);
return getCost(ESTIMATED_IDENTIFIER_COST, root, Integer.MAX_VALUE);
return getCost(root, ESTIMATED_IDENTIFIER, Integer.MAX_VALUE);
return getCost(root, ESTIMATED_IDENTIFIER_COST, Integer.MAX_VALUE);
return getCost(root, Integer.MAX_VALUE, ESTIMATED_IDENTIFIER);
return getCost(root, Integer.MAX_VALUE, ESTIMATED_IDENTIFIER_COST);
return getCost(true, root, Integer.MAX_VALUE);
return getCost(false, root, Integer.MAX_VALUE);
return getCost(root, true, Integer.MAX_VALUE);
return getCost(root, false, Integer.MAX_VALUE);
return getCost(root, Integer.MAX_VALUE, true);
return getCost(root, Integer.MAX_VALUE, false);
02:27:31.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:32.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:32.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:33.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:33.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:33.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:33.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:34.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:34.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:35.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:35.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:35.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:35.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:36.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:36.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:37.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:37.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:38.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:38.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:38.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:38.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:39.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:39.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:40.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:40.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:40.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:40.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:41.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:41.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:42.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if ((arrayNode.getType(functionName) != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType(right) != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType(callTarget) != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType(n) != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType(ROOT_LOCALE) != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType(true) != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType(false) != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getAncestors() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getJSType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getLength() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getLineno() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getCharno() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getSourceOffset() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getSourcePosition() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getChildCount() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getSideEffectFlags() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getSortedPropTypes() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getPropListHeadForTesting() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.detachChildren() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.setQuotedString() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getDouble() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getStaticSourceFile() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getInputId() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.children() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.siblings() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getJSDocInfo() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getFirstChild() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getLastChild() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getNext() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getLastSibling() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getParent() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.detachFromParent() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.removeFirstChild() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.removeChildren() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.cloneNode() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.cloneTree() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getString() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.toString() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.toStringTree() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.toStringTreeImpl() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getSourceFileName() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getQualifiedName() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.hasChildren() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isFromExterns() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.hasOneChild() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.hasMoreThanOneChild() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.hasSideEffects() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isQualifiedName() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isUnscopedQualifiedName() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isVarArgs() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isOptionalArg() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isSyntheticBlock() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.wasEmptyNode() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isOnlyModifiesThisCall() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isNoSideEffectsCall() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isLocalResultCall() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.isQuotedString() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getDirectives() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getJsDocBuilderForNode() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(functionName, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(arrayNode, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(right, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(callTarget, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(n, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(ROOT_LOCALE, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", functionName)) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", arrayNode)) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", right)) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", callTarget)) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", n)) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", ROOT_LOCALE)) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(true, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals(false, "join")) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", true)) {
      return n;
    }
if ((arrayNode.getType() != Token.ARRAYLIT) ||
        !functionName.getString().equals("join", false)) {
      return n;
    }
02:27:42.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:43.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:43.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:43.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:43.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:44.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:44.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:45.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:45.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:46.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:46.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:47.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:47.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:48.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:48.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:49.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:49.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:49.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:49.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:50.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:50.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:51.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:51.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:52.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:52.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:53.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:53.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:54.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:54.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:55.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:55.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:55.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:55.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:56.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:56.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:57.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:57.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:58.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:58.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:27:59.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:27:59.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:00.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:00.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:01.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:01.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:01.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:01.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:02.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:02.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:03.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:03.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:04.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:04.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:05.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:05.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:06.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:06.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:07.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:07.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:08.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:08.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:09.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:09.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:09.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:09.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:10.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:10.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:11.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:11.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:12.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:12.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:13.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:13.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:14.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:14.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:15.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:15.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:16.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:16.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:17.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:17.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:18.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:18.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:19.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:19.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:20.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:20.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:20.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:20.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:21.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:21.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:22.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:22.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:23.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:23.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:24.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:24.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:25.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:25.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:26.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:26.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:27.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:27.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:28.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:28.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:28.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:28.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:29.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:29.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:30.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:30.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:31.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:31.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:32.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:32.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:33.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:33.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:34.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:34.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:35.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:35.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:35.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:35.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:36.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:36.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:37.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:37.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:38.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:38.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:39.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:39.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:40.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:40.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:41.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:41.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:41.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:41.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:42.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:42.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:43.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:43.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:44.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:44.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:45.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:45.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:46.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:46.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:47.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:47.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:47.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node arrayNode = arrayNode.getNext();
Node right = arrayNode.getNext();
Node callTarget = arrayNode.getNext();
Node n = arrayNode.getNext();
02:28:47.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:48.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:48.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:49.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:49.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:50.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:50.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:51.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
Node right = callTarget.getFirstChild();
Node callTarget = callTarget.getFirstChild();
Node n = callTarget.getFirstChild();
02:28:51.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:52.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:52.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:53.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:53.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:53.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
if (!NodeUtil.isImmutableValue(callTarget)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(n)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(ROOT_LOCALE)) {
        return n;
      }
if (!NodeUtil.isImmutableValue()) {
        return n;
      }
if (!NodeUtil.isImmutableValue(callTarget, right)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(n, right)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(ROOT_LOCALE, right)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(right, callTarget)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(right, n)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(right, ROOT_LOCALE)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(true, right)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(false, right)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(right, true)) {
        return n;
      }
if (!NodeUtil.isImmutableValue(right, false)) {
        return n;
      }
if (!NodeUtil.getNumberValue(right)) {
        return n;
      }
if (!NodeUtil.getInputId(right)) {
        return n;
      }
if (!NodeUtil.getVarsDeclaredInBranch(right)) {
        return n;
      }
if (!NodeUtil.getInfoForNameNode(right)) {
        return n;
      }
if (!NodeUtil.getFunctionJSDocInfo(right)) {
        return n;
      }
if (!NodeUtil.getBestJSDocInfo(right)) {
        return n;
      }
if (!NodeUtil.newExpr(right)) {
        return n;
      }
if (!NodeUtil.getAssignedValue(right)) {
        return n;
      }
if (!NodeUtil.getLoopCodeBlock(right)) {
        return n;
      }
if (!NodeUtil.getConditionExpression(right)) {
        return n;
      }
if (!NodeUtil.getFunctionBody(right)) {
        return n;
      }
if (!NodeUtil.getAddingRoot(right)) {
        return n;
      }
if (!NodeUtil.getRootOfQualifiedName(right)) {
        return n;
      }
if (!NodeUtil.getPrototypeClassName(right)) {
        return n;
      }
if (!NodeUtil.newUndefinedNode(right)) {
        return n;
      }
if (!NodeUtil.getCatchBlock(right)) {
        return n;
      }
if (!NodeUtil.getFunctionParameters(right)) {
        return n;
      }
if (!NodeUtil.getBestLValue(right)) {
        return n;
      }
if (!NodeUtil.getBestLValueOwner(right)) {
        return n;
      }
if (!NodeUtil.getOpFromAssignmentOp(right)) {
        return n;
      }
if (!NodeUtil.getStringValue(right)) {
        return n;
      }
if (!NodeUtil.getArrayElementStringValue(right)) {
        return n;
      }
if (!NodeUtil.arrayToString(right)) {
        return n;
      }
if (!NodeUtil.getFunctionName(right)) {
        return n;
      }
if (!NodeUtil.getNearestFunctionName(right)) {
        return n;
      }
if (!NodeUtil.getObjectLitKeyName(right)) {
        return n;
      }
if (!NodeUtil.getPrototypePropertyName(right)) {
        return n;
      }
if (!NodeUtil.getSourceName(right)) {
        return n;
      }
if (!NodeUtil.getBestLValueName(right)) {
        return n;
      }
if (!NodeUtil.getImpureBooleanValue(right)) {
        return n;
      }
if (!NodeUtil.getPureBooleanValue(right)) {
        return n;
      }
if (!NodeUtil.maybeAddFinally(right)) {
        return n;
      }
if (!NodeUtil.redeclareVarsInsideBranch(right)) {
        return n;
      }
if (!NodeUtil.isSymmetricOperation(right)) {
        return n;
      }
if (!NodeUtil.isRelationalOperation(right)) {
        return n;
      }
if (!NodeUtil.isEmptyBlock(right)) {
        return n;
      }
if (!NodeUtil.isSimpleOperator(right)) {
        return n;
      }
if (!NodeUtil.mayEffectMutableState(right)) {
        return n;
      }
if (!NodeUtil.mayHaveSideEffects(right)) {
        return n;
      }
if (!NodeUtil.constructorCallHasSideEffects(right)) {
        return n;
      }
if (!NodeUtil.functionCallHasSideEffects(right)) {
        return n;
      }
if (!NodeUtil.callHasLocalResult(right)) {
        return n;
      }
if (!NodeUtil.newHasLocalResult(right)) {
        return n;
      }
if (!NodeUtil.nodeTypeMayHaveSideEffects(right)) {
        return n;
      }
if (!NodeUtil.canBeSideEffected(right)) {
        return n;
      }
if (!NodeUtil.isNumericResult(right)) {
        return n;
      }
if (!NodeUtil.isNumericResultHelper(right)) {
        return n;
      }
if (!NodeUtil.isBooleanResult(right)) {
        return n;
      }
if (!NodeUtil.isBooleanResultHelper(right)) {
        return n;
      }
if (!NodeUtil.isUndefined(right)) {
        return n;
      }
if (!NodeUtil.isNull(right)) {
        return n;
      }
if (!NodeUtil.isNullOrUndefined(right)) {
        return n;
      }
if (!NodeUtil.mayBeString(right)) {
        return n;
      }
if (!NodeUtil.mayBeStringHelper(right)) {
        return n;
      }
if (!NodeUtil.isAssignmentOp(right)) {
        return n;
      }
if (!NodeUtil.isExpressionNode(right)) {
        return n;
      }
if (!NodeUtil.containsFunction(right)) {
        return n;
      }
if (!NodeUtil.referencesThis(right)) {
        return n;
      }
if (!NodeUtil.isGet(right)) {
        return n;
      }
if (!NodeUtil.isGetProp(right)) {
        return n;
      }
if (!NodeUtil.isName(right)) {
        return n;
      }
if (!NodeUtil.isNew(right)) {
        return n;
      }
if (!NodeUtil.isVar(right)) {
        return n;
      }
if (!NodeUtil.isVarDeclaration(right)) {
        return n;
      }
if (!NodeUtil.isString(right)) {
        return n;
      }
if (!NodeUtil.isExprAssign(right)) {
        return n;
      }
if (!NodeUtil.isAssign(right)) {
        return n;
      }
if (!NodeUtil.isExprCall(right)) {
        return n;
      }
if (!NodeUtil.isForIn(right)) {
        return n;
      }
if (!NodeUtil.isLoopStructure(right)) {
        return n;
      }
if (!NodeUtil.isWithinLoop(right)) {
        return n;
      }
if (!NodeUtil.isControlStructure(right)) {
        return n;
      }
if (!NodeUtil.isStatementBlock(right)) {
        return n;
      }
if (!NodeUtil.isStatement(right)) {
        return n;
      }
if (!NodeUtil.isStatementParent(right)) {
        return n;
      }
if (!NodeUtil.isSwitchCase(right)) {
        return n;
      }
if (!NodeUtil.isReferenceName(right)) {
        return n;
      }
if (!NodeUtil.isLabelName(right)) {
        return n;
      }
if (!NodeUtil.isTryCatchNodeContainer(right)) {
        return n;
      }
if (!NodeUtil.tryMergeBlock(right)) {
        return n;
      }
if (!NodeUtil.isCall(right)) {
        return n;
      }
if (!NodeUtil.isCallOrNew(right)) {
        return n;
      }
if (!NodeUtil.isFunction(right)) {
        return n;
      }
if (!NodeUtil.isThis(right)) {
        return n;
      }
if (!NodeUtil.isArrayLiteral(right)) {
        return n;
      }
if (!NodeUtil.containsCall(right)) {
        return n;
      }
if (!NodeUtil.isFunctionDeclaration(right)) {
        return n;
      }
if (!NodeUtil.isHoistedFunctionDeclaration(right)) {
        return n;
      }
if (!NodeUtil.isFunctionExpression(right)) {
        return n;
      }
if (!NodeUtil.isEmptyFunctionExpression(right)) {
        return n;
      }
if (!NodeUtil.isVarArgsFunction(right)) {
        return n;
      }
if (!NodeUtil.isFunctionObjectCall(right)) {
        return n;
      }
if (!NodeUtil.isFunctionObjectApply(right)) {
        return n;
      }
if (!NodeUtil.isFunctionObjectCallOrApply(right)) {
        return n;
      }
if (!NodeUtil.isSimpleFunctionObjectCall(right)) {
        return n;
      }
if (!NodeUtil.isLValue(right)) {
        return n;
      }
if (!NodeUtil.isGetOrSetKey(right)) {
        return n;
      }
if (!NodeUtil.isPrototypePropertyDeclaration(right)) {
        return n;
      }
if (!NodeUtil.isPrototypeProperty(right)) {
        return n;
      }
if (!NodeUtil.hasFinally(right)) {
        return n;
      }
if (!NodeUtil.hasCatchHandler(right)) {
        return n;
      }
if (!NodeUtil.isConstantName(right)) {
        return n;
      }
if (!NodeUtil.evaluatesToLocalValue(right)) {
        return n;
      }
if (!NodeUtil.isToStringMethodCall(right)) {
        return n;
      }
if (!NodeUtil.getSourceFile(right)) {
        return n;
      }
02:28:53.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:54.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:54.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:55.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:55.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:56.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:56.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:57.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:57.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:58.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:58.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:59.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:59.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:28:59.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:28:59.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:00.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:00.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:01.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:01.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:02.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:02.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:03.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:03.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:04.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:04.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:05.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:05.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:05.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:05.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:06.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:06.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:07.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:07.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:08.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:08.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:09.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:09.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:10.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:10.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:11.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:11.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:12.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:12.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:13.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:13.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:14.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:14.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:14.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:14.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:15.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:15.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:16.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:16.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:17.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:17.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:18.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:18.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:19.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:19.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:20.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:20.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:21.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:21.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:22.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:22.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:23.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:23.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:24.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:24.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:24.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:24.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:25.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:25.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:26.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:26.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:27.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:27.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:28.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:28.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:29.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:29.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:30.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:30.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:31.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:31.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:31.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:31.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:32.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:32.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:33.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:33.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:34.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:34.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:35.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:35.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:36.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:36.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:37.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:37.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:38.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:38.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:39.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:39.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:39.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:39.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:40.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:40.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:41.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:41.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:42.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:42.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:43.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:43.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:44.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:44.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:45.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:45.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:46.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:46.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:47.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:47.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:47.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:47.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:48.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:48.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:49.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:49.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:50.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:50.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:51.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:51.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:52.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:52.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:53.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:53.031 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:53.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:53.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:54.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:54.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:55.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:55.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:56.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:56.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:57.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:57.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:58.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:58.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:58.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:58.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:29:59.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:29:59.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:00.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:00.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:01.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:01.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:02.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:02.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:03.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:03.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:04.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:04.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:04.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:04.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:05.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:05.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:06.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:06.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:07.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:07.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:08.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:08.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:09.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:09.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:10.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:10.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:10.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:10.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:11.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:11.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:12.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:12.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:13.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:13.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:14.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:14.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:15.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:15.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:16.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:16.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:17.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:17.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:17.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:17.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:18.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:18.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:19.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:19.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:20.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:20.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:21.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:21.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:22.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:22.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:23.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:23.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:24.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:24.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:24.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:24.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:25.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:25.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:26.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:26.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:27.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:27.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:28.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:28.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:29.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:29.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:30.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:30.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:31.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:31.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:31.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:31.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:32.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:32.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:33.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:33.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:34.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:34.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:35.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:35.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:36.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:36.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:37.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:37.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:30:38.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-50 ---Fixer: fix fail because of failed compiling! 
02:30:38.012 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Finish off Fixing======
02:33:15.830 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-50/aggregatedSusInfo.profl
Failed to fix bug Closure-50
