Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Closure-132
18:46:18.532 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/132.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/132.txt
18:50:59.751 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
18:50:59.817 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-132/generalSusInfo.profl
18:50:59.890 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-132/aggregatedSusInfo.profl
18:50:59.894 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
18:50:59.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===221
18:51:00.595 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case SHEQ:
if (SHEQ == 0) {
    new IllegalArgumentException("");
}

if (SHEQ != 0) {

    
}

if (SHEQ > 0) {

    
}

18:51:00.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:01.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:01.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:01.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:01.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:01.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:51:01.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:02.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:02.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===248
18:51:02.484 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case DEC:
if (DEC == 0) {
    new IllegalArgumentException("");
}

if (DEC != 0) {

    
}

if (DEC > 0) {

    
}

18:51:02.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:03.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:03.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:03.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:03.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:03.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:51:03.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:04.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:04.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===210
18:51:04.307 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case GETELEM:
if (GETELEM == 0) {
    new IllegalArgumentException("");
}

if (GETELEM != 0) {

    
}

if (GETELEM > 0) {

    
}

18:51:04.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:04.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:04.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:05.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:05.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:05.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:51:05.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:06.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:06.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===797
18:51:06.625 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return expr;
if (expr != null) {


}

18:51:06.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:07.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (expr == null) {
    return null;
}

if (expr == null) {
    throw new IllegalArgumentException("Empty variable: " + expr);
}

18:51:07.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:08.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:08.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:09.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(expr);
tryJoinForCondition(expr);
	return expr;
return expr;
	tryJoinForCondition(expr);
tryRemoveRepeatedStatements(expr);
tryRemoveRepeatedStatements(expr);
	return expr;
return expr;
	tryRemoveRepeatedStatements(expr);
18:51:09.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:10.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:10.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:11.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:11.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:12.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:12.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:13.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:13.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:14.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:14.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:14.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:51:14.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:15.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:15.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===795
18:51:16.001 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
reportCodeChange();
reportCodeChange(true);
reportCodeChange(false);
18:51:16.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:16.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:16.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:17.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(expr);
reportCodeChange(assign);
reportCodeChange(hookNode);
reportCodeChange(elseExpr);
reportCodeChange(thenExpr);
reportCodeChange(assignName);
reportCodeChange(lhs);
reportCodeChange(elseOp);
reportCodeChange(thenOp);
reportCodeChange(elseBranchIsExpressionBlock);
reportCodeChange(thenBranchIsExpressionBlock);
reportCodeChange(elseBranch);
reportCodeChange(thenBranch);
reportCodeChange(cond);
reportCodeChange(parent);
reportCodeChange(n);
reportCodeChange(AND_PRECEDENCE);
reportCodeChange(OR_PRECEDENCE);
reportCodeChange(NOT_PRECEDENCE);
reportCodeChange(REGEXP_ESCAPER);
reportCodeChange(this.late);
reportCodeChange(this.STRING_SPLIT_OVERHEAD);
reportCodeChange(INVALID_REGULAR_EXPRESSION_FLAGS);
reportCodeChange(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
reportCodeChange(STANDARD_OBJECT_CONSTRUCTORS);
reportCodeChange(REGEXP_FLAGS_RE);
18:51:17.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:18.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:18.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:19.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:19.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:20.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:20.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:21.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:21.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:22.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:22.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:23.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:23.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:24.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:24.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:25.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:25.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:26.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:26.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:27.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:27.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:28.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:28.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:29.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:29.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:30.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:30.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:30.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:30.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:31.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:31.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:32.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:32.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:33.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:33.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:34.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:34.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:35.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:35.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:36.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:36.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:37.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:37.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:38.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:38.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:39.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:39.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:40.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:40.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:41.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:41.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:42.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
18:51:42.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:43.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:43.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:44.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:44.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:45.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
reportCodeChange();
	n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            
null
reportCodeChange();
	parent.replaceChild(n, expr);
            
null


            return expr;
	reportCodeChange();

MOVE-BUGGY-STATEMENT
18:51:45.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:46.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:46.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:46.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:46.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:47.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:47.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:48.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:48.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:49.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:49.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:50.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:50.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:51.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:51.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:52.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:52.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:53.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:53.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:54.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:51:54.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:55.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:55.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===794
18:51:55.412 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
parent.replaceChild(n, expr);
parent.replaceChild(true, n, expr);
parent.replaceChild(false, n, expr);
parent.replaceChild(n, true, expr);
parent.replaceChild(n, false, expr);
parent.replaceChild(n, expr, true);
parent.replaceChild(n, expr, false);
18:51:55.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:56.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:56.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:57.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:57.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:58.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:58.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:59.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:59.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:51:59.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:51:59.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:00.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
parent.replaceChild(assign, expr);
parent.replaceChild(hookNode, expr);
parent.replaceChild(elseExpr, expr);
parent.replaceChild(thenExpr, expr);
parent.replaceChild(assignName, expr);
parent.replaceChild(lhs, expr);
parent.replaceChild(elseOp, expr);
parent.replaceChild(thenOp, expr);
parent.replaceChild(elseBranchIsExpressionBlock, expr);
parent.replaceChild(thenBranchIsExpressionBlock, expr);
parent.replaceChild(elseBranch, expr);
parent.replaceChild(thenBranch, expr);
parent.replaceChild(cond, expr);
parent.replaceChild(AND_PRECEDENCE, expr);
parent.replaceChild(OR_PRECEDENCE, expr);
parent.replaceChild(NOT_PRECEDENCE, expr);
parent.replaceChild(REGEXP_ESCAPER, expr);
parent.replaceChild(this.late, expr);
parent.replaceChild(this.STRING_SPLIT_OVERHEAD, expr);
parent.replaceChild(INVALID_REGULAR_EXPRESSION_FLAGS, expr);
parent.replaceChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE, expr);
parent.replaceChild(STANDARD_OBJECT_CONSTRUCTORS, expr);
parent.replaceChild(REGEXP_FLAGS_RE, expr);
parent.replaceChild( expr);
parent.replaceChild(assign, n, expr);
parent.replaceChild(hookNode, n, expr);
parent.replaceChild(elseExpr, n, expr);
parent.replaceChild(thenExpr, n, expr);
parent.replaceChild(assignName, n, expr);
parent.replaceChild(lhs, n, expr);
parent.replaceChild(elseOp, n, expr);
parent.replaceChild(thenOp, n, expr);
parent.replaceChild(elseBranchIsExpressionBlock, n, expr);
parent.replaceChild(thenBranchIsExpressionBlock, n, expr);
parent.replaceChild(elseBranch, n, expr);
parent.replaceChild(thenBranch, n, expr);
parent.replaceChild(cond, n, expr);
parent.replaceChild(AND_PRECEDENCE, n, expr);
parent.replaceChild(OR_PRECEDENCE, n, expr);
parent.replaceChild(NOT_PRECEDENCE, n, expr);
parent.replaceChild(REGEXP_ESCAPER, n, expr);
parent.replaceChild(this.late, n, expr);
parent.replaceChild(this.STRING_SPLIT_OVERHEAD, n, expr);
parent.replaceChild(INVALID_REGULAR_EXPRESSION_FLAGS, n, expr);
parent.replaceChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE, n, expr);
parent.replaceChild(STANDARD_OBJECT_CONSTRUCTORS, n, expr);
parent.replaceChild(REGEXP_FLAGS_RE, n, expr);
parent.replaceChild(n, assign);
parent.replaceChild(n, hookNode);
parent.replaceChild(n, elseExpr);
parent.replaceChild(n, thenExpr);
parent.replaceChild(n, assignName);
parent.replaceChild(n, lhs);
parent.replaceChild(n, elseOp);
parent.replaceChild(n, thenOp);
parent.replaceChild(n, elseBranchIsExpressionBlock);
parent.replaceChild(n, thenBranchIsExpressionBlock);
parent.replaceChild(n, elseBranch);
parent.replaceChild(n, thenBranch);
parent.replaceChild(n, cond);
parent.replaceChild(n, AND_PRECEDENCE);
parent.replaceChild(n, OR_PRECEDENCE);
parent.replaceChild(n, NOT_PRECEDENCE);
parent.replaceChild(n, REGEXP_ESCAPER);
parent.replaceChild(n, this.late);
parent.replaceChild(n, this.STRING_SPLIT_OVERHEAD);
parent.replaceChild(n, INVALID_REGULAR_EXPRESSION_FLAGS);
parent.replaceChild(n, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
parent.replaceChild(n, STANDARD_OBJECT_CONSTRUCTORS);
parent.replaceChild(n, REGEXP_FLAGS_RE);
parent.replaceChild(n, );
parent.replaceChild(n, assign, expr);
parent.replaceChild(n, hookNode, expr);
parent.replaceChild(n, elseExpr, expr);
parent.replaceChild(n, thenExpr, expr);
parent.replaceChild(n, assignName, expr);
parent.replaceChild(n, lhs, expr);
parent.replaceChild(n, elseOp, expr);
parent.replaceChild(n, thenOp, expr);
parent.replaceChild(n, elseBranchIsExpressionBlock, expr);
parent.replaceChild(n, thenBranchIsExpressionBlock, expr);
parent.replaceChild(n, elseBranch, expr);
parent.replaceChild(n, thenBranch, expr);
parent.replaceChild(n, cond, expr);
parent.replaceChild(n, AND_PRECEDENCE, expr);
parent.replaceChild(n, OR_PRECEDENCE, expr);
parent.replaceChild(n, NOT_PRECEDENCE, expr);
parent.replaceChild(n, REGEXP_ESCAPER, expr);
parent.replaceChild(n, this.late, expr);
parent.replaceChild(n, this.STRING_SPLIT_OVERHEAD, expr);
parent.replaceChild(n, INVALID_REGULAR_EXPRESSION_FLAGS, expr);
parent.replaceChild(n, DONT_TRAVERSE_FUNCTIONS_PREDICATE, expr);
parent.replaceChild(n, STANDARD_OBJECT_CONSTRUCTORS, expr);
parent.replaceChild(n, REGEXP_FLAGS_RE, expr);
parent.replaceChild(n, expr, assign);
parent.replaceChild(n, expr, hookNode);
parent.replaceChild(n, expr, elseExpr);
parent.replaceChild(n, expr, thenExpr);
parent.replaceChild(n, expr, assignName);
parent.replaceChild(n, expr, lhs);
parent.replaceChild(n, expr, elseOp);
parent.replaceChild(n, expr, thenOp);
parent.replaceChild(n, expr, elseBranchIsExpressionBlock);
parent.replaceChild(n, expr, thenBranchIsExpressionBlock);
parent.replaceChild(n, expr, elseBranch);
parent.replaceChild(n, expr, thenBranch);
parent.replaceChild(n, expr, cond);
parent.replaceChild(n, expr, AND_PRECEDENCE);
parent.replaceChild(n, expr, OR_PRECEDENCE);
parent.replaceChild(n, expr, NOT_PRECEDENCE);
parent.replaceChild(n, expr, REGEXP_ESCAPER);
parent.replaceChild(n, expr, this.late);
parent.replaceChild(n, expr, this.STRING_SPLIT_OVERHEAD);
parent.replaceChild(n, expr, INVALID_REGULAR_EXPRESSION_FLAGS);
parent.replaceChild(n, expr, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
parent.replaceChild(n, expr, STANDARD_OBJECT_CONSTRUCTORS);
parent.replaceChild(n, expr, REGEXP_FLAGS_RE);
18:52:00.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:01.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:01.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:02.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:02.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:03.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:03.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:04.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:04.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:05.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:05.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:06.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:06.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:07.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:07.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:08.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:08.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:09.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:09.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:10.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:10.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:11.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:11.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:11.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:11.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:12.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:12.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:13.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:13.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:14.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:14.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:15.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:15.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:16.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:16.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:24.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:24.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:30.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:30.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:37.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:37.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:37.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:37.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:38.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:38.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:39.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:39.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:41.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:41.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:41.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:41.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:42.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:42.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:43.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:43.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:44.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:44.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:45.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:45.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:46.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:46.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:47.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:47.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:48.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:48.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:49.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:49.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:50.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:50.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:50.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:50.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:51.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:51.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:52.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:52.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:53.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:53.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:54.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:54.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:55.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:55.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:56.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:56.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:57.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:57.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:58.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:58.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:52:59.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:52:59.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:00.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:00.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:01.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:01.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:01.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:01.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:02.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:02.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:03.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:03.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:04.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:04.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:05.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:05.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:06.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:06.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:07.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:07.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:08.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:08.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:09.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:09.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:10.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:10.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:11.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:11.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:12.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:12.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:13.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:13.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:14.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:14.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:14.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:14.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:15.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:15.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:16.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:16.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:17.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:17.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:19.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:19.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:20.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:20.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:21.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:21.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:22.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:22.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:23.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:23.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:24.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:24.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:24.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:24.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:25.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:25.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:26.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:26.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:27.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:27.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:28.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:28.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:29.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:29.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:30.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:30.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:31.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:31.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:31.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:31.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:32.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:32.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:33.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:33.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:34.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:34.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:35.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:35.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:36.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:36.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:37.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:37.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:38.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:38.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:39.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:39.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:40.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:40.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:41.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:41.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:42.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:42.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:43.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:43.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:43.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:43.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:44.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:44.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:45.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:45.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:46.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:46.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:47.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:47.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:48.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:48.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:49.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:49.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:50.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:50.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:51.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:51.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:52.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:52.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:53.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:53.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:54.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:54.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:55.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:55.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:55.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:55.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:56.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:56.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:57.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:57.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:58.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:58.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:53:59.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:53:59.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:00.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:00.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:01.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:01.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:02.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:02.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:03.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:03.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:04.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:04.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:05.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:05.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:06.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:06.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:06.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
parent.addChildBefore(n, expr);
parent.addChildAfter(n, expr);
parent.addChildrenAfter(n, expr);
parent.replaceChildAfter(n, expr);
18:54:07.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:07.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:07.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:08.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:08.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:09.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:09.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:10.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

if (n != null) {


}

if (expr != null) {


}

18:54:10.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:11.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:11.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:12.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:12.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:13.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (expr == null) {
    return null;
}

if (expr == null) {
    throw new IllegalArgumentException("Empty variable: " + expr);
}

18:54:13.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:14.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:14.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:15.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:15.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:16.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:16.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:17.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:17.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:18.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:18.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:19.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
parent.replaceChild(n, expr);
	n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            
null
parent.replaceChild(n, expr);
	Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            
null
parent.replaceChild(n, expr);
	Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            
null
parent.replaceChild(n, expr);
	Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            
null
parent.replaceChild(n, expr);
	elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            
null
parent.replaceChild(n, expr);
	Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            
null
parent.replaceChild(n, expr);
	Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            
null
parent.replaceChild(n, expr);
	Node expr = NodeUtil.newExpr(assign);
            
null

            reportCodeChange();
	parent.replaceChild(n, expr);

MOVE-BUGGY-STATEMENT

            reportCodeChange();

            return expr;
	parent.replaceChild(n, expr);

MOVE-BUGGY-STATEMENT
18:54:19.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:20.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:20.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:21.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:21.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:22.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:22.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:23.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:23.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:24.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:24.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:25.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:25.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:26.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:26.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:27.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:27.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:28.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:28.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:29.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:54:29.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:30.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:30.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===793
18:54:30.964 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node expr = NodeUtil.newExpr(assign);
Node expr = NodeUtil.getAssignedValue(assign);
Node expr = NodeUtil.getLoopCodeBlock(assign);
Node expr = NodeUtil.getConditionExpression(assign);
Node expr = NodeUtil.getFunctionBody(assign);
Node expr = NodeUtil.getAddingRoot(assign);
Node expr = NodeUtil.getRootOfQualifiedName(assign);
Node expr = NodeUtil.getPrototypeClassName(assign);
Node expr = NodeUtil.newUndefinedNode(assign);
Node expr = NodeUtil.getCatchBlock(assign);
Node expr = NodeUtil.getFunctionParameters(assign);
Node expr = NodeUtil.getBestLValue(assign);
Node expr = NodeUtil.getRValueOfLValue(assign);
Node expr = NodeUtil.getBestLValueOwner(assign);
18:54:31.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:32.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:32.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:32.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:32.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:33.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:33.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:34.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:34.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:35.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:35.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:36.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:36.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:37.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:37.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:38.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:38.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:39.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:39.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:40.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:40.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:41.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:41.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:42.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:42.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:43.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node expr = NodeUtil.newExpr(expr);
Node expr = NodeUtil.newExpr(hookNode);
Node expr = NodeUtil.newExpr(elseExpr);
Node expr = NodeUtil.newExpr(thenExpr);
Node expr = NodeUtil.newExpr(assignName);
Node expr = NodeUtil.newExpr(lhs);
Node expr = NodeUtil.newExpr(elseOp);
Node expr = NodeUtil.newExpr(thenOp);
Node expr = NodeUtil.newExpr(elseBranchIsExpressionBlock);
Node expr = NodeUtil.newExpr(thenBranchIsExpressionBlock);
Node expr = NodeUtil.newExpr(elseBranch);
Node expr = NodeUtil.newExpr(thenBranch);
Node expr = NodeUtil.newExpr(cond);
Node expr = NodeUtil.newExpr(parent);
Node expr = NodeUtil.newExpr(n);
Node expr = NodeUtil.newExpr(AND_PRECEDENCE);
Node expr = NodeUtil.newExpr(OR_PRECEDENCE);
Node expr = NodeUtil.newExpr(NOT_PRECEDENCE);
Node expr = NodeUtil.newExpr(REGEXP_ESCAPER);
Node expr = NodeUtil.newExpr(this.late);
Node expr = NodeUtil.newExpr(this.STRING_SPLIT_OVERHEAD);
Node expr = NodeUtil.newExpr(INVALID_REGULAR_EXPRESSION_FLAGS);
Node expr = NodeUtil.newExpr(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node expr = NodeUtil.newExpr(STANDARD_OBJECT_CONSTRUCTORS);
Node expr = NodeUtil.newExpr(REGEXP_FLAGS_RE);
Node expr = NodeUtil.newExpr();
Node expr = NodeUtil.newExpr(expr, assign);
Node expr = NodeUtil.newExpr(hookNode, assign);
Node expr = NodeUtil.newExpr(elseExpr, assign);
Node expr = NodeUtil.newExpr(thenExpr, assign);
Node expr = NodeUtil.newExpr(assignName, assign);
Node expr = NodeUtil.newExpr(lhs, assign);
Node expr = NodeUtil.newExpr(elseOp, assign);
Node expr = NodeUtil.newExpr(thenOp, assign);
Node expr = NodeUtil.newExpr(elseBranchIsExpressionBlock, assign);
Node expr = NodeUtil.newExpr(thenBranchIsExpressionBlock, assign);
Node expr = NodeUtil.newExpr(elseBranch, assign);
Node expr = NodeUtil.newExpr(thenBranch, assign);
Node expr = NodeUtil.newExpr(cond, assign);
Node expr = NodeUtil.newExpr(parent, assign);
Node expr = NodeUtil.newExpr(n, assign);
Node expr = NodeUtil.newExpr(AND_PRECEDENCE, assign);
Node expr = NodeUtil.newExpr(OR_PRECEDENCE, assign);
Node expr = NodeUtil.newExpr(NOT_PRECEDENCE, assign);
Node expr = NodeUtil.newExpr(REGEXP_ESCAPER, assign);
Node expr = NodeUtil.newExpr(this.late, assign);
Node expr = NodeUtil.newExpr(this.STRING_SPLIT_OVERHEAD, assign);
Node expr = NodeUtil.newExpr(INVALID_REGULAR_EXPRESSION_FLAGS, assign);
Node expr = NodeUtil.newExpr(DONT_TRAVERSE_FUNCTIONS_PREDICATE, assign);
Node expr = NodeUtil.newExpr(STANDARD_OBJECT_CONSTRUCTORS, assign);
Node expr = NodeUtil.newExpr(REGEXP_FLAGS_RE, assign);
Node expr = NodeUtil.newExpr(assign, expr);
Node expr = NodeUtil.newExpr(assign, hookNode);
Node expr = NodeUtil.newExpr(assign, elseExpr);
Node expr = NodeUtil.newExpr(assign, thenExpr);
Node expr = NodeUtil.newExpr(assign, assignName);
Node expr = NodeUtil.newExpr(assign, lhs);
Node expr = NodeUtil.newExpr(assign, elseOp);
Node expr = NodeUtil.newExpr(assign, thenOp);
Node expr = NodeUtil.newExpr(assign, elseBranchIsExpressionBlock);
Node expr = NodeUtil.newExpr(assign, thenBranchIsExpressionBlock);
Node expr = NodeUtil.newExpr(assign, elseBranch);
Node expr = NodeUtil.newExpr(assign, thenBranch);
Node expr = NodeUtil.newExpr(assign, cond);
Node expr = NodeUtil.newExpr(assign, parent);
Node expr = NodeUtil.newExpr(assign, n);
Node expr = NodeUtil.newExpr(assign, AND_PRECEDENCE);
Node expr = NodeUtil.newExpr(assign, OR_PRECEDENCE);
Node expr = NodeUtil.newExpr(assign, NOT_PRECEDENCE);
Node expr = NodeUtil.newExpr(assign, REGEXP_ESCAPER);
Node expr = NodeUtil.newExpr(assign, this.late);
Node expr = NodeUtil.newExpr(assign, this.STRING_SPLIT_OVERHEAD);
Node expr = NodeUtil.newExpr(assign, INVALID_REGULAR_EXPRESSION_FLAGS);
Node expr = NodeUtil.newExpr(assign, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node expr = NodeUtil.newExpr(assign, STANDARD_OBJECT_CONSTRUCTORS);
Node expr = NodeUtil.newExpr(assign, REGEXP_FLAGS_RE);
18:54:43.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:44.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:44.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:45.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:45.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:45.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:45.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:46.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:46.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:47.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:47.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:48.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:48.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:49.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:49.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:50.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:50.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:51.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:51.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:52.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:52.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:53.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:53.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:54.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:54.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:55.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:55.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:55.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:55.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:56.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:56.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:57.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:57.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:58.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:58.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:54:59.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:54:59.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:00.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:00.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:01.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:01.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:02.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:02.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:03.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:03.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:04.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:04.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:05.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:05.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:05.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:05.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:06.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:06.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:07.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:07.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:08.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:08.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:09.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:09.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:10.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:10.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:11.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:11.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:12.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:12.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:13.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:13.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:14.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:14.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:15.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:15.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:16.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:16.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:17.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:17.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:18.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:18.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:18.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:18.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:19.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:19.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:20.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:20.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:21.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:21.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:22.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:22.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:23.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:23.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:24.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:24.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:25.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:25.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:26.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:26.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:27.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:27.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:28.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:28.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:29.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:29.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:30.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:30.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:31.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:31.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:32.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:32.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:33.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:33.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:33.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:33.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:34.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:34.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:35.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:35.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:36.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:36.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:37.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:37.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:38.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:38.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:39.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:39.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:40.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:40.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:41.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:41.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:42.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:42.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:43.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:43.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:44.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:44.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:45.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:45.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:45.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:45.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:46.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:46.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:47.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:47.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:48.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:48.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:49.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:49.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:50.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:50.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:51.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:51.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:52.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:52.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:53.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node expr = expr.newExpr(assign);
Node expr = assign.newExpr(assign);
Node expr = hookNode.newExpr(assign);
Node expr = elseExpr.newExpr(assign);
Node expr = thenExpr.newExpr(assign);
Node expr = assignName.newExpr(assign);
Node expr = lhs.newExpr(assign);
Node expr = elseOp.newExpr(assign);
Node expr = thenOp.newExpr(assign);
Node expr = elseBranchIsExpressionBlock.newExpr(assign);
Node expr = thenBranchIsExpressionBlock.newExpr(assign);
Node expr = elseBranch.newExpr(assign);
Node expr = thenBranch.newExpr(assign);
Node expr = cond.newExpr(assign);
Node expr = parent.newExpr(assign);
Node expr = n.newExpr(assign);
Node expr = AND_PRECEDENCE.newExpr(assign);
Node expr = OR_PRECEDENCE.newExpr(assign);
Node expr = NOT_PRECEDENCE.newExpr(assign);
Node expr = REGEXP_ESCAPER.newExpr(assign);
Node expr = this.late.newExpr(assign);
Node expr = this.STRING_SPLIT_OVERHEAD.newExpr(assign);
Node expr = INVALID_REGULAR_EXPRESSION_FLAGS.newExpr(assign);
Node expr = DONT_TRAVERSE_FUNCTIONS_PREDICATE.newExpr(assign);
Node expr = STANDARD_OBJECT_CONSTRUCTORS.newExpr(assign);
Node expr = REGEXP_FLAGS_RE.newExpr(assign);
18:55:53.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:54.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:54.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:55.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:55.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:56.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:56.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:57.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:57.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:58.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:58.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:58.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:58.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:55:59.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:55:59.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:00.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:00.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:01.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:01.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:02.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:02.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:03.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:03.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:04.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:04.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:05.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:05.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:06.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:06.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:07.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:07.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:08.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:08.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:09.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:09.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:10.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:10.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:11.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:11.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:11.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:11.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:12.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:12.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:13.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:13.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:14.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:14.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:15.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:15.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:16.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:16.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:17.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (assign != null) {


}

18:56:17.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:18.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (assign == null) {
    return null;
}

if (assign == null) {
    throw new IllegalArgumentException("Empty variable: " + assign);
}

18:56:18.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:19.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:19.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:20.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(expr);
tryJoinForCondition(expr);
	Node expr = NodeUtil.newExpr(assign);
Node expr = NodeUtil.newExpr(assign);
	tryJoinForCondition(expr);
tryRemoveRepeatedStatements(expr);
tryRemoveRepeatedStatements(expr);
	Node expr = NodeUtil.newExpr(assign);
Node expr = NodeUtil.newExpr(assign);
	tryRemoveRepeatedStatements(expr);
18:56:20.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:21.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:21.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:22.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:22.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:23.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:23.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:24.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:24.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:25.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:25.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:26.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:56:26.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:26.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:26.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===791
18:56:27.022 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(assign);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(hookNode);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseExpr);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenExpr);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(assignName);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(lhs);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseBranchIsExpressionBlock);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenBranchIsExpressionBlock);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseBranch);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenBranch);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(cond);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(parent);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(n);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(AND_PRECEDENCE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(OR_PRECEDENCE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(NOT_PRECEDENCE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(REGEXP_ESCAPER);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(this.late);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(this.STRING_SPLIT_OVERHEAD);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(INVALID_REGULAR_EXPRESSION_FLAGS);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(STANDARD_OBJECT_CONSTRUCTORS);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(REGEXP_FLAGS_RE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref();
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(assign, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(hookNode, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseExpr, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenExpr, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(assignName, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(lhs, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseOp, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseBranchIsExpressionBlock, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenBranchIsExpressionBlock, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(elseBranch, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenBranch, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(cond, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(parent, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(n, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(AND_PRECEDENCE, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(OR_PRECEDENCE, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(NOT_PRECEDENCE, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(REGEXP_ESCAPER, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(this.late, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(this.STRING_SPLIT_OVERHEAD, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(INVALID_REGULAR_EXPRESSION_FLAGS, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(DONT_TRAVERSE_FUNCTIONS_PREDICATE, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(STANDARD_OBJECT_CONSTRUCTORS, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(REGEXP_FLAGS_RE, thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, assign);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, hookNode);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, elseExpr);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, thenExpr);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, assignName);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, lhs);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, elseOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, elseBranchIsExpressionBlock);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, thenBranchIsExpressionBlock);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, elseBranch);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, thenBranch);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, cond);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, parent);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, n);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, AND_PRECEDENCE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, OR_PRECEDENCE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, NOT_PRECEDENCE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, REGEXP_ESCAPER);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, this.late);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, this.STRING_SPLIT_OVERHEAD);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, INVALID_REGULAR_EXPRESSION_FLAGS);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, STANDARD_OBJECT_CONSTRUCTORS);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp, REGEXP_FLAGS_RE);
18:56:27.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:27.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:27.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:28.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:28.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:29.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:29.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:30.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:30.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:31.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:31.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:32.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:32.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:33.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:33.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:34.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:34.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:35.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:35.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:36.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:36.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:37.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:37.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:37.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:37.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:38.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:38.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:39.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:39.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:40.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:40.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:41.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:41.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:42.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:42.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:43.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:43.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:44.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:44.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:45.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:45.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:45.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:45.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:46.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:46.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:47.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:47.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:48.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:48.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:49.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:49.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:50.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:50.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:51.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:51.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:52.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:52.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:53.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:53.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:54.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:54.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:54.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:54.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:55.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:55.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:56.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:56.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:57.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:57.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:58.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:58.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:56:59.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:56:59.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:00.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:00.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:01.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:01.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:02.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:02.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:03.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:03.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:03.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:03.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:04.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:04.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:05.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:05.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:06.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:06.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:07.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:07.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:08.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:08.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:09.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:09.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:10.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:10.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:11.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:11.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:12.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:12.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:13.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:13.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:14.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:14.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:14.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:14.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:15.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:15.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:16.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:16.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:17.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:17.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:18.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:18.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:19.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:19.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:20.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:20.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:21.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:21.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:22.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:22.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:23.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:23.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:24.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:24.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:25.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:25.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:26.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:26.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:27.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:27.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:27.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:27.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:28.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:28.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:29.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:29.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:30.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:30.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:31.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:31.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:32.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:32.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:33.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp != null) {


}

if (assignName != null) {


}

if (hookNode != null) {


}

if (thenOp != null) {


}

18:57:33.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:34.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:34.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:35.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:35.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:36.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:36.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:37.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp == null) {
    return null;
}

if (thenOp == null) {
    throw new IllegalArgumentException("Empty variable: " + thenOp);
}

if (assignName == null) {
    return null;
}

if (assignName == null) {
    throw new IllegalArgumentException("Empty variable: " + assignName);
}

if (hookNode == null) {
    return null;
}

if (hookNode == null) {
    throw new IllegalArgumentException("Empty variable: " + hookNode);
}

if (thenOp == null) {
    return null;
}

if (thenOp == null) {
    throw new IllegalArgumentException("Empty variable: " + thenOp);
}

18:57:37.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:38.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:38.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:39.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:39.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:39.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:39.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:40.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:40.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:41.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:41.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:42.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:42.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:43.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:43.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:44.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(assign);
tryJoinForCondition(assign);
	Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
	tryJoinForCondition(assign);
tryRemoveRepeatedStatements(assign);
tryRemoveRepeatedStatements(assign);
	Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
	tryRemoveRepeatedStatements(assign);
18:57:44.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:45.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:45.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:46.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:46.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:47.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:47.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:48.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:48.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:48.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:48.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:49.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:57:49.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:50.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:50.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===790
18:57:50.827 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(hookNode);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseExpr);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenExpr);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(assignName);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(lhs);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseOp);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenOp);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseBranchIsExpressionBlock);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenBranchIsExpressionBlock);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseBranch);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenBranch);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(cond);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(parent);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(AND_PRECEDENCE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(OR_PRECEDENCE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(NOT_PRECEDENCE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(REGEXP_ESCAPER);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(this.late);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(this.STRING_SPLIT_OVERHEAD);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(INVALID_REGULAR_EXPRESSION_FLAGS);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(STANDARD_OBJECT_CONSTRUCTORS);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(REGEXP_FLAGS_RE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref();
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(hookNode, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseExpr, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenExpr, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(assignName, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(lhs, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseOp, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenOp, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseBranchIsExpressionBlock, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenBranchIsExpressionBlock, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(elseBranch, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(thenBranch, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(cond, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(parent, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(AND_PRECEDENCE, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(OR_PRECEDENCE, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(NOT_PRECEDENCE, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(REGEXP_ESCAPER, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(this.late, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(this.STRING_SPLIT_OVERHEAD, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(INVALID_REGULAR_EXPRESSION_FLAGS, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(DONT_TRAVERSE_FUNCTIONS_PREDICATE, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(STANDARD_OBJECT_CONSTRUCTORS, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(REGEXP_FLAGS_RE, n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, hookNode);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, elseExpr);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, thenExpr);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, assignName);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, lhs);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, elseOp);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, thenOp);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, elseBranchIsExpressionBlock);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, thenBranchIsExpressionBlock);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, elseBranch);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, thenBranch);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, cond);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, parent);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, AND_PRECEDENCE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, OR_PRECEDENCE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, NOT_PRECEDENCE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, REGEXP_ESCAPER);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, this.late);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, this.STRING_SPLIT_OVERHEAD);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, INVALID_REGULAR_EXPRESSION_FLAGS);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, STANDARD_OBJECT_CONSTRUCTORS);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n, REGEXP_FLAGS_RE);
18:57:50.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:51.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:51.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:52.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:52.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:53.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:53.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:54.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:54.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:55.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:55.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:56.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:56.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:57.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:57.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:58.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:58.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:59.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:59.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:57:59.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:57:59.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:00.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:00.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:01.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:01.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:02.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:02.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:03.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:03.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:04.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:04.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:05.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:05.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:06.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:06.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:07.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:07.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:08.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:08.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:09.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:09.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:09.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:09.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:10.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:10.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:11.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:11.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:12.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:12.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:13.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:13.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:14.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:14.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:15.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:15.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:16.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:16.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:17.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:17.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:18.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:18.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:19.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:19.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:20.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:20.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:21.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:21.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:21.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:21.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:22.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:22.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:23.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:23.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:24.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:24.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:25.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:25.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:26.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:26.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:27.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:27.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:28.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:28.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:29.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:29.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:30.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:30.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:31.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:31.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:32.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:32.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:33.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:33.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:34.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:34.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:35.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:35.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:35.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:35.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:36.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:36.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:37.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:37.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:38.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:38.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:39.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:39.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:40.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:40.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:41.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:41.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:42.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:42.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:43.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:43.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:44.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:44.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:44.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:44.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:45.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:45.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:46.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:46.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:47.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:47.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:48.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:48.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:49.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:49.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:50.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:50.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:51.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:51.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:52.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:52.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:53.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:53.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:53.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:53.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:54.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node hookNode = hookNode.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = elseExpr.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = thenExpr.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = assignName.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = lhs.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = elseOp.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = thenOp.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = elseBranchIsExpressionBlock.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = thenBranchIsExpressionBlock.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = elseBranch.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = thenBranch.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = cond.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = parent.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = n.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = AND_PRECEDENCE.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = OR_PRECEDENCE.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = NOT_PRECEDENCE.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = REGEXP_ESCAPER.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = this.late.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = this.STRING_SPLIT_OVERHEAD.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = INVALID_REGULAR_EXPRESSION_FLAGS.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = DONT_TRAVERSE_FUNCTIONS_PREDICATE.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = STANDARD_OBJECT_CONSTRUCTORS.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = REGEXP_FLAGS_RE.hook(cond, thenExpr, elseExpr).srcref(n);
18:58:54.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:55.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:55.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:56.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:56.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:57.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:57.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:58.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:58.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:58:59.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:58:59.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:00.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:00.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:01.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:01.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:02.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:02.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:02.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:02.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:03.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:03.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:04.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:04.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:05.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:05.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:06.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:06.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:07.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:07.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:08.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:08.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:09.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:09.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:10.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:10.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:11.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:11.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:12.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:12.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:13.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:13.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:14.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:14.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:14.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:14.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:15.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:15.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:16.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (cond != null) {


}

if (thenExpr != null) {


}

if (elseExpr != null) {


}

if (n != null) {


}

18:59:16.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:17.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:17.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:18.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:18.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:19.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:19.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:20.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (cond == null) {
    return null;
}

if (cond == null) {
    throw new IllegalArgumentException("Empty variable: " + cond);
}

if (thenExpr == null) {
    return null;
}

if (thenExpr == null) {
    throw new IllegalArgumentException("Empty variable: " + thenExpr);
}

if (elseExpr == null) {
    return null;
}

if (elseExpr == null) {
    throw new IllegalArgumentException("Empty variable: " + elseExpr);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

18:59:20.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:21.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:21.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:22.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:22.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:23.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:23.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:24.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:24.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:25.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:25.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:26.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:26.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:26.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:26.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:27.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(hookNode);
tryJoinForCondition(hookNode);
	Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
	tryJoinForCondition(hookNode);
tryRemoveRepeatedStatements(hookNode);
tryRemoveRepeatedStatements(hookNode);
	Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
	tryRemoveRepeatedStatements(hookNode);
18:59:27.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:28.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:28.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:29.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:29.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:30.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:30.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:31.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:31.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:32.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:32.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:33.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

18:59:33.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:34.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:34.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===788
18:59:34.557 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
elseOp.removeChild(elseExpr);
elseOp.removeChild(true, elseExpr);
elseOp.removeChild(false, elseExpr);
elseOp.removeChild(elseExpr, true);
elseOp.removeChild(elseExpr, false);
18:59:34.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:35.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:35.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:36.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:36.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:37.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:37.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:38.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
elseOp.removeChild(thenExpr);
elseOp.removeChild(assignName);
elseOp.removeChild(lhs);
elseOp.removeChild(thenOp);
elseOp.removeChild(elseBranchIsExpressionBlock);
elseOp.removeChild(thenBranchIsExpressionBlock);
elseOp.removeChild(elseBranch);
elseOp.removeChild(thenBranch);
elseOp.removeChild(cond);
elseOp.removeChild(parent);
elseOp.removeChild(n);
elseOp.removeChild(AND_PRECEDENCE);
elseOp.removeChild(OR_PRECEDENCE);
elseOp.removeChild(NOT_PRECEDENCE);
elseOp.removeChild(REGEXP_ESCAPER);
elseOp.removeChild(this.late);
elseOp.removeChild(this.STRING_SPLIT_OVERHEAD);
elseOp.removeChild(INVALID_REGULAR_EXPRESSION_FLAGS);
elseOp.removeChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
elseOp.removeChild(STANDARD_OBJECT_CONSTRUCTORS);
elseOp.removeChild(REGEXP_FLAGS_RE);
elseOp.removeChild();
elseOp.removeChild(thenExpr, elseExpr);
elseOp.removeChild(assignName, elseExpr);
elseOp.removeChild(lhs, elseExpr);
elseOp.removeChild(thenOp, elseExpr);
elseOp.removeChild(elseBranchIsExpressionBlock, elseExpr);
elseOp.removeChild(thenBranchIsExpressionBlock, elseExpr);
elseOp.removeChild(elseBranch, elseExpr);
elseOp.removeChild(thenBranch, elseExpr);
elseOp.removeChild(cond, elseExpr);
elseOp.removeChild(parent, elseExpr);
elseOp.removeChild(n, elseExpr);
elseOp.removeChild(AND_PRECEDENCE, elseExpr);
elseOp.removeChild(OR_PRECEDENCE, elseExpr);
elseOp.removeChild(NOT_PRECEDENCE, elseExpr);
elseOp.removeChild(REGEXP_ESCAPER, elseExpr);
elseOp.removeChild(this.late, elseExpr);
elseOp.removeChild(this.STRING_SPLIT_OVERHEAD, elseExpr);
elseOp.removeChild(INVALID_REGULAR_EXPRESSION_FLAGS, elseExpr);
elseOp.removeChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE, elseExpr);
elseOp.removeChild(STANDARD_OBJECT_CONSTRUCTORS, elseExpr);
elseOp.removeChild(REGEXP_FLAGS_RE, elseExpr);
elseOp.removeChild(elseExpr, thenExpr);
elseOp.removeChild(elseExpr, assignName);
elseOp.removeChild(elseExpr, lhs);
elseOp.removeChild(elseExpr, thenOp);
elseOp.removeChild(elseExpr, elseBranchIsExpressionBlock);
elseOp.removeChild(elseExpr, thenBranchIsExpressionBlock);
elseOp.removeChild(elseExpr, elseBranch);
elseOp.removeChild(elseExpr, thenBranch);
elseOp.removeChild(elseExpr, cond);
elseOp.removeChild(elseExpr, parent);
elseOp.removeChild(elseExpr, n);
elseOp.removeChild(elseExpr, AND_PRECEDENCE);
elseOp.removeChild(elseExpr, OR_PRECEDENCE);
elseOp.removeChild(elseExpr, NOT_PRECEDENCE);
elseOp.removeChild(elseExpr, REGEXP_ESCAPER);
elseOp.removeChild(elseExpr, this.late);
elseOp.removeChild(elseExpr, this.STRING_SPLIT_OVERHEAD);
elseOp.removeChild(elseExpr, INVALID_REGULAR_EXPRESSION_FLAGS);
elseOp.removeChild(elseExpr, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
elseOp.removeChild(elseExpr, STANDARD_OBJECT_CONSTRUCTORS);
elseOp.removeChild(elseExpr, REGEXP_FLAGS_RE);
18:59:38.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:39.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:39.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:40.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:40.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:40.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:40.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:41.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:41.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:42.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:42.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:43.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:43.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:44.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:44.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:45.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:45.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:46.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:46.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:47.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:47.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:48.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:48.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:49.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:49.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:50.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:50.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:50.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:50.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:51.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:51.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:52.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:52.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:53.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:53.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:54.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:54.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:55.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:55.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:56.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:56.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:57.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:57.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:58.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:58.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
18:59:59.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
18:59:59.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:00.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:00.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:01.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:01.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:01.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:01.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:02.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:02.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:03.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:03.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:04.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:04.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:05.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:05.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:06.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:06.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:07.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:07.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:08.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:08.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:09.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:09.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:10.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:10.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:11.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:11.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:11.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:11.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:12.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:12.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:13.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:13.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:14.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:14.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:15.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:15.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:16.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:16.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:17.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:17.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:18.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:18.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:19.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:19.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:19.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:19.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:20.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:20.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:21.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:21.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:22.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:22.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:23.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:23.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:24.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:24.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:25.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:25.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:26.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:26.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:27.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:27.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:28.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:28.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:29.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:29.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:29.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:29.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:30.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:30.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:31.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:31.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:32.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:32.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:33.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:33.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:34.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:34.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:35.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:35.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:36.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
elseOp.getChildBefore(elseExpr);
elseOp.clonePropsFrom(elseExpr);
elseOp.removeChildAfter(elseExpr);
elseOp.copyInformationFrom(elseExpr);
elseOp.copyInformationFromForTree(elseExpr);
elseOp.useSourceInfoFrom(elseExpr);
elseOp.srcref(elseExpr);
elseOp.useSourceInfoFromForTree(elseExpr);
elseOp.srcrefTree(elseExpr);
elseOp.useSourceInfoIfMissingFrom(elseExpr);
elseOp.useSourceInfoIfMissingFromForTree(elseExpr);
elseOp.checkTreeEquals(elseExpr);
elseOp.getIndexOfChild(elseExpr);
elseOp.addChildToFront(elseExpr);
elseOp.addChildToBack(elseExpr);
elseOp.addChildrenToFront(elseExpr);
elseOp.addChildrenToBack(elseExpr);
elseOp.hasChild(elseExpr);
elseOp.isEquivalentTo(elseExpr);
elseOp.isEquivalentToTyped(elseExpr);
elseOp.checkTreeEqualsImpl(elseExpr);
elseOp.checkTreeTypeAwareEqualsImpl(elseExpr);
19:00:36.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:37.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:37.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:38.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:38.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:38.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:38.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:39.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:39.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:40.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:40.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:41.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:41.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:42.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:42.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:43.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:43.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:44.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:44.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:45.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:45.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:46.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:46.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:46.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:46.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:47.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:47.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:48.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:48.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:49.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:49.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:50.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:50.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:51.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:51.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:52.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:52.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:53.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:53.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:54.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:54.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:54.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:54.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:55.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseOp != null) {


}

if (elseExpr != null) {


}

19:00:55.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:56.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:56.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:57.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseOp == null) {
    return null;
}

if (elseOp == null) {
    throw new IllegalArgumentException("Empty variable: " + elseOp);
}

if (elseExpr == null) {
    return null;
}

if (elseExpr == null) {
    throw new IllegalArgumentException("Empty variable: " + elseExpr);
}

19:00:57.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:58.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:58.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:00:59.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:00:59.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:00.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:00.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:01.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
elseOp.removeChild(elseExpr);
	n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            
null
elseOp.removeChild(elseExpr);
	Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            
null
elseOp.removeChild(elseExpr);
	Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            
null
elseOp.removeChild(elseExpr);
	Node elseExpr = elseOp.getLastChild();
            
null


            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
	elseOp.removeChild(elseExpr);

MOVE-BUGGY-STATEMENT


            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
	elseOp.removeChild(elseExpr);

MOVE-BUGGY-STATEMENT


            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
	elseOp.removeChild(elseExpr);

MOVE-BUGGY-STATEMENT


            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
	elseOp.removeChild(elseExpr);

MOVE-BUGGY-STATEMENT


            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();
	elseOp.removeChild(elseExpr);

MOVE-BUGGY-STATEMENT


            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
	elseOp.removeChild(elseExpr);

MOVE-BUGGY-STATEMENT
19:01:01.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:02.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:02.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:03.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:03.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:03.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:03.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:04.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:04.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:05.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:05.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:06.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:06.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:07.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:07.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:08.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:08.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:09.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:09.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:10.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:01:10.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:11.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:11.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===787
19:01:11.123 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node elseExpr = elseOp.getLastChild();
Node elseExpr = elseOp.getFirstChild();
Node elseExpr = elseOp.getNext();
Node elseExpr = elseOp.getLastSibling();
Node elseExpr = elseOp.getParent();
Node elseExpr = elseOp.detachFromParent();
Node elseExpr = elseOp.removeFirstChild();
Node elseExpr = elseOp.removeChildren();
Node elseExpr = elseOp.cloneNode();
Node elseExpr = elseOp.cloneTree();
19:01:11.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:12.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:12.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:12.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:12.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:13.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:13.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:14.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:14.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:15.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:15.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:16.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:16.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:17.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:17.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:18.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:18.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:19.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node elseExpr = elseOp.getLastChild(elseExpr);
Node elseExpr = elseOp.getLastChild(thenExpr);
Node elseExpr = elseOp.getLastChild(assignName);
Node elseExpr = elseOp.getLastChild(lhs);
Node elseExpr = elseOp.getLastChild(thenOp);
Node elseExpr = elseOp.getLastChild(elseBranchIsExpressionBlock);
Node elseExpr = elseOp.getLastChild(thenBranchIsExpressionBlock);
Node elseExpr = elseOp.getLastChild(elseBranch);
Node elseExpr = elseOp.getLastChild(thenBranch);
Node elseExpr = elseOp.getLastChild(cond);
Node elseExpr = elseOp.getLastChild(parent);
Node elseExpr = elseOp.getLastChild(n);
Node elseExpr = elseOp.getLastChild(AND_PRECEDENCE);
Node elseExpr = elseOp.getLastChild(OR_PRECEDENCE);
Node elseExpr = elseOp.getLastChild(NOT_PRECEDENCE);
Node elseExpr = elseOp.getLastChild(REGEXP_ESCAPER);
Node elseExpr = elseOp.getLastChild(this.late);
Node elseExpr = elseOp.getLastChild(this.STRING_SPLIT_OVERHEAD);
Node elseExpr = elseOp.getLastChild(INVALID_REGULAR_EXPRESSION_FLAGS);
Node elseExpr = elseOp.getLastChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node elseExpr = elseOp.getLastChild(STANDARD_OBJECT_CONSTRUCTORS);
Node elseExpr = elseOp.getLastChild(REGEXP_FLAGS_RE);
19:01:19.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:20.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:20.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:21.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:21.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:21.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:21.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:22.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:22.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:23.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:23.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:24.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:24.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:25.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:25.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:26.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:26.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:27.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:27.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:28.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:28.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:29.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:29.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:30.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:30.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:30.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:30.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:31.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:31.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:32.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:32.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:33.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:33.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:34.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:34.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:35.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:35.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:36.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:36.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:37.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:37.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:38.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:38.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:38.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node elseExpr = elseExpr.getLastChild();
Node elseExpr = thenExpr.getLastChild();
Node elseExpr = assignName.getLastChild();
Node elseExpr = lhs.getLastChild();
Node elseExpr = thenOp.getLastChild();
Node elseExpr = elseBranchIsExpressionBlock.getLastChild();
Node elseExpr = thenBranchIsExpressionBlock.getLastChild();
Node elseExpr = elseBranch.getLastChild();
Node elseExpr = thenBranch.getLastChild();
Node elseExpr = cond.getLastChild();
Node elseExpr = parent.getLastChild();
Node elseExpr = n.getLastChild();
Node elseExpr = AND_PRECEDENCE.getLastChild();
Node elseExpr = OR_PRECEDENCE.getLastChild();
Node elseExpr = NOT_PRECEDENCE.getLastChild();
Node elseExpr = REGEXP_ESCAPER.getLastChild();
Node elseExpr = this.late.getLastChild();
Node elseExpr = this.STRING_SPLIT_OVERHEAD.getLastChild();
Node elseExpr = INVALID_REGULAR_EXPRESSION_FLAGS.getLastChild();
Node elseExpr = DONT_TRAVERSE_FUNCTIONS_PREDICATE.getLastChild();
Node elseExpr = STANDARD_OBJECT_CONSTRUCTORS.getLastChild();
Node elseExpr = REGEXP_FLAGS_RE.getLastChild();
19:01:38.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:39.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:39.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:40.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:40.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:41.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:41.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:42.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:42.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:43.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:43.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:44.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:44.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:45.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:45.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:46.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:46.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:46.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:46.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:47.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:47.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:48.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:48.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:49.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:49.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:50.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:50.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:51.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:51.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:52.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:52.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:53.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:53.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:54.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:54.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:54.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:54.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:55.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:55.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:56.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:56.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:57.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:01:57.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:58.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseOp != null) {


}

19:01:58.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:01:59.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseOp == null) {
    return null;
}

if (elseOp == null) {
    throw new IllegalArgumentException("Empty variable: " + elseOp);
}

19:01:59.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:00.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:00.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:01.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(elseExpr);
tryJoinForCondition(elseExpr);
	Node elseExpr = elseOp.getLastChild();
Node elseExpr = elseOp.getLastChild();
	tryJoinForCondition(elseExpr);
tryRemoveRepeatedStatements(elseExpr);
tryRemoveRepeatedStatements(elseExpr);
	Node elseExpr = elseOp.getLastChild();
Node elseExpr = elseOp.getLastChild();
	tryRemoveRepeatedStatements(elseExpr);
19:02:01.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:02.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:02.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:02.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:02.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:03.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:03.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:04.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:04.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:05.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:05.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:06.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:02:06.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:07.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:07.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===786
19:02:07.498 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node thenExpr = thenOp.removeFirstChild();
Node thenExpr = thenOp.getFirstChild();
Node thenExpr = thenOp.getLastChild();
Node thenExpr = thenOp.getNext();
Node thenExpr = thenOp.getLastSibling();
Node thenExpr = thenOp.getParent();
Node thenExpr = thenOp.detachFromParent();
Node thenExpr = thenOp.removeChildren();
Node thenExpr = thenOp.cloneNode();
Node thenExpr = thenOp.cloneTree();
19:02:07.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:08.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:08.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:09.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:09.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:10.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:10.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:11.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:11.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:11.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:11.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:12.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:12.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:13.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:13.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:14.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:14.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:15.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node thenExpr = thenOp.removeFirstChild(thenExpr);
Node thenExpr = thenOp.removeFirstChild(assignName);
Node thenExpr = thenOp.removeFirstChild(lhs);
Node thenExpr = thenOp.removeFirstChild(elseOp);
Node thenExpr = thenOp.removeFirstChild(elseBranchIsExpressionBlock);
Node thenExpr = thenOp.removeFirstChild(thenBranchIsExpressionBlock);
Node thenExpr = thenOp.removeFirstChild(elseBranch);
Node thenExpr = thenOp.removeFirstChild(thenBranch);
Node thenExpr = thenOp.removeFirstChild(cond);
Node thenExpr = thenOp.removeFirstChild(parent);
Node thenExpr = thenOp.removeFirstChild(n);
Node thenExpr = thenOp.removeFirstChild(AND_PRECEDENCE);
Node thenExpr = thenOp.removeFirstChild(OR_PRECEDENCE);
Node thenExpr = thenOp.removeFirstChild(NOT_PRECEDENCE);
Node thenExpr = thenOp.removeFirstChild(REGEXP_ESCAPER);
Node thenExpr = thenOp.removeFirstChild(this.late);
Node thenExpr = thenOp.removeFirstChild(this.STRING_SPLIT_OVERHEAD);
Node thenExpr = thenOp.removeFirstChild(INVALID_REGULAR_EXPRESSION_FLAGS);
Node thenExpr = thenOp.removeFirstChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node thenExpr = thenOp.removeFirstChild(STANDARD_OBJECT_CONSTRUCTORS);
Node thenExpr = thenOp.removeFirstChild(REGEXP_FLAGS_RE);
19:02:15.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:16.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:16.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:17.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:17.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:18.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:18.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:19.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:19.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:19.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:19.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:20.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:20.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:21.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:21.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:22.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:22.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:23.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:23.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:24.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:24.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:25.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:25.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:26.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:26.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:27.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:27.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:28.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:28.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:28.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:28.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:29.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:29.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:30.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:30.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:31.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:31.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:32.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:32.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:33.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:33.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:34.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node thenExpr = thenExpr.removeFirstChild();
Node thenExpr = assignName.removeFirstChild();
Node thenExpr = lhs.removeFirstChild();
Node thenExpr = elseOp.removeFirstChild();
Node thenExpr = elseBranchIsExpressionBlock.removeFirstChild();
Node thenExpr = thenBranchIsExpressionBlock.removeFirstChild();
Node thenExpr = elseBranch.removeFirstChild();
Node thenExpr = thenBranch.removeFirstChild();
Node thenExpr = cond.removeFirstChild();
Node thenExpr = parent.removeFirstChild();
Node thenExpr = n.removeFirstChild();
Node thenExpr = AND_PRECEDENCE.removeFirstChild();
Node thenExpr = OR_PRECEDENCE.removeFirstChild();
Node thenExpr = NOT_PRECEDENCE.removeFirstChild();
Node thenExpr = REGEXP_ESCAPER.removeFirstChild();
Node thenExpr = this.late.removeFirstChild();
Node thenExpr = this.STRING_SPLIT_OVERHEAD.removeFirstChild();
Node thenExpr = INVALID_REGULAR_EXPRESSION_FLAGS.removeFirstChild();
Node thenExpr = DONT_TRAVERSE_FUNCTIONS_PREDICATE.removeFirstChild();
Node thenExpr = STANDARD_OBJECT_CONSTRUCTORS.removeFirstChild();
Node thenExpr = REGEXP_FLAGS_RE.removeFirstChild();
19:02:34.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:35.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:35.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:36.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:36.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:37.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:37.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:38.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:38.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:39.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:39.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:39.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:39.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:40.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:40.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:41.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:41.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:42.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:42.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:43.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:43.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:44.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:44.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:45.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:45.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:46.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:46.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:47.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:47.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:48.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:48.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:48.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:48.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:49.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:49.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:50.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:50.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:51.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:51.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:52.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:52.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:53.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp != null) {


}

19:02:53.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:54.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp == null) {
    return null;
}

if (thenOp == null) {
    throw new IllegalArgumentException("Empty variable: " + thenOp);
}

19:02:54.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:55.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:55.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:56.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(thenExpr);
tryJoinForCondition(thenExpr);
	Node thenExpr = thenOp.removeFirstChild();
Node thenExpr = thenOp.removeFirstChild();
	tryJoinForCondition(thenExpr);
tryRemoveRepeatedStatements(thenExpr);
tryRemoveRepeatedStatements(thenExpr);
	Node thenExpr = thenOp.removeFirstChild();
Node thenExpr = thenOp.removeFirstChild();
	tryRemoveRepeatedStatements(thenExpr);
19:02:56.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:57.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:57.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:57.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:57.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:58.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:58.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:02:59.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:02:59.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:00.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:00.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:01.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:03:01.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:02.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:02.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===785
19:03:02.629 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node assignName = thenOp.removeFirstChild();
Node assignName = thenOp.getFirstChild();
Node assignName = thenOp.getLastChild();
Node assignName = thenOp.getNext();
Node assignName = thenOp.getLastSibling();
Node assignName = thenOp.getParent();
Node assignName = thenOp.detachFromParent();
Node assignName = thenOp.removeChildren();
Node assignName = thenOp.cloneNode();
Node assignName = thenOp.cloneTree();
19:03:02.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:03.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:03.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:04.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:04.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:05.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:05.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:06.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:06.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:07.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:07.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:08.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:08.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:08.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:08.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:09.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:09.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:10.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node assignName = thenOp.removeFirstChild(assignName);
Node assignName = thenOp.removeFirstChild(lhs);
Node assignName = thenOp.removeFirstChild(elseOp);
Node assignName = thenOp.removeFirstChild(elseBranchIsExpressionBlock);
Node assignName = thenOp.removeFirstChild(thenBranchIsExpressionBlock);
Node assignName = thenOp.removeFirstChild(elseBranch);
Node assignName = thenOp.removeFirstChild(thenBranch);
Node assignName = thenOp.removeFirstChild(cond);
Node assignName = thenOp.removeFirstChild(parent);
Node assignName = thenOp.removeFirstChild(n);
Node assignName = thenOp.removeFirstChild(AND_PRECEDENCE);
Node assignName = thenOp.removeFirstChild(OR_PRECEDENCE);
Node assignName = thenOp.removeFirstChild(NOT_PRECEDENCE);
Node assignName = thenOp.removeFirstChild(REGEXP_ESCAPER);
Node assignName = thenOp.removeFirstChild(this.late);
Node assignName = thenOp.removeFirstChild(this.STRING_SPLIT_OVERHEAD);
Node assignName = thenOp.removeFirstChild(INVALID_REGULAR_EXPRESSION_FLAGS);
Node assignName = thenOp.removeFirstChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node assignName = thenOp.removeFirstChild(STANDARD_OBJECT_CONSTRUCTORS);
Node assignName = thenOp.removeFirstChild(REGEXP_FLAGS_RE);
19:03:10.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:11.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:11.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:12.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:12.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:13.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:13.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:14.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:14.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:15.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:15.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:16.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:16.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:17.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:17.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:17.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:17.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:18.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:18.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:19.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:19.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:20.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:20.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:21.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:21.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:22.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:22.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:23.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:23.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:24.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:24.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:25.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:25.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:26.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:26.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:26.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:26.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:27.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:27.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:28.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node assignName = assignName.removeFirstChild();
Node assignName = lhs.removeFirstChild();
Node assignName = elseOp.removeFirstChild();
Node assignName = elseBranchIsExpressionBlock.removeFirstChild();
Node assignName = thenBranchIsExpressionBlock.removeFirstChild();
Node assignName = elseBranch.removeFirstChild();
Node assignName = thenBranch.removeFirstChild();
Node assignName = cond.removeFirstChild();
Node assignName = parent.removeFirstChild();
Node assignName = n.removeFirstChild();
Node assignName = AND_PRECEDENCE.removeFirstChild();
Node assignName = OR_PRECEDENCE.removeFirstChild();
Node assignName = NOT_PRECEDENCE.removeFirstChild();
Node assignName = REGEXP_ESCAPER.removeFirstChild();
Node assignName = this.late.removeFirstChild();
Node assignName = this.STRING_SPLIT_OVERHEAD.removeFirstChild();
Node assignName = INVALID_REGULAR_EXPRESSION_FLAGS.removeFirstChild();
Node assignName = DONT_TRAVERSE_FUNCTIONS_PREDICATE.removeFirstChild();
Node assignName = STANDARD_OBJECT_CONSTRUCTORS.removeFirstChild();
Node assignName = REGEXP_FLAGS_RE.removeFirstChild();
19:03:28.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:29.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:29.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:30.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:30.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:31.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:31.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:32.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:32.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:33.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:33.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:34.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:34.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:35.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:35.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:35.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:35.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:36.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:36.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:37.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:37.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:38.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:38.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:39.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:39.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:40.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:40.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:41.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:41.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:42.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:42.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:43.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:43.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:43.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:43.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:44.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:44.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:45.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:45.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:46.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp != null) {


}

19:03:46.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:47.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp == null) {
    return null;
}

if (thenOp == null) {
    throw new IllegalArgumentException("Empty variable: " + thenOp);
}

19:03:47.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:48.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:48.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:49.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(assignName);
tryJoinForCondition(assignName);
	Node assignName = thenOp.removeFirstChild();
Node assignName = thenOp.removeFirstChild();
	tryJoinForCondition(assignName);
tryRemoveRepeatedStatements(assignName);
tryRemoveRepeatedStatements(assignName);
	Node assignName = thenOp.removeFirstChild();
Node assignName = thenOp.removeFirstChild();
	tryRemoveRepeatedStatements(assignName);
19:03:49.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:50.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:50.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:51.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:51.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:52.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:52.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:52.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:52.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:53.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:53.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:54.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:03:54.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:55.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:55.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===784
19:03:55.644 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
n.removeChild(cond);
n.removeChild(true, cond);
n.removeChild(false, cond);
n.removeChild(cond, true);
n.removeChild(cond, false);
19:03:55.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:56.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:56.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:57.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:57.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:58.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:03:58.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:03:59.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
n.removeChild(lhs);
n.removeChild(elseOp);
n.removeChild(thenOp);
n.removeChild(elseBranchIsExpressionBlock);
n.removeChild(thenBranchIsExpressionBlock);
n.removeChild(elseBranch);
n.removeChild(thenBranch);
n.removeChild(parent);
n.removeChild(AND_PRECEDENCE);
n.removeChild(OR_PRECEDENCE);
n.removeChild(NOT_PRECEDENCE);
n.removeChild(REGEXP_ESCAPER);
n.removeChild(this.late);
n.removeChild(this.STRING_SPLIT_OVERHEAD);
n.removeChild(INVALID_REGULAR_EXPRESSION_FLAGS);
n.removeChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
n.removeChild(STANDARD_OBJECT_CONSTRUCTORS);
n.removeChild(REGEXP_FLAGS_RE);
n.removeChild();
n.removeChild(lhs, cond);
n.removeChild(elseOp, cond);
n.removeChild(thenOp, cond);
n.removeChild(elseBranchIsExpressionBlock, cond);
n.removeChild(thenBranchIsExpressionBlock, cond);
n.removeChild(elseBranch, cond);
n.removeChild(thenBranch, cond);
n.removeChild(parent, cond);
n.removeChild(AND_PRECEDENCE, cond);
n.removeChild(OR_PRECEDENCE, cond);
n.removeChild(NOT_PRECEDENCE, cond);
n.removeChild(REGEXP_ESCAPER, cond);
n.removeChild(this.late, cond);
n.removeChild(this.STRING_SPLIT_OVERHEAD, cond);
n.removeChild(INVALID_REGULAR_EXPRESSION_FLAGS, cond);
n.removeChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE, cond);
n.removeChild(STANDARD_OBJECT_CONSTRUCTORS, cond);
n.removeChild(REGEXP_FLAGS_RE, cond);
n.removeChild(cond, lhs);
n.removeChild(cond, elseOp);
n.removeChild(cond, thenOp);
n.removeChild(cond, elseBranchIsExpressionBlock);
n.removeChild(cond, thenBranchIsExpressionBlock);
n.removeChild(cond, elseBranch);
n.removeChild(cond, thenBranch);
n.removeChild(cond, parent);
n.removeChild(cond, AND_PRECEDENCE);
n.removeChild(cond, OR_PRECEDENCE);
n.removeChild(cond, NOT_PRECEDENCE);
n.removeChild(cond, REGEXP_ESCAPER);
n.removeChild(cond, this.late);
n.removeChild(cond, this.STRING_SPLIT_OVERHEAD);
n.removeChild(cond, INVALID_REGULAR_EXPRESSION_FLAGS);
n.removeChild(cond, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
n.removeChild(cond, STANDARD_OBJECT_CONSTRUCTORS);
n.removeChild(cond, REGEXP_FLAGS_RE);
19:03:59.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:00.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:00.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:00.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:00.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:01.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:01.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:02.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:02.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:03.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:03.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:04.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:04.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:05.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:05.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:06.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:06.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:07.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:07.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:08.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:08.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:08.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:08.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:09.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:09.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:10.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:10.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:11.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:11.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:12.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:12.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:13.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:13.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:14.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:14.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:15.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:15.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:16.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:16.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:17.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:17.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:17.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:17.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:18.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:18.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:19.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:19.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:20.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:20.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:21.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:21.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:22.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:22.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:23.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:23.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:24.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:24.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:25.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:25.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:26.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:26.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:26.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:26.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:27.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:27.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:28.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:28.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:29.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:29.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:30.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:30.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:31.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:31.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:32.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:32.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:33.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:33.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:34.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:34.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:34.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:34.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:35.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:35.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:36.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:36.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:37.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:37.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:38.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:38.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:39.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:39.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:40.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:40.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:41.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:41.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:42.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:42.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:43.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:43.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:43.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:43.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:44.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:44.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:45.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:45.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:46.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:46.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:47.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:47.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:48.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
n.getChildBefore(cond);
n.clonePropsFrom(cond);
n.removeChildAfter(cond);
n.copyInformationFrom(cond);
n.copyInformationFromForTree(cond);
n.useSourceInfoFrom(cond);
n.srcref(cond);
n.useSourceInfoFromForTree(cond);
n.srcrefTree(cond);
n.useSourceInfoIfMissingFrom(cond);
n.useSourceInfoIfMissingFromForTree(cond);
n.checkTreeEquals(cond);
n.getIndexOfChild(cond);
n.addChildToFront(cond);
n.addChildToBack(cond);
n.addChildrenToFront(cond);
n.addChildrenToBack(cond);
n.hasChild(cond);
n.isEquivalentTo(cond);
n.isEquivalentToTyped(cond);
n.checkTreeEqualsImpl(cond);
n.checkTreeTypeAwareEqualsImpl(cond);
19:04:48.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:49.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:49.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:50.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:50.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:51.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:51.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:52.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:52.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:53.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:53.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:53.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:53.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:54.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:54.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:55.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:55.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:56.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:56.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:57.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:57.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:58.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:58.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:04:59.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:04:59.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:00.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:00.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:01.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:01.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:02.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:02.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:02.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:02.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:03.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:03.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:04.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:04.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:05.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:05.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:06.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:06.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:07.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:07.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:08.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (cond != null) {


}

19:05:08.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:09.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:09.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:10.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (cond == null) {
    return null;
}

if (cond == null) {
    throw new IllegalArgumentException("Empty variable: " + cond);
}

19:05:10.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:10.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:10.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:11.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:11.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:12.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:12.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:13.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

            Node assignName = thenOp.removeFirstChild();
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT

            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
	n.removeChild(cond);

MOVE-BUGGY-STATEMENT
19:05:13.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:14.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:14.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:15.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:15.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:16.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:16.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:17.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:17.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:18.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:18.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:19.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:19.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:19.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:19.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:20.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:20.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:21.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:21.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:22.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:05:22.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:23.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:23.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===777
19:05:23.532 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) || !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
19:05:23.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:24.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (lhs != null) {


}

if (elseOp != null) {


}

if (lhs != null) {


}

19:05:24.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:25.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:25.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:26.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:26.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:27.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (lhs == null) {
    return null;
}

if (lhs == null) {
    throw new IllegalArgumentException("Empty variable: " + lhs);
}

if (elseOp == null) {
    return null;
}

if (elseOp == null) {
    throw new IllegalArgumentException("Empty variable: " + elseOp);
}

if (lhs == null) {
    return null;
}

if (lhs == null) {
    throw new IllegalArgumentException("Empty variable: " + lhs);
}

19:05:27.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:28.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:28.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:29.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:29.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:29.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:29.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:30.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:30.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:31.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:31.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:32.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
	Node lhs = thenOp.getFirstChild();
          
null
19:05:32.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:33.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:05:33.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:34.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:34.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===776
19:05:34.606 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node lhs = thenOp.getFirstChild();
Node lhs = thenOp.getLastChild();
Node lhs = thenOp.getNext();
Node lhs = thenOp.getLastSibling();
Node lhs = thenOp.getParent();
Node lhs = thenOp.detachFromParent();
Node lhs = thenOp.removeFirstChild();
Node lhs = thenOp.removeChildren();
Node lhs = thenOp.cloneNode();
Node lhs = thenOp.cloneTree();
19:05:34.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:35.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:35.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:36.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:36.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:37.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:37.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:38.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:38.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:39.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:39.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:40.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:40.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:40.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:40.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:41.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:41.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:42.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node lhs = thenOp.getFirstChild(lhs);
Node lhs = thenOp.getFirstChild(elseOp);
Node lhs = thenOp.getFirstChild(elseBranchIsExpressionBlock);
Node lhs = thenOp.getFirstChild(thenBranchIsExpressionBlock);
Node lhs = thenOp.getFirstChild(elseBranch);
Node lhs = thenOp.getFirstChild(thenBranch);
Node lhs = thenOp.getFirstChild(cond);
Node lhs = thenOp.getFirstChild(parent);
Node lhs = thenOp.getFirstChild(n);
Node lhs = thenOp.getFirstChild(AND_PRECEDENCE);
Node lhs = thenOp.getFirstChild(OR_PRECEDENCE);
Node lhs = thenOp.getFirstChild(NOT_PRECEDENCE);
Node lhs = thenOp.getFirstChild(REGEXP_ESCAPER);
Node lhs = thenOp.getFirstChild(this.late);
Node lhs = thenOp.getFirstChild(this.STRING_SPLIT_OVERHEAD);
Node lhs = thenOp.getFirstChild(INVALID_REGULAR_EXPRESSION_FLAGS);
Node lhs = thenOp.getFirstChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node lhs = thenOp.getFirstChild(STANDARD_OBJECT_CONSTRUCTORS);
Node lhs = thenOp.getFirstChild(REGEXP_FLAGS_RE);
19:05:42.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:43.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:43.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:44.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:44.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:45.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:45.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:46.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:46.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:47.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:47.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:48.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:48.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:49.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:49.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:49.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:49.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:50.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:50.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:51.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:51.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:52.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:52.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:53.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:53.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:54.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:54.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:55.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:55.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:56.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:56.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:57.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:57.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:58.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:58.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:58.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:05:58.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:05:59.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node lhs = lhs.getFirstChild();
Node lhs = elseOp.getFirstChild();
Node lhs = elseBranchIsExpressionBlock.getFirstChild();
Node lhs = thenBranchIsExpressionBlock.getFirstChild();
Node lhs = elseBranch.getFirstChild();
Node lhs = thenBranch.getFirstChild();
Node lhs = cond.getFirstChild();
Node lhs = parent.getFirstChild();
Node lhs = n.getFirstChild();
Node lhs = AND_PRECEDENCE.getFirstChild();
Node lhs = OR_PRECEDENCE.getFirstChild();
Node lhs = NOT_PRECEDENCE.getFirstChild();
Node lhs = REGEXP_ESCAPER.getFirstChild();
Node lhs = this.late.getFirstChild();
Node lhs = this.STRING_SPLIT_OVERHEAD.getFirstChild();
Node lhs = INVALID_REGULAR_EXPRESSION_FLAGS.getFirstChild();
Node lhs = DONT_TRAVERSE_FUNCTIONS_PREDICATE.getFirstChild();
Node lhs = STANDARD_OBJECT_CONSTRUCTORS.getFirstChild();
Node lhs = REGEXP_FLAGS_RE.getFirstChild();
19:05:59.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:00.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:00.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:01.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:01.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:02.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:02.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:03.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:03.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:04.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:04.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:05.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:05.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:06.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:06.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:07.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:07.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:07.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:07.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:08.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:08.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:09.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:09.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:10.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:10.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:11.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:11.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:12.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:12.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:13.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:13.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:14.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:14.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:15.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:15.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:16.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:16.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:17.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp != null) {


}

19:06:17.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:17.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp == null) {
    return null;
}

if (thenOp == null) {
    throw new IllegalArgumentException("Empty variable: " + thenOp);
}

19:06:17.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:18.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:18.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:19.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(lhs);
tryJoinForCondition(lhs);
	Node lhs = thenOp.getFirstChild();
Node lhs = thenOp.getFirstChild();
	tryJoinForCondition(lhs);
tryRemoveRepeatedStatements(lhs);
tryRemoveRepeatedStatements(lhs);
	Node lhs = thenOp.getFirstChild();
Node lhs = thenOp.getFirstChild();
	tryRemoveRepeatedStatements(lhs);
19:06:19.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:20.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:20.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:21.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:21.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:22.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:22.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:23.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:23.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:24.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:24.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:25.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:06:25.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:26.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:26.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===232
19:06:26.168 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case ASSIGN:
if (ASSIGN == 0) {
    new IllegalArgumentException("");
}

if (ASSIGN != 0) {

    
}

if (ASSIGN > 0) {

    
}

19:06:26.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:26.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:26.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:27.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:27.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:27.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:06:27.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:27.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:27.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.AbstractPeepholeOptimization ===111
19:06:27.970 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return NodeUtil.mayEffectMutableState(n, compiler);
return NodeUtil.mayEffectMutableState(this.compiler, compiler);
return NodeUtil.mayEffectMutableState( compiler);
return NodeUtil.mayEffectMutableState(this.compiler, n, compiler);
return NodeUtil.mayEffectMutableState(n, this.compiler);
return NodeUtil.mayEffectMutableState(n, );
return NodeUtil.mayEffectMutableState(n, this.compiler, compiler);
return NodeUtil.mayEffectMutableState(n, compiler, this.compiler);
19:06:27.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:28.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:28.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:29.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:29.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:30.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:30.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:30.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:30.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:31.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:31.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:31.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:31.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:32.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
return NodeUtil.mayHaveSideEffects(n, compiler);
return NodeUtil.constructorCallHasSideEffects(n, compiler);
return NodeUtil.functionCallHasSideEffects(n, compiler);
return NodeUtil.nodeTypeMayHaveSideEffects(n, compiler);
19:06:32.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:33.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:33.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:34.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:34.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:34.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:34.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:35.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
return isASTNormalized().mayEffectMutableState(n, compiler);
return isEcmaScript5OrGreater().mayEffectMutableState(n, compiler);
return getCodingConvention().mayEffectMutableState(n, compiler);
19:06:35.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:36.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:36.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:36.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:36.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:37.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
return NodeUtil.mayEffectMutableState(true, n, compiler);
return NodeUtil.mayEffectMutableState(false, n, compiler);
return NodeUtil.mayEffectMutableState(n, true, compiler);
return NodeUtil.mayEffectMutableState(n, false, compiler);
return NodeUtil.mayEffectMutableState(n, compiler, true);
return NodeUtil.mayEffectMutableState(n, compiler, false);
19:06:37.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:38.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:38.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:39.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:39.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:39.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:39.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:40.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:40.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:41.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:41.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:42.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
return NodeUtil != null && NodeUtil.mayEffectMutableState(n, compiler);
return NodeUtil != null || NodeUtil.mayEffectMutableState(n, compiler);
19:06:42.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:42.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:42.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:43.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (compiler != null) {


}

19:06:43.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:44.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:44.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:44.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return true;
}

if (n == null) {
    return false;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (compiler == null) {
    return true;
}

if (compiler == null) {
    return false;
}

if (compiler == null) {
    throw new IllegalArgumentException("Empty variable: " + compiler);
}

19:06:44.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:45.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:45.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:46.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:46.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:47.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:47.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:47.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:47.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:48.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:48.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:49.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:06:49.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:50.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:50.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===775
19:06:50.073 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isImmutableValue(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isSymmetricOperation(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isRelationalOperation(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isEmptyBlock(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isSimpleOperator(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.mayEffectMutableState(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.mayHaveSideEffects(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.constructorCallHasSideEffects(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.functionCallHasSideEffects(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.callHasLocalResult(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.newHasLocalResult(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.nodeTypeMayHaveSideEffects(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.canBeSideEffected(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isUndefined(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isNullOrUndefined(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isImmutableResult(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isNumericResult(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isNumericResultHelper(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isBooleanResult(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isBooleanResultHelper(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.mayBeString(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.mayBeStringHelper(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.containsFunction(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.referencesThis(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isGet(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isVarDeclaration(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isExprAssign(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isExprCall(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isForIn(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isLoopStructure(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isWithinLoop(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isControlStructure(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isStatementBlock(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isStatement(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isStatementParent(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isSwitchCase(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isReferenceName(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isTryCatchNodeContainer(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.tryMergeBlock(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isCallOrNew(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isFunctionDeclaration(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isHoistedFunctionDeclaration(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isFunctionExpression(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isBleedingFunctionName(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isEmptyFunctionExpression(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isVarArgsFunction(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isFunctionObjectCall(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isFunctionObjectApply(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isLValue(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isObjectLitKey(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isGetOrSetKey(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isPrototypePropertyDeclaration(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isPrototypeProperty(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.hasFinally(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.hasCatchHandler(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isConstantName(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.evaluatesToLocalValue(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isCallOrNewTarget(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isToStringMethodCall(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isExpressionResultUsed(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isExecutedExactlyOnce(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isNaN(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
19:06:50.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:50.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:50.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:51.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:51.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:52.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:52.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:53.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:53.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:54.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:54.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:55.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:55.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:56.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:56.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:57.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:57.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:58.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:58.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:58.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:58.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:06:59.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:06:59.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:00.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:00.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:01.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:01.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:02.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:02.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:03.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:03.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:04.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:04.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:05.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:05.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:06.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:06.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:06.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:06.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:07.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:07.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:08.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:08.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:09.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:09.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:10.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:10.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:11.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:11.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:12.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:12.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:13.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:13.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:14.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:14.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:14.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:14.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:15.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:15.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:16.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:16.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:17.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:17.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:18.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:18.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:19.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:19.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:20.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:20.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:21.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:21.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:21.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:21.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:22.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:22.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:23.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:23.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:24.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:24.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:25.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:25.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:26.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:26.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:27.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:27.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:28.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:28.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:29.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:29.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:29.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:29.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:30.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:30.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:31.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:31.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:32.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:32.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:33.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:33.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:34.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:34.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:35.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:35.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:36.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:36.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:36.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:36.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:37.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:37.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:38.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:38.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:39.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:39.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:40.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:40.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:41.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:41.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:42.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:42.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:43.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:43.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:43.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:43.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:44.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil.isAssignmentOp(elseOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(elseBranchIsExpressionBlock)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenBranchIsExpressionBlock)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(elseBranch)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenBranch)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(cond)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(parent)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(n)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(AND_PRECEDENCE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(OR_PRECEDENCE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(NOT_PRECEDENCE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(REGEXP_ESCAPER)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(this.late)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(this.STRING_SPLIT_OVERHEAD)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(INVALID_REGULAR_EXPRESSION_FLAGS)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(DONT_TRAVERSE_FUNCTIONS_PREDICATE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(STANDARD_OBJECT_CONSTRUCTORS)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(REGEXP_FLAGS_RE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp()) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(elseOp, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(elseBranchIsExpressionBlock, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenBranchIsExpressionBlock, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(elseBranch, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenBranch, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(cond, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(parent, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(n, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(AND_PRECEDENCE, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(OR_PRECEDENCE, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(NOT_PRECEDENCE, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(REGEXP_ESCAPER, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(this.late, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(this.STRING_SPLIT_OVERHEAD, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(INVALID_REGULAR_EXPRESSION_FLAGS, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(DONT_TRAVERSE_FUNCTIONS_PREDICATE, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(STANDARD_OBJECT_CONSTRUCTORS, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(REGEXP_FLAGS_RE, thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, elseOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, elseBranchIsExpressionBlock)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, thenBranchIsExpressionBlock)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, elseBranch)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, thenBranch)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, cond)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, parent)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, n)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, AND_PRECEDENCE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, OR_PRECEDENCE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, NOT_PRECEDENCE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, REGEXP_ESCAPER)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, this.late)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, this.STRING_SPLIT_OVERHEAD)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, INVALID_REGULAR_EXPRESSION_FLAGS)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, DONT_TRAVERSE_FUNCTIONS_PREDICATE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, STANDARD_OBJECT_CONSTRUCTORS)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil.isAssignmentOp(thenOp, REGEXP_FLAGS_RE)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
19:07:44.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:45.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:45.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:46.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:46.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:47.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:47.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:48.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:48.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:49.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:49.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:50.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:50.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:50.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:50.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:51.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:51.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:52.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:52.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:53.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:53.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:54.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:54.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:55.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:55.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:56.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:56.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:57.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:57.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:58.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:58.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:59.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:59.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:07:59.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:07:59.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:00.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:00.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:01.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:01.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:02.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:02.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:03.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:03.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:04.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:04.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:05.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:05.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:06.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:06.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:07.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:07.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:08.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:08.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:08.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:08.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:09.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:09.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:10.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:10.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:11.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:11.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:12.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:12.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:13.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:13.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:14.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:14.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:15.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:15.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:16.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:16.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:16.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:16.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:17.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:17.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:18.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:18.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:19.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:19.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:20.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:20.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:21.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:21.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:22.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:22.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:23.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:23.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:24.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:24.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:25.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:25.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:26.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:26.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:27.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:27.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:27.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:27.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:28.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:28.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:29.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:29.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:30.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:30.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:31.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:31.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:32.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:32.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:33.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:33.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:34.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil != null && NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
if (NodeUtil != null || NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
19:08:34.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:34.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:35.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:35.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp != null) {


}

19:08:35.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:36.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp == null) {
    return null;
}

if (thenOp == null) {
    throw new IllegalArgumentException("Empty variable: " + thenOp);
}

19:08:36.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:37.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:37.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:38.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:08:38.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:39.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:39.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1446
19:08:39.432 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return res;
if (res != null) {


}

19:08:39.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:40.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (res == null) {
    return null;
}

if (res == null) {
    throw new IllegalArgumentException("Empty variable: " + res);
}

19:08:40.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:41.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:41.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:42.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
detachChildren();
	return res;
return res;
	detachChildren();
setQuotedString();
	return res;
return res;
	setQuotedString();
19:08:42.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:43.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:43.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:44.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:44.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:45.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:45.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:45.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:08:45.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:46.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:46.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1417
19:08:46.910 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
if (node2 != null) {


}

19:08:46.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:47.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

19:08:47.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:48.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:48.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:49.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:08:49.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:50.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:50.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===773
19:08:50.667 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
if (thenOp.getType() != elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
19:08:50.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:51.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp != null) {


}

if (elseOp != null) {


}

19:08:51.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:52.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:52.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:53.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp == null) {
    return null;
}

if (thenOp == null) {
    throw new IllegalArgumentException("Empty variable: " + thenOp);
}

if (elseOp == null) {
    return null;
}

if (elseOp == null) {
    throw new IllegalArgumentException("Empty variable: " + elseOp);
}

19:08:53.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:54.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:54.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:55.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:55.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:55.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:55.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:56.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
	Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      
null
if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
	Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      
null

      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
	if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }

MOVE-BUGGY-STATEMENT

      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
	if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }

MOVE-BUGGY-STATEMENT

      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
	if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }

MOVE-BUGGY-STATEMENT

      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
	if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }

MOVE-BUGGY-STATEMENT

      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
	if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }

MOVE-BUGGY-STATEMENT

      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
	if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }

MOVE-BUGGY-STATEMENT

      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
	if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }

MOVE-BUGGY-STATEMENT
19:08:56.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:57.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:57.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:58.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:58.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:08:59.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:08:59.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:00.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:00.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:01.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:01.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:02.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:02.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:02.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:02.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:03.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:03.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:04.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:09:04.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:05.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:05.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===772
19:09:05.619 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node elseOp = getBlockExpression(elseBranch).getFirstChild();
Node elseOp = getBlockExpression(elseBranch).getFirstChild(elseOp);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(thenOp);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(elseBranchIsExpressionBlock);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(thenBranchIsExpressionBlock);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(elseBranch);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(thenBranch);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(cond);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(parent);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(n);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(AND_PRECEDENCE);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(OR_PRECEDENCE);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(NOT_PRECEDENCE);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(REGEXP_ESCAPER);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(this.late);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(this.STRING_SPLIT_OVERHEAD);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(INVALID_REGULAR_EXPRESSION_FLAGS);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(STANDARD_OBJECT_CONSTRUCTORS);
Node elseOp = getBlockExpression(elseBranch).getFirstChild(REGEXP_FLAGS_RE);
19:09:05.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:06.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:06.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:07.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:07.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:08.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:08.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:09.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:09.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:10.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:10.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:10.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:10.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:11.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:11.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:12.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:12.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:13.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:13.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:14.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:14.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:15.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:15.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:16.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:16.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:17.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:17.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:17.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:17.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:18.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:18.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:19.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:19.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:20.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:20.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:21.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:21.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:22.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseBranch != null) {


}

19:09:22.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:23.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseBranch == null) {
    return null;
}

if (elseBranch == null) {
    throw new IllegalArgumentException("Empty variable: " + elseBranch);
}

19:09:23.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:24.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:24.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:24.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(elseOp);
tryJoinForCondition(elseOp);
	Node elseOp = getBlockExpression(elseBranch).getFirstChild();
Node elseOp = getBlockExpression(elseBranch).getFirstChild();
	tryJoinForCondition(elseOp);
tryRemoveRepeatedStatements(elseOp);
tryRemoveRepeatedStatements(elseOp);
	Node elseOp = getBlockExpression(elseBranch).getFirstChild();
Node elseOp = getBlockExpression(elseBranch).getFirstChild();
	tryRemoveRepeatedStatements(elseOp);
19:09:24.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:25.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:25.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:26.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:26.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:27.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:27.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:28.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:28.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:29.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:29.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:30.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:09:30.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:31.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:31.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===771
19:09:31.074 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node thenOp = getBlockExpression(thenBranch).getFirstChild();
Node thenOp = getBlockExpression(thenBranch).getFirstChild(thenOp);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(elseBranchIsExpressionBlock);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(thenBranchIsExpressionBlock);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(elseBranch);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(thenBranch);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(cond);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(parent);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(n);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(AND_PRECEDENCE);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(OR_PRECEDENCE);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(NOT_PRECEDENCE);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(REGEXP_ESCAPER);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(this.late);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(this.STRING_SPLIT_OVERHEAD);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(INVALID_REGULAR_EXPRESSION_FLAGS);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(STANDARD_OBJECT_CONSTRUCTORS);
Node thenOp = getBlockExpression(thenBranch).getFirstChild(REGEXP_FLAGS_RE);
19:09:31.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:31.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:31.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:32.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:32.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:33.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:33.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:34.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:34.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:35.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:35.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:36.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:36.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:37.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:37.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:38.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:38.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:38.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:38.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:39.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:39.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:40.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:40.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:41.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:41.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:42.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:42.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:43.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:43.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:44.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:44.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:45.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:45.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:46.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:46.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:46.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenBranch != null) {


}

19:09:46.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:47.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenBranch == null) {
    return null;
}

if (thenBranch == null) {
    throw new IllegalArgumentException("Empty variable: " + thenBranch);
}

19:09:47.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:48.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:48.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:49.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(thenOp);
tryJoinForCondition(thenOp);
	Node thenOp = getBlockExpression(thenBranch).getFirstChild();
Node thenOp = getBlockExpression(thenBranch).getFirstChild();
	tryJoinForCondition(thenOp);
tryRemoveRepeatedStatements(thenOp);
tryRemoveRepeatedStatements(thenOp);
	Node thenOp = getBlockExpression(thenBranch).getFirstChild();
Node thenOp = getBlockExpression(thenBranch).getFirstChild();
	tryRemoveRepeatedStatements(thenOp);
19:09:49.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:50.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:50.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:51.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:51.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:52.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:52.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:53.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:53.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:54.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:54.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:54.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:09:54.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:55.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:55.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.IR ===344
19:09:55.825 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return new Node(Token.HOOK, cond, trueval, falseval);
if (cond != null) {


}

if (trueval != null) {


}

if (falseval != null) {


}

19:09:55.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:56.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:56.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:57.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:57.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:57.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (cond == null) {
    return null;
}

if (cond == null) {
    throw new IllegalArgumentException("Empty variable: " + cond);
}

if (trueval == null) {
    return null;
}

if (trueval == null) {
    throw new IllegalArgumentException("Empty variable: " + trueval);
}

if (falseval == null) {
    return null;
}

if (falseval == null) {
    throw new IllegalArgumentException("Empty variable: " + falseval);
}

19:09:57.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:58.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:58.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:58.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:58.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:09:59.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:09:59.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:00.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:00.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:00.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:00.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:01.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:10:01.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:02.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:02.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.IR ===343
19:10:02.106 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkState(mayBeExpression(falseval));
Preconditions.checkState(true, mayBeExpression(falseval));
Preconditions.checkState(false, mayBeExpression(falseval));
Preconditions.checkState(mayBeExpression(falseval), true);
Preconditions.checkState(mayBeExpression(falseval), false);
19:10:02.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:02.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:02.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:03.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:03.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:04.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:04.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:04.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkState(cond, mayBeExpression(falseval));
Preconditions.checkState(trueval, mayBeExpression(falseval));
Preconditions.checkState(falseval, mayBeExpression(falseval));
Preconditions.checkState(mayBeExpression(falseval), cond);
Preconditions.checkState(mayBeExpression(falseval), trueval);
Preconditions.checkState(mayBeExpression(falseval), falseval);
19:10:04.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:05.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:05.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:05.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:05.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:06.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:06.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:07.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:07.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:07.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:07.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:08.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (falseval != null) {


}

19:10:08.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:08.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (falseval == null) {
    return null;
}

if (falseval == null) {
    throw new IllegalArgumentException("Empty variable: " + falseval);
}

19:10:08.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:09.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:09.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:10.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkState(mayBeExpression(falseval));
	Preconditions.checkState(mayBeExpression(cond));
    Preconditions.checkState(mayBeExpression(trueval));
    
null
Preconditions.checkState(mayBeExpression(falseval));
	Preconditions.checkState(mayBeExpression(trueval));
    
null

    return new Node(Token.HOOK, cond, trueval, falseval);
	Preconditions.checkState(mayBeExpression(falseval));

MOVE-BUGGY-STATEMENT
19:10:10.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:10.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:10.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:11.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:11.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:12.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:10:12.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:12.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:12.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.IR ===342
19:10:12.719 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkState(mayBeExpression(trueval));
Preconditions.checkState(true, mayBeExpression(trueval));
Preconditions.checkState(false, mayBeExpression(trueval));
Preconditions.checkState(mayBeExpression(trueval), true);
Preconditions.checkState(mayBeExpression(trueval), false);
19:10:12.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:13.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:13.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:13.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:13.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:14.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:14.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:15.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkState(cond, mayBeExpression(trueval));
Preconditions.checkState(trueval, mayBeExpression(trueval));
Preconditions.checkState(falseval, mayBeExpression(trueval));
Preconditions.checkState(mayBeExpression(trueval), cond);
Preconditions.checkState(mayBeExpression(trueval), trueval);
Preconditions.checkState(mayBeExpression(trueval), falseval);
19:10:15.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:15.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:15.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:16.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:16.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:17.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:17.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:17.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:17.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:18.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:18.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:18.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (trueval != null) {


}

19:10:18.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:19.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (trueval == null) {
    return null;
}

if (trueval == null) {
    throw new IllegalArgumentException("Empty variable: " + trueval);
}

19:10:19.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:20.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:20.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:20.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkState(mayBeExpression(trueval));
	Preconditions.checkState(mayBeExpression(cond));
    
null

    Preconditions.checkState(mayBeExpression(falseval));
	Preconditions.checkState(mayBeExpression(trueval));

MOVE-BUGGY-STATEMENT

    Preconditions.checkState(mayBeExpression(falseval));
    return new Node(Token.HOOK, cond, trueval, falseval);
	Preconditions.checkState(mayBeExpression(trueval));

MOVE-BUGGY-STATEMENT
19:10:20.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:21.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:21.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:22.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:22.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:22.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:10:22.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:23.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:23.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.IR ===341
19:10:23.364 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkState(mayBeExpression(cond));
Preconditions.checkState(true, mayBeExpression(cond));
Preconditions.checkState(false, mayBeExpression(cond));
Preconditions.checkState(mayBeExpression(cond), true);
Preconditions.checkState(mayBeExpression(cond), false);
19:10:23.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:23.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:23.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:24.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:24.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:25.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:25.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:25.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkState(cond, mayBeExpression(cond));
Preconditions.checkState(trueval, mayBeExpression(cond));
Preconditions.checkState(falseval, mayBeExpression(cond));
Preconditions.checkState(mayBeExpression(cond), cond);
Preconditions.checkState(mayBeExpression(cond), trueval);
Preconditions.checkState(mayBeExpression(cond), falseval);
19:10:25.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:26.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:26.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:27.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:27.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:27.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:27.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:28.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:28.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:28.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:28.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:29.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (cond != null) {


}

19:10:29.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:30.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (cond == null) {
    return null;
}

if (cond == null) {
    throw new IllegalArgumentException("Empty variable: " + cond);
}

19:10:30.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:30.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:30.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:31.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

    Preconditions.checkState(mayBeExpression(trueval));
	Preconditions.checkState(mayBeExpression(cond));

MOVE-BUGGY-STATEMENT

    Preconditions.checkState(mayBeExpression(trueval));
    Preconditions.checkState(mayBeExpression(falseval));
	Preconditions.checkState(mayBeExpression(cond));

MOVE-BUGGY-STATEMENT

    Preconditions.checkState(mayBeExpression(trueval));
    Preconditions.checkState(mayBeExpression(falseval));
    return new Node(Token.HOOK, cond, trueval, falseval);
	Preconditions.checkState(mayBeExpression(cond));

MOVE-BUGGY-STATEMENT
19:10:31.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:32.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:32.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:32.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:32.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:33.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:10:33.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:34.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:34.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1433
19:10:34.132 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return new NodeMismatch(this, node2);
if (node2 != null) {


}

19:10:34.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:35.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

19:10:35.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:36.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:36.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:36.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
addChildToFront(node2);
addChildToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToFront(node2);
addChildToBack(node2);
addChildToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToBack(node2);
addChildrenToFront(node2);
addChildrenToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToFront(node2);
addChildrenToBack(node2);
addChildrenToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToBack(node2);
removeChild(node2);
removeChild(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	removeChild(node2);
detachChildren();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	detachChildren();
setQuotedString();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	setQuotedString();
19:10:36.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:37.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:37.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:38.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:38.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:39.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:39.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:40.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:40.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:41.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:41.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:42.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:42.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:43.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:43.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:44.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:44.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:45.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:45.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:46.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:46.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:47.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:47.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:48.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:48.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:49.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:49.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:50.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:50.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:51.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:51.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:51.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:51.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:52.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:52.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:53.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:53.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:54.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:10:54.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:55.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:55.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.CodeGenerator ===515
19:10:55.652 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
break;

19:10:55.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:56.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:56.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.CodeGenerator ===513
19:10:56.539 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
add(first);
add(true, first);
add(false, first);
add(first, true);
add(first, false);
19:10:56.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:57.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:57.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:58.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:58.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:10:59.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:10:59.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:00.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
add(last);
add(childCount);
add(opstr);
add(type);
add(n);
add(context);
add(LT_ESCAPED);
add(GT_ESCAPED);
add(this.ESCAPED_JS_STRINGS);
add(HEX_CHARS);
add(this.cc);
add(this.outputCharsetEncoder);
add(this.preferSingleQuotes);
add(this.trustedStrings);
add();
add(last, first);
add(childCount, first);
add(opstr, first);
add(type, first);
add(n, first);
add(context, first);
add(LT_ESCAPED, first);
add(GT_ESCAPED, first);
add(this.ESCAPED_JS_STRINGS, first);
add(HEX_CHARS, first);
add(this.cc, first);
add(this.outputCharsetEncoder, first);
add(this.preferSingleQuotes, first);
add(this.trustedStrings, first);
add(first, last);
add(first, childCount);
add(first, opstr);
add(first, type);
add(first, n);
add(first, context);
add(first, LT_ESCAPED);
add(first, GT_ESCAPED);
add(first, this.ESCAPED_JS_STRINGS);
add(first, HEX_CHARS);
add(first, this.cc);
add(first, this.outputCharsetEncoder);
add(first, this.preferSingleQuotes);
add(first, this.trustedStrings);
19:11:00.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:00.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:00.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:01.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:01.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:02.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:02.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:03.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:03.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:04.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:04.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:05.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:05.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:06.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:06.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:07.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:07.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:07.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:07.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:08.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:08.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:09.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:09.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:10.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:10.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:11.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:11.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:12.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:12.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:13.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:13.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:14.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:14.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:15.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:15.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:15.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:15.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:16.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:16.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:17.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:17.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:18.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:18.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:19.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:19.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:20.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:20.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:21.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:21.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:22.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:22.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:22.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:22.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:23.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:23.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:24.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:24.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:25.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:25.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:26.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:26.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:27.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:27.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:28.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:28.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:29.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:29.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:29.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:29.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:30.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:30.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:31.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:31.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:32.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:32.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:33.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:33.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:34.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:34.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:35.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:35.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:36.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:36.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:36.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:36.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:37.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
getFirstNonEmptyChild(first);
addList(first);
addArrayList(first);
addCaseBody(first);
addAllSiblings(first);
addJsString(first);
isIndirectEval(first);
isOneExactlyFunctionOrDo(first);
19:11:37.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:38.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:38.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:39.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:39.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:40.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:40.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:41.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:41.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:42.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:42.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:43.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:43.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:43.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:43.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:44.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (first != null) {


}

19:11:44.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:45.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (first == null) {
    return;
}

if (first == null) {
    throw new IllegalArgumentException("Empty variable: " + first);
}

19:11:45.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:46.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:46.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:47.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
add(first);
	addExpr(first, NodeUtil.precedence(type), context);
          cc.addOp(o, false);
        } else {
          cc.addOp(o, false);
          
null
add(first);
	cc.addOp(o, false);
        } else {
          cc.addOp(o, false);
          
null
add(first);
	cc.addOp(o, false);
          
null
19:11:47.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:48.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:48.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:49.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:49.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:50.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:11:50.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:51.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:51.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.CodeGenerator ===512
19:11:51.089 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
cc.addOp(o, false);
cc.addOp(true, o, false);
cc.addOp(false, o, false);
cc.addOp(o, true);
cc.addOp(o);
cc.addOp(o, true, false);
cc.addOp(o, false, false);
cc.addOp(o, false, true);
cc.addOp(o, false, false);
19:11:51.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:51.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:51.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:52.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:52.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:53.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:53.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:54.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:54.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:55.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:55.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:56.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:56.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:57.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:57.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:58.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
cc.addOp(last, false);
cc.addOp(first, false);
cc.addOp(childCount, false);
cc.addOp(opstr, false);
cc.addOp(type, false);
cc.addOp(n, false);
cc.addOp(context, false);
cc.addOp(LT_ESCAPED, false);
cc.addOp(GT_ESCAPED, false);
cc.addOp(this.ESCAPED_JS_STRINGS, false);
cc.addOp(HEX_CHARS, false);
cc.addOp(this.outputCharsetEncoder, false);
cc.addOp(this.preferSingleQuotes, false);
cc.addOp(this.trustedStrings, false);
cc.addOp( false);
cc.addOp(last, o, false);
cc.addOp(first, o, false);
cc.addOp(childCount, o, false);
cc.addOp(opstr, o, false);
cc.addOp(type, o, false);
cc.addOp(n, o, false);
cc.addOp(context, o, false);
cc.addOp(LT_ESCAPED, o, false);
cc.addOp(GT_ESCAPED, o, false);
cc.addOp(this.ESCAPED_JS_STRINGS, o, false);
cc.addOp(HEX_CHARS, o, false);
cc.addOp(this.outputCharsetEncoder, o, false);
cc.addOp(this.preferSingleQuotes, o, false);
cc.addOp(this.trustedStrings, o, false);
cc.addOp(o, last, false);
cc.addOp(o, first, false);
cc.addOp(o, childCount, false);
cc.addOp(o, opstr, false);
cc.addOp(o, type, false);
cc.addOp(o, n, false);
cc.addOp(o, context, false);
cc.addOp(o, LT_ESCAPED, false);
cc.addOp(o, GT_ESCAPED, false);
cc.addOp(o, this.ESCAPED_JS_STRINGS, false);
cc.addOp(o, HEX_CHARS, false);
cc.addOp(o, this.outputCharsetEncoder, false);
cc.addOp(o, this.preferSingleQuotes, false);
cc.addOp(o, this.trustedStrings, false);
cc.addOp(o, false, last);
cc.addOp(o, false, first);
cc.addOp(o, false, childCount);
cc.addOp(o, false, opstr);
cc.addOp(o, false, type);
cc.addOp(o, false, n);
cc.addOp(o, false, context);
cc.addOp(o, false, LT_ESCAPED);
cc.addOp(o, false, GT_ESCAPED);
cc.addOp(o, false, this.ESCAPED_JS_STRINGS);
cc.addOp(o, false, HEX_CHARS);
cc.addOp(o, false, this.outputCharsetEncoder);
cc.addOp(o, false, this.preferSingleQuotes);
cc.addOp(o, false, this.trustedStrings);
19:11:58.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:59.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:59.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:11:59.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:11:59.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:00.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:00.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:01.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:01.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:02.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:02.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:03.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:03.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:04.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:04.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:05.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:05.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:06.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:06.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:07.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:07.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:08.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:08.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:08.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:08.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:09.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:09.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:10.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:10.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:11.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:11.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:12.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:12.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:13.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:13.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:14.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:14.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:15.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:15.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:16.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:16.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:16.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:16.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:17.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:17.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:18.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:18.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:19.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:19.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:20.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:20.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:21.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:21.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:22.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:22.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:23.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:23.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:24.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:24.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:24.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:24.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:25.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:25.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:26.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:26.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:27.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:27.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:28.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:28.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:29.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:29.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:30.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:30.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:31.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:31.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:31.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:31.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:32.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:32.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:33.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:33.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:34.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:34.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:35.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:35.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:36.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:36.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:37.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:37.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:38.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:38.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:39.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:39.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:40.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:40.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:40.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:40.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:41.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:41.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:42.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:42.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:43.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:43.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:44.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:44.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:45.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:45.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:46.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:46.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:47.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:47.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:48.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:48.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:48.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
cc.appendOp(o, false);
cc.breakAfterBlockFor(o, false);
19:12:48.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:49.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:49.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:50.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (cc != null) {


}

if (o != null) {


}

19:12:50.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:51.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:51.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:52.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (cc == null) {
    return;
}

if (cc == null) {
    throw new IllegalArgumentException("Empty variable: " + cc);
}

if (o == null) {
    return;
}

if (o == null) {
    throw new IllegalArgumentException("Empty variable: " + o);
}

19:12:52.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:53.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:53.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:54.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:54.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:55.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:55.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:56.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
cc.addOp(o, false);
	addExpr(first, NodeUtil.precedence(type), context);
          cc.addOp(o, false);
        } else {
          
null
cc.addOp(o, false);
	cc.addOp(o, false);
        } else {
          
null

          add(first);
	cc.addOp(o, false);

MOVE-BUGGY-STATEMENT
19:12:56.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:56.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:56.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:57.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:57.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:58.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:12:58.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:12:59.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:12:59.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===133
19:12:59.561 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case INPUT_ID:
if (INPUT_ID == 0) {
    new IllegalArgumentException("");
}

if (INPUT_ID != 0) {

    
}

if (INPUT_ID > 0) {

    
}

19:12:59.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:00.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:00.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:00.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:00.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:01.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
setType(INPUT_ID);
setType(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	setType(INPUT_ID);
removeProp(INPUT_ID);
removeProp(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	removeProp(INPUT_ID);
setLength(INPUT_ID);
setLength(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	setLength(INPUT_ID);
setLineno(INPUT_ID);
setLineno(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	setLineno(INPUT_ID);
setCharno(INPUT_ID);
setCharno(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	setCharno(INPUT_ID);
setSourceEncodedPosition(INPUT_ID);
setSourceEncodedPosition(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	setSourceEncodedPosition(INPUT_ID);
setSourceEncodedPositionForTree(INPUT_ID);
setSourceEncodedPositionForTree(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	setSourceEncodedPositionForTree(INPUT_ID);
detachChildren();
	case INPUT_ID:
case INPUT_ID:
	detachChildren();
setSideEffectFlags(INPUT_ID);
setSideEffectFlags(INPUT_ID);
	case INPUT_ID:
case INPUT_ID:
	setSideEffectFlags(INPUT_ID);
setQuotedString();
	case INPUT_ID:
case INPUT_ID:
	setQuotedString();
19:13:01.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:02.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:02.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:03.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:03.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:03.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:03.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:04.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:04.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:05.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:05.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:06.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:06.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:07.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:07.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:08.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:08.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:09.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:09.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:10.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:10.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:11.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:11.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:12.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:12.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:13.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:13.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:14.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:14.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:15.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:15.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:16.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:16.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:17.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:17.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:18.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:18.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:19.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:19.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:19.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:19.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:20.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:20.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:21.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:21.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:22.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:22.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:23.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:23.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:24.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:24.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:25.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:25.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:26.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:26.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:27.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:13:27.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:28.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:28.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===121
19:13:28.507 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case SYNTHETIC_BLOCK_PROP:
if (SYNTHETIC_BLOCK_PROP == 0) {
    new IllegalArgumentException("");
}

if (SYNTHETIC_BLOCK_PROP != 0) {

    
}

if (SYNTHETIC_BLOCK_PROP > 0) {

    
}

19:13:28.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:29.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:29.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:29.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:29.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:30.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
setType(SYNTHETIC_BLOCK_PROP);
setType(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setType(SYNTHETIC_BLOCK_PROP);
removeProp(SYNTHETIC_BLOCK_PROP);
removeProp(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	removeProp(SYNTHETIC_BLOCK_PROP);
setLength(SYNTHETIC_BLOCK_PROP);
setLength(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setLength(SYNTHETIC_BLOCK_PROP);
setLineno(SYNTHETIC_BLOCK_PROP);
setLineno(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setLineno(SYNTHETIC_BLOCK_PROP);
setCharno(SYNTHETIC_BLOCK_PROP);
setCharno(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setCharno(SYNTHETIC_BLOCK_PROP);
setSourceEncodedPosition(SYNTHETIC_BLOCK_PROP);
setSourceEncodedPosition(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setSourceEncodedPosition(SYNTHETIC_BLOCK_PROP);
setSourceEncodedPositionForTree(SYNTHETIC_BLOCK_PROP);
setSourceEncodedPositionForTree(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setSourceEncodedPositionForTree(SYNTHETIC_BLOCK_PROP);
detachChildren();
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	detachChildren();
setSideEffectFlags(SYNTHETIC_BLOCK_PROP);
setSideEffectFlags(SYNTHETIC_BLOCK_PROP);
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setSideEffectFlags(SYNTHETIC_BLOCK_PROP);
setQuotedString();
	case SYNTHETIC_BLOCK_PROP:
case SYNTHETIC_BLOCK_PROP:
	setQuotedString();
19:13:30.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:31.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:31.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:32.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:32.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:33.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:33.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:33.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:33.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:34.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:34.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:35.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:35.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:36.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:36.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:37.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:37.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:38.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:38.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:39.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:39.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:40.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:40.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:41.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:41.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:42.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:42.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:43.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:43.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:44.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:44.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:45.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:45.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:46.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:46.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:47.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:47.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:48.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:48.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:49.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:49.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:50.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:50.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:51.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:51.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:52.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:52.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:53.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:53.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:53.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:53.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:54.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:54.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:55.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:55.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:56.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:13:56.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:57.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:57.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.InputId ===74
19:13:57.687 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return "InputId: " + getIdName();

19:13:57.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:58.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:58.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===956
19:13:58.312 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
sb.append(getDouble());
sb.append(true, getDouble());
sb.append(false, getDouble());
sb.append(getDouble(), true);
sb.append(getDouble(), false);
19:13:58.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:13:59.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:13:59.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:00.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:00.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:01.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:01.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:02.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
sb.append(printSource, getDouble());
sb.append(printAnnotations, getDouble());
sb.append(printType, getDouble());
sb.append(JSDOC_INFO_PROP, getDouble());
sb.append(VAR_ARGS_NAME, getDouble());
sb.append(INCRDECR_PROP, getDouble());
sb.append(QUOTED_PROP, getDouble());
sb.append(OPT_ARG_NAME, getDouble());
sb.append(SYNTHETIC_BLOCK_PROP, getDouble());
sb.append(EMPTY_BLOCK, getDouble());
sb.append(ORIGINALNAME_PROP, getDouble());
sb.append(SIDE_EFFECT_FLAGS, getDouble());
sb.append(IS_CONSTANT_NAME, getDouble());
sb.append(IS_NAMESPACE, getDouble());
sb.append(IS_DISPATCHER, getDouble());
sb.append(DIRECTIVES, getDouble());
sb.append(DIRECT_EVAL, getDouble());
sb.append(FREE_CALL, getDouble());
sb.append(STATIC_SOURCE_FILE, getDouble());
sb.append(LENGTH, getDouble());
sb.append(INPUT_ID, getDouble());
sb.append(SLASH_V, getDouble());
sb.append(INFERRED_FUNCTION, getDouble());
sb.append(LAST_PROP, getDouble());
sb.append(DECR_FLAG, getDouble());
sb.append(POST_FLAG, getDouble());
sb.append(this.type, getDouble());
sb.append(this.next, getDouble());
sb.append(this.first, getDouble());
sb.append(this.last, getDouble());
sb.append(this.propListHead, getDouble());
sb.append(COLUMN_BITS, getDouble());
sb.append(MAX_COLUMN_NUMBER, getDouble());
sb.append(COLUMN_MASK, getDouble());
sb.append(this.sourcePosition, getDouble());
sb.append(this.jsType, getDouble());
sb.append(this.parent, getDouble());
sb.append(FLAG_GLOBAL_STATE_UNMODIFIED, getDouble());
sb.append(FLAG_THIS_UNMODIFIED, getDouble());
sb.append(FLAG_ARGUMENTS_UNMODIFIED, getDouble());
sb.append(FLAG_NO_THROWS, getDouble());
sb.append(FLAG_LOCAL_RESULTS, getDouble());
sb.append(SIDE_EFFECTS_FLAGS_MASK, getDouble());
sb.append(SIDE_EFFECTS_ALL, getDouble());
sb.append(NO_SIDE_EFFECTS, getDouble());
sb.append(getDouble(), printSource);
sb.append(getDouble(), printAnnotations);
sb.append(getDouble(), printType);
sb.append(getDouble(), JSDOC_INFO_PROP);
sb.append(getDouble(), VAR_ARGS_NAME);
sb.append(getDouble(), INCRDECR_PROP);
sb.append(getDouble(), QUOTED_PROP);
sb.append(getDouble(), OPT_ARG_NAME);
sb.append(getDouble(), SYNTHETIC_BLOCK_PROP);
sb.append(getDouble(), EMPTY_BLOCK);
sb.append(getDouble(), ORIGINALNAME_PROP);
sb.append(getDouble(), SIDE_EFFECT_FLAGS);
sb.append(getDouble(), IS_CONSTANT_NAME);
sb.append(getDouble(), IS_NAMESPACE);
sb.append(getDouble(), IS_DISPATCHER);
sb.append(getDouble(), DIRECTIVES);
sb.append(getDouble(), DIRECT_EVAL);
sb.append(getDouble(), FREE_CALL);
sb.append(getDouble(), STATIC_SOURCE_FILE);
sb.append(getDouble(), LENGTH);
sb.append(getDouble(), INPUT_ID);
sb.append(getDouble(), SLASH_V);
sb.append(getDouble(), INFERRED_FUNCTION);
sb.append(getDouble(), LAST_PROP);
sb.append(getDouble(), DECR_FLAG);
sb.append(getDouble(), POST_FLAG);
sb.append(getDouble(), this.type);
sb.append(getDouble(), this.next);
sb.append(getDouble(), this.first);
sb.append(getDouble(), this.last);
sb.append(getDouble(), this.propListHead);
sb.append(getDouble(), COLUMN_BITS);
sb.append(getDouble(), MAX_COLUMN_NUMBER);
sb.append(getDouble(), COLUMN_MASK);
sb.append(getDouble(), this.sourcePosition);
sb.append(getDouble(), this.jsType);
sb.append(getDouble(), this.parent);
sb.append(getDouble(), FLAG_GLOBAL_STATE_UNMODIFIED);
sb.append(getDouble(), FLAG_THIS_UNMODIFIED);
sb.append(getDouble(), FLAG_ARGUMENTS_UNMODIFIED);
sb.append(getDouble(), FLAG_NO_THROWS);
sb.append(getDouble(), FLAG_LOCAL_RESULTS);
sb.append(getDouble(), SIDE_EFFECTS_FLAGS_MASK);
sb.append(getDouble(), SIDE_EFFECTS_ALL);
sb.append(getDouble(), NO_SIDE_EFFECTS);
19:14:02.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:03.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:03.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:04.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:04.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:04.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:04.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:05.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:05.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:06.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:06.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:07.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:07.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:08.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:08.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:09.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:09.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:10.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:10.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:11.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:11.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:12.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:12.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:13.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:13.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:14.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:14.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:15.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:15.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:16.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:16.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:17.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:17.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:18.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:18.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:19.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:19.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:20.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:20.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:21.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:21.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:22.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:22.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:23.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:23.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:23.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:23.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:24.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:24.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:25.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:25.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:26.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:26.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:27.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:27.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:28.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:28.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:29.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:29.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:30.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:30.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:31.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:31.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:32.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:32.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:33.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:33.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:34.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:34.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:35.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:35.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:36.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:36.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:37.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:37.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:38.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:38.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:39.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:39.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:40.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:40.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:41.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:41.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:42.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:42.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:43.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:43.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:44.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:44.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:44.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:44.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:45.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:45.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:46.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:46.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:47.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:47.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:48.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:48.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:49.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:49.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:50.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:50.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:51.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:51.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:52.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:52.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:53.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:53.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:54.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:54.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:55.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:55.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:56.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:56.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:57.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:57.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:58.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:58.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:14:59.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:14:59.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:00.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:00.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:01.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:01.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:01.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:01.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:02.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:02.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:03.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:03.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:04.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:04.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:05.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:05.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:06.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:06.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:07.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:07.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:08.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:08.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:09.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:09.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:10.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:10.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:11.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:11.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:12.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:12.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:13.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:13.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:14.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:14.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:15.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:15.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:16.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:16.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:17.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:17.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:17.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:17.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:18.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:18.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:19.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:19.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:20.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:20.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:21.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:21.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:22.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:22.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:23.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:23.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:24.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:24.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:25.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:25.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:26.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:26.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:27.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {


}

19:15:27.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:28.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

19:15:28.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:29.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:29.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:30.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
sb.append(getDouble());
	sb.append(' ');
      
null
19:15:30.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:31.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:15:31.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:32.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:32.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===955
19:15:32.046 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
sb.append(' ');
sb.append(true, ' ');
sb.append(false, ' ');
sb.append(' ', true);
sb.append(' ', false);
19:15:32.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:33.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:33.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:33.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:33.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:34.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:34.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:35.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
sb.append(printSource, ' ');
sb.append(printAnnotations, ' ');
sb.append(printType, ' ');
sb.append(JSDOC_INFO_PROP, ' ');
sb.append(VAR_ARGS_NAME, ' ');
sb.append(INCRDECR_PROP, ' ');
sb.append(QUOTED_PROP, ' ');
sb.append(OPT_ARG_NAME, ' ');
sb.append(SYNTHETIC_BLOCK_PROP, ' ');
sb.append(EMPTY_BLOCK, ' ');
sb.append(ORIGINALNAME_PROP, ' ');
sb.append(SIDE_EFFECT_FLAGS, ' ');
sb.append(IS_CONSTANT_NAME, ' ');
sb.append(IS_NAMESPACE, ' ');
sb.append(IS_DISPATCHER, ' ');
sb.append(DIRECTIVES, ' ');
sb.append(DIRECT_EVAL, ' ');
sb.append(FREE_CALL, ' ');
sb.append(STATIC_SOURCE_FILE, ' ');
sb.append(LENGTH, ' ');
sb.append(INPUT_ID, ' ');
sb.append(SLASH_V, ' ');
sb.append(INFERRED_FUNCTION, ' ');
sb.append(LAST_PROP, ' ');
sb.append(DECR_FLAG, ' ');
sb.append(POST_FLAG, ' ');
sb.append(this.type, ' ');
sb.append(this.next, ' ');
sb.append(this.first, ' ');
sb.append(this.last, ' ');
sb.append(this.propListHead, ' ');
sb.append(COLUMN_BITS, ' ');
sb.append(MAX_COLUMN_NUMBER, ' ');
sb.append(COLUMN_MASK, ' ');
sb.append(this.sourcePosition, ' ');
sb.append(this.jsType, ' ');
sb.append(this.parent, ' ');
sb.append(FLAG_GLOBAL_STATE_UNMODIFIED, ' ');
sb.append(FLAG_THIS_UNMODIFIED, ' ');
sb.append(FLAG_ARGUMENTS_UNMODIFIED, ' ');
sb.append(FLAG_NO_THROWS, ' ');
sb.append(FLAG_LOCAL_RESULTS, ' ');
sb.append(SIDE_EFFECTS_FLAGS_MASK, ' ');
sb.append(SIDE_EFFECTS_ALL, ' ');
sb.append(NO_SIDE_EFFECTS, ' ');
sb.append(' ', printSource);
sb.append(' ', printAnnotations);
sb.append(' ', printType);
sb.append(' ', JSDOC_INFO_PROP);
sb.append(' ', VAR_ARGS_NAME);
sb.append(' ', INCRDECR_PROP);
sb.append(' ', QUOTED_PROP);
sb.append(' ', OPT_ARG_NAME);
sb.append(' ', SYNTHETIC_BLOCK_PROP);
sb.append(' ', EMPTY_BLOCK);
sb.append(' ', ORIGINALNAME_PROP);
sb.append(' ', SIDE_EFFECT_FLAGS);
sb.append(' ', IS_CONSTANT_NAME);
sb.append(' ', IS_NAMESPACE);
sb.append(' ', IS_DISPATCHER);
sb.append(' ', DIRECTIVES);
sb.append(' ', DIRECT_EVAL);
sb.append(' ', FREE_CALL);
sb.append(' ', STATIC_SOURCE_FILE);
sb.append(' ', LENGTH);
sb.append(' ', INPUT_ID);
sb.append(' ', SLASH_V);
sb.append(' ', INFERRED_FUNCTION);
sb.append(' ', LAST_PROP);
sb.append(' ', DECR_FLAG);
sb.append(' ', POST_FLAG);
sb.append(' ', this.type);
sb.append(' ', this.next);
sb.append(' ', this.first);
sb.append(' ', this.last);
sb.append(' ', this.propListHead);
sb.append(' ', COLUMN_BITS);
sb.append(' ', MAX_COLUMN_NUMBER);
sb.append(' ', COLUMN_MASK);
sb.append(' ', this.sourcePosition);
sb.append(' ', this.jsType);
sb.append(' ', this.parent);
sb.append(' ', FLAG_GLOBAL_STATE_UNMODIFIED);
sb.append(' ', FLAG_THIS_UNMODIFIED);
sb.append(' ', FLAG_ARGUMENTS_UNMODIFIED);
sb.append(' ', FLAG_NO_THROWS);
sb.append(' ', FLAG_LOCAL_RESULTS);
sb.append(' ', SIDE_EFFECTS_FLAGS_MASK);
sb.append(' ', SIDE_EFFECTS_ALL);
sb.append(' ', NO_SIDE_EFFECTS);
19:15:35.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:36.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:36.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:37.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:37.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:38.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:38.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:39.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:39.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:40.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:40.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:41.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:41.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:42.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:42.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:43.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:43.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:44.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:44.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:45.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:45.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:46.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:46.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:47.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:47.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:47.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:47.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:48.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:48.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:49.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:49.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:50.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:50.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:51.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:51.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:52.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:52.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:53.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:53.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:54.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:54.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:55.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:55.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:56.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:56.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:57.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:57.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:58.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:58.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:15:59.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:15:59.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:00.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:00.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:01.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:01.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:02.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:02.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:02.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:02.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:03.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:03.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:04.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:04.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:05.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:05.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:06.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:06.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:07.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:07.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:08.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:08.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:09.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:09.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:10.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:10.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:11.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:11.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:12.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:12.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:13.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:13.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:14.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:14.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:15.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:15.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:16.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:16.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:17.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:17.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:17.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:17.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:18.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:18.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:19.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:19.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:20.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:20.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:21.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:21.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:22.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:22.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:23.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:23.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:24.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:24.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:25.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:25.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:26.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:26.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:27.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:27.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:28.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:28.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:29.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:29.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:30.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:30.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:31.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:31.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:32.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:32.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:32.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:32.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:33.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:33.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:34.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:34.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:35.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:35.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:36.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:36.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:37.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:37.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:38.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:38.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:39.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:39.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:40.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:40.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:41.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:41.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:42.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:42.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:43.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:43.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:44.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:44.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:45.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:45.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:46.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:46.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:47.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:47.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:48.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:48.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:48.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:48.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:49.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:49.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:50.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:50.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:51.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:51.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:52.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:52.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:53.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:53.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:54.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:54.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:55.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:55.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:56.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:56.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:57.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:57.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:58.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:58.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:16:59.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:16:59.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:00.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (sb != null) {


}

19:17:00.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:01.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (sb == null) {
    return;
}

if (sb == null) {
    throw new IllegalArgumentException("Empty variable: " + sb);
}

19:17:01.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:02.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:02.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:02.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

      sb.append(getDouble());
	sb.append(' ');

MOVE-BUGGY-STATEMENT
19:17:02.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:03.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:17:03.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:04.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:04.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===244
19:17:04.779 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case HOOK:
if (HOOK == 0) {
    new IllegalArgumentException("");
}

if (HOOK != 0) {

    
}

if (HOOK > 0) {

    
}

19:17:04.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:05.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:05.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:05.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:05.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:05.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:17:05.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:06.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:06.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===990
19:17:06.520 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (first.isReturn()) {
          return first.hasOneChild();
        }
if (first.hasChildren()) {
          return first.hasOneChild();
        }
if (first.isFromExterns()) {
          return first.hasOneChild();
        }
if (first.hasOneChild()) {
          return first.hasOneChild();
        }
if (first.hasMoreThanOneChild()) {
          return first.hasOneChild();
        }
if (first.isQualifiedName()) {
          return first.hasOneChild();
        }
if (first.isUnscopedQualifiedName()) {
          return first.hasOneChild();
        }
if (first.isVarArgs()) {
          return first.hasOneChild();
        }
if (first.isOptionalArg()) {
          return first.hasOneChild();
        }
if (first.isSyntheticBlock()) {
          return first.hasOneChild();
        }
if (first.wasEmptyNode()) {
          return first.hasOneChild();
        }
if (first.isOnlyModifiesThisCall()) {
          return first.hasOneChild();
        }
if (first.isNoSideEffectsCall()) {
          return first.hasOneChild();
        }
if (first.isLocalResultCall()) {
          return first.hasOneChild();
        }
if (first.isQuotedString()) {
          return first.hasOneChild();
        }
if (first.isAdd()) {
          return first.hasOneChild();
        }
if (first.isAnd()) {
          return first.hasOneChild();
        }
if (first.isArrayLit()) {
          return first.hasOneChild();
        }
if (first.isAssign()) {
          return first.hasOneChild();
        }
if (first.isAssignAdd()) {
          return first.hasOneChild();
        }
if (first.isBlock()) {
          return first.hasOneChild();
        }
if (first.isBreak()) {
          return first.hasOneChild();
        }
if (first.isCall()) {
          return first.hasOneChild();
        }
if (first.isCase()) {
          return first.hasOneChild();
        }
if (first.isCast()) {
          return first.hasOneChild();
        }
if (first.isCatch()) {
          return first.hasOneChild();
        }
if (first.isComma()) {
          return first.hasOneChild();
        }
if (first.isContinue()) {
          return first.hasOneChild();
        }
if (first.isDebugger()) {
          return first.hasOneChild();
        }
if (first.isDec()) {
          return first.hasOneChild();
        }
if (first.isDefaultCase()) {
          return first.hasOneChild();
        }
if (first.isDelProp()) {
          return first.hasOneChild();
        }
if (first.isDo()) {
          return first.hasOneChild();
        }
if (first.isEmpty()) {
          return first.hasOneChild();
        }
if (first.isExprResult()) {
          return first.hasOneChild();
        }
if (first.isFalse()) {
          return first.hasOneChild();
        }
if (first.isFor()) {
          return first.hasOneChild();
        }
if (first.isFunction()) {
          return first.hasOneChild();
        }
if (first.isGetterDef()) {
          return first.hasOneChild();
        }
if (first.isGetElem()) {
          return first.hasOneChild();
        }
if (first.isGetProp()) {
          return first.hasOneChild();
        }
if (first.isHook()) {
          return first.hasOneChild();
        }
if (first.isIf()) {
          return first.hasOneChild();
        }
if (first.isIn()) {
          return first.hasOneChild();
        }
if (first.isInc()) {
          return first.hasOneChild();
        }
if (first.isInstanceOf()) {
          return first.hasOneChild();
        }
if (first.isLabel()) {
          return first.hasOneChild();
        }
if (first.isLabelName()) {
          return first.hasOneChild();
        }
if (first.isName()) {
          return first.hasOneChild();
        }
if (first.isNE()) {
          return first.hasOneChild();
        }
if (first.isNew()) {
          return first.hasOneChild();
        }
if (first.isNot()) {
          return first.hasOneChild();
        }
if (first.isNull()) {
          return first.hasOneChild();
        }
if (first.isNumber()) {
          return first.hasOneChild();
        }
if (first.isObjectLit()) {
          return first.hasOneChild();
        }
if (first.isOr()) {
          return first.hasOneChild();
        }
if (first.isParamList()) {
          return first.hasOneChild();
        }
if (first.isRegExp()) {
          return first.hasOneChild();
        }
if (first.isScript()) {
          return first.hasOneChild();
        }
if (first.isSetterDef()) {
          return first.hasOneChild();
        }
if (first.isString()) {
          return first.hasOneChild();
        }
if (first.isStringKey()) {
          return first.hasOneChild();
        }
if (first.isSwitch()) {
          return first.hasOneChild();
        }
if (first.isThis()) {
          return first.hasOneChild();
        }
if (first.isThrow()) {
          return first.hasOneChild();
        }
if (first.isTrue()) {
          return first.hasOneChild();
        }
if (first.isTry()) {
          return first.hasOneChild();
        }
if (first.isTypeOf()) {
          return first.hasOneChild();
        }
if (first.isVar()) {
          return first.hasOneChild();
        }
if (first.isVoid()) {
          return first.hasOneChild();
        }
if (first.isWhile()) {
          return first.hasOneChild();
        }
if (first.isWith()) {
          return first.hasOneChild();
        }
19:17:06.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:07.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:07.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:08.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:08.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:09.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:09.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:10.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:10.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:10.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:10.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:11.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:11.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:12.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:12.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:13.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:13.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:14.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:14.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:15.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:15.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:16.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:16.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:17.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:17.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:18.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:18.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:18.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:18.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:19.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:19.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:20.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:20.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:21.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:21.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:22.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:22.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:23.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:23.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:24.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:24.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:25.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:25.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:25.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:25.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:26.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:26.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:27.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:27.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:28.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:28.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:29.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:29.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:30.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:30.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:31.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:31.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:32.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:32.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:33.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:33.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:33.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:33.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:34.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:34.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:35.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:35.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:36.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:36.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:37.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:37.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:38.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:38.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:39.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:39.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:40.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:40.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:40.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:40.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:41.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:41.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:42.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:42.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:43.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:43.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:44.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:44.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:45.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:45.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:46.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:46.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:47.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:47.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:48.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:48.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:49.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:49.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:49.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:49.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:50.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:50.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:51.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:51.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:52.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:52.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:53.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:53.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:54.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:54.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:55.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:55.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:56.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:56.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:56.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:56.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:57.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:57.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:58.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:58.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:17:59.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:17:59.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:00.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:00.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:01.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:01.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:02.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:02.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:03.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:03.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:03.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:03.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:04.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:04.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:05.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:05.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:06.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:06.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:07.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:07.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:08.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:08.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:09.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (first.isReturn(n)) {
          return first.hasOneChild();
        }
if (first.isReturn(AND_PRECEDENCE)) {
          return first.hasOneChild();
        }
if (first.isReturn(OR_PRECEDENCE)) {
          return first.hasOneChild();
        }
if (first.isReturn(NOT_PRECEDENCE)) {
          return first.hasOneChild();
        }
if (first.isReturn(REGEXP_ESCAPER)) {
          return first.hasOneChild();
        }
if (first.isReturn(this.late)) {
          return first.hasOneChild();
        }
if (first.isReturn(this.STRING_SPLIT_OVERHEAD)) {
          return first.hasOneChild();
        }
if (first.isReturn(INVALID_REGULAR_EXPRESSION_FLAGS)) {
          return first.hasOneChild();
        }
if (first.isReturn(DONT_TRAVERSE_FUNCTIONS_PREDICATE)) {
          return first.hasOneChild();
        }
if (first.isReturn(STANDARD_OBJECT_CONSTRUCTORS)) {
          return first.hasOneChild();
        }
if (first.isReturn(REGEXP_FLAGS_RE)) {
          return first.hasOneChild();
        }
19:18:09.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:10.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:10.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:11.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:11.031 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:11.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:11.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:12.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:12.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:13.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:13.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:14.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:14.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:15.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:15.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:16.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:16.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:17.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:17.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:18.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:18.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:19.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (first != null && first.isReturn()) {
          return first.hasOneChild();
        }
if (first != null || first.isReturn()) {
          return first.hasOneChild();
        }
19:18:19.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:19.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:19.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:20.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (first != null) {


}

19:18:20.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:21.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (first == null) {
    return true;
}

if (first == null) {
    return false;
}

if (first == null) {
    throw new IllegalArgumentException("Empty variable: " + first);
}

19:18:21.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:22.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:22.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:23.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:23.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:24.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (first.isReturn()) {
          return first.hasOneChild();
        }
	Node first = n.getFirstChild();
        
null
19:18:24.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:25.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:18:25.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:26.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:26.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===989
19:18:26.268 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node first = n.getFirstChild();
Node first = n.getLastChild();
Node first = n.getNext();
Node first = n.getLastSibling();
Node first = n.getParent();
Node first = n.detachFromParent();
Node first = n.removeFirstChild();
Node first = n.removeChildren();
Node first = n.cloneNode();
Node first = n.cloneTree();
19:18:26.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:27.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:27.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:28.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:28.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:28.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:28.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:29.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:29.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:30.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:30.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:31.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:31.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:32.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:32.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:33.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:33.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:34.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node first = n.getFirstChild(first);
Node first = n.getFirstChild(AND_PRECEDENCE);
Node first = n.getFirstChild(OR_PRECEDENCE);
Node first = n.getFirstChild(NOT_PRECEDENCE);
Node first = n.getFirstChild(REGEXP_ESCAPER);
Node first = n.getFirstChild(this.late);
Node first = n.getFirstChild(this.STRING_SPLIT_OVERHEAD);
Node first = n.getFirstChild(INVALID_REGULAR_EXPRESSION_FLAGS);
Node first = n.getFirstChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Node first = n.getFirstChild(STANDARD_OBJECT_CONSTRUCTORS);
Node first = n.getFirstChild(REGEXP_FLAGS_RE);
19:18:34.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:35.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:35.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:36.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:36.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:37.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:37.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:38.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:38.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:38.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:38.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:39.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:39.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:40.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:40.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:41.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:41.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:42.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:42.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:43.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:43.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:44.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Node first = first.getFirstChild();
Node first = AND_PRECEDENCE.getFirstChild();
Node first = OR_PRECEDENCE.getFirstChild();
Node first = NOT_PRECEDENCE.getFirstChild();
Node first = REGEXP_ESCAPER.getFirstChild();
Node first = this.late.getFirstChild();
Node first = this.STRING_SPLIT_OVERHEAD.getFirstChild();
Node first = INVALID_REGULAR_EXPRESSION_FLAGS.getFirstChild();
Node first = DONT_TRAVERSE_FUNCTIONS_PREDICATE.getFirstChild();
Node first = STANDARD_OBJECT_CONSTRUCTORS.getFirstChild();
Node first = REGEXP_FLAGS_RE.getFirstChild();
19:18:44.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:45.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:45.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:46.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:46.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:47.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:47.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:47.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:47.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:48.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:48.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:49.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:49.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:50.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:50.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:51.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:51.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:52.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:52.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:53.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:53.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:54.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

19:18:54.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:55.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return true;
}

if (n == null) {
    return false;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

19:18:55.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:55.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:55.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:56.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:56.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:57.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
tryJoinForCondition(first);
tryJoinForCondition(first);
	Node first = n.getFirstChild();
Node first = n.getFirstChild();
	tryJoinForCondition(first);
tryRemoveRepeatedStatements(first);
tryRemoveRepeatedStatements(first);
	Node first = n.getFirstChild();
Node first = n.getFirstChild();
	tryRemoveRepeatedStatements(first);
19:18:57.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:58.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:58.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:18:59.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:18:59.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:00.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:00.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:01.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:01.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:02.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:02.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:03.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:19:03.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:04.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:04.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===913
19:19:04.088 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
break;

19:19:04.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:04.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:04.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===964
19:19:05.004 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return n.getFirstChild();
return n.getFirstChild(AND_PRECEDENCE);
return n.getFirstChild(OR_PRECEDENCE);
return n.getFirstChild(NOT_PRECEDENCE);
return n.getFirstChild(REGEXP_ESCAPER);
return n.getFirstChild(this.late);
return n.getFirstChild(this.STRING_SPLIT_OVERHEAD);
return n.getFirstChild(INVALID_REGULAR_EXPRESSION_FLAGS);
return n.getFirstChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
return n.getFirstChild(STANDARD_OBJECT_CONSTRUCTORS);
return n.getFirstChild(REGEXP_FLAGS_RE);
19:19:05.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:05.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:05.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:06.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:06.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:07.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:07.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:08.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:08.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:09.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:09.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:10.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:10.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:11.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:11.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:12.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:12.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:13.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:13.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:14.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
return n.getAncestors();
return n.getJSType();
return n.getType();
return n.getLength();
return n.getLineno();
return n.getCharno();
return n.getSourceOffset();
return n.getSourcePosition();
return n.getChildCount();
return n.getSideEffectFlags();
return n.getSortedPropTypes();
return n.getPropListHeadForTesting();
return n.detachChildren();
return n.setQuotedString();
return n.getDouble();
return n.getStaticSourceFile();
return n.getInputId();
return n.children();
return n.siblings();
return n.getJSDocInfo();
return n.getLastChild();
return n.getNext();
return n.getLastSibling();
return n.getParent();
return n.detachFromParent();
return n.removeFirstChild();
return n.removeChildren();
return n.cloneNode();
return n.cloneTree();
return n.getString();
return n.toString();
return n.toStringTree();
return n.toStringTreeImpl();
return n.getSourceFileName();
return n.getQualifiedName();
return n.hasChildren();
return n.isFromExterns();
return n.hasOneChild();
return n.hasMoreThanOneChild();
return n.isQualifiedName();
return n.isUnscopedQualifiedName();
return n.isVarArgs();
return n.isOptionalArg();
return n.isSyntheticBlock();
return n.wasEmptyNode();
return n.isOnlyModifiesThisCall();
return n.isNoSideEffectsCall();
return n.isLocalResultCall();
return n.isQuotedString();
return n.isAdd();
return n.isAnd();
return n.isArrayLit();
return n.isAssign();
return n.isAssignAdd();
return n.isBlock();
return n.isBreak();
return n.isCall();
return n.isCase();
return n.isCast();
return n.isCatch();
return n.isComma();
return n.isContinue();
return n.isDebugger();
return n.isDec();
return n.isDefaultCase();
return n.isDelProp();
return n.isDo();
return n.isEmpty();
return n.isExprResult();
return n.isFalse();
return n.isFor();
return n.isFunction();
return n.isGetterDef();
return n.isGetElem();
return n.isGetProp();
return n.isHook();
return n.isIf();
return n.isIn();
return n.isInc();
return n.isInstanceOf();
return n.isLabel();
return n.isLabelName();
return n.isName();
return n.isNE();
return n.isNew();
return n.isNot();
return n.isNull();
return n.isNumber();
return n.isObjectLit();
return n.isOr();
return n.isParamList();
return n.isRegExp();
return n.isReturn();
return n.isScript();
return n.isSetterDef();
return n.isString();
return n.isStringKey();
return n.isSwitch();
return n.isThis();
return n.isThrow();
return n.isTrue();
return n.isTry();
return n.isTypeOf();
return n.isVar();
return n.isVoid();
return n.isWhile();
return n.isWith();
return n.getDirectives();
return n.getJsDocBuilderForNode();
19:19:14.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:14.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:14.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:15.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:15.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:16.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:16.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:17.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:17.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:18.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:18.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:19.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:19.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:20.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:20.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:21.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:21.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:22.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:22.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:23.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:23.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:24.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:24.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:25.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:25.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:25.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:25.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:26.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:26.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:27.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:27.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:28.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:28.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:29.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:29.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:30.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:30.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:31.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:31.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:32.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:32.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:33.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:33.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:34.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:34.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:35.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:35.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:35.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:35.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:36.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:36.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:37.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:37.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:38.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:38.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:39.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:39.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:40.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:40.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:41.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:41.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:42.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:42.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:43.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:43.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:44.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:44.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:45.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:45.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:45.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:45.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:46.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:46.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:47.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:47.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:48.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:48.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:49.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:49.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:50.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:50.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:51.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:51.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:52.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:52.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:53.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:53.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:53.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:53.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:54.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:54.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:55.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:55.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:56.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:56.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:57.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:57.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:58.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:58.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:19:59.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:19:59.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:00.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:00.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:01.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:01.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:01.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:01.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:02.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:02.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:03.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:03.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:04.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:04.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:05.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:05.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:06.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:06.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:07.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:07.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:08.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:08.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:09.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:09.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:09.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:09.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:10.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:10.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:11.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:11.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:12.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:12.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:13.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:13.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:14.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:14.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:15.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:15.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:16.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:16.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:17.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:17.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:18.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:18.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:18.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:19.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:19.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:19.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:20.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:20.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:21.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:21.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:22.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:22.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:23.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:23.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:24.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:24.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:25.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:25.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:26.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:26.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:27.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:27.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:27.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:27.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:28.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:28.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:29.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:29.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:30.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:30.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:31.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:31.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:32.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:32.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:33.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:33.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:34.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:34.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:35.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:35.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:36.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:36.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:37.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:37.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:37.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:37.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:38.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:38.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:39.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:39.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:40.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:40.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:41.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:41.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:42.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:42.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:43.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:43.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:44.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:44.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:45.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:45.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:46.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:46.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:46.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:46.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:47.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:47.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:48.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:48.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:49.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:49.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:50.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:50.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:51.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:51.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:52.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
return n.getFirstChild(true);
return n.getFirstChild(false);
19:20:52.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:53.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:53.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:54.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

19:20:54.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:55.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

19:20:55.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:56.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:56.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:57.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:20:57.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:57.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:57.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===963
19:20:57.961 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkState(isFoldableExpressBlock(n));
Preconditions.checkState(true, isFoldableExpressBlock(n));
Preconditions.checkState(false, isFoldableExpressBlock(n));
Preconditions.checkState(isFoldableExpressBlock(n), true);
Preconditions.checkState(isFoldableExpressBlock(n), false);
19:20:57.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:58.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:58.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:20:59.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:20:59.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:00.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:00.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:01.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkState(n, isFoldableExpressBlock(n));
Preconditions.checkState(AND_PRECEDENCE, isFoldableExpressBlock(n));
Preconditions.checkState(OR_PRECEDENCE, isFoldableExpressBlock(n));
Preconditions.checkState(NOT_PRECEDENCE, isFoldableExpressBlock(n));
Preconditions.checkState(REGEXP_ESCAPER, isFoldableExpressBlock(n));
Preconditions.checkState(this.late, isFoldableExpressBlock(n));
Preconditions.checkState(this.STRING_SPLIT_OVERHEAD, isFoldableExpressBlock(n));
Preconditions.checkState(INVALID_REGULAR_EXPRESSION_FLAGS, isFoldableExpressBlock(n));
Preconditions.checkState(DONT_TRAVERSE_FUNCTIONS_PREDICATE, isFoldableExpressBlock(n));
Preconditions.checkState(STANDARD_OBJECT_CONSTRUCTORS, isFoldableExpressBlock(n));
Preconditions.checkState(REGEXP_FLAGS_RE, isFoldableExpressBlock(n));
Preconditions.checkState(isFoldableExpressBlock(n), n);
Preconditions.checkState(isFoldableExpressBlock(n), AND_PRECEDENCE);
Preconditions.checkState(isFoldableExpressBlock(n), OR_PRECEDENCE);
Preconditions.checkState(isFoldableExpressBlock(n), NOT_PRECEDENCE);
Preconditions.checkState(isFoldableExpressBlock(n), REGEXP_ESCAPER);
Preconditions.checkState(isFoldableExpressBlock(n), this.late);
Preconditions.checkState(isFoldableExpressBlock(n), this.STRING_SPLIT_OVERHEAD);
Preconditions.checkState(isFoldableExpressBlock(n), INVALID_REGULAR_EXPRESSION_FLAGS);
Preconditions.checkState(isFoldableExpressBlock(n), DONT_TRAVERSE_FUNCTIONS_PREDICATE);
Preconditions.checkState(isFoldableExpressBlock(n), STANDARD_OBJECT_CONSTRUCTORS);
Preconditions.checkState(isFoldableExpressBlock(n), REGEXP_FLAGS_RE);
19:21:01.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:02.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:02.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:03.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:03.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:04.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:04.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:05.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:05.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:06.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:06.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:06.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:06.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:07.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:07.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:08.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:08.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:09.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:09.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:10.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:10.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:11.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:11.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:12.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:12.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:13.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:13.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:14.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:14.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:15.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:15.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:15.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:15.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:16.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:16.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:17.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:17.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:18.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:18.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:19.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:19.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:20.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:20.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:21.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

19:21:21.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:22.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

19:21:22.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:23.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:23.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:24.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

    return n.getFirstChild();
	Preconditions.checkState(isFoldableExpressBlock(n));

MOVE-BUGGY-STATEMENT
19:21:24.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:25.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:21:25.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:25.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:25.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===996
19:21:25.931 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return false;
return true;
19:21:25.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:26.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:21:26.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:27.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:27.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===988
19:21:27.776 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasChildren()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isFromExterns()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasMoreThanOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isQualifiedName()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isUnscopedQualifiedName()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isVarArgs()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isOptionalArg()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isSyntheticBlock()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.wasEmptyNode()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isOnlyModifiesThisCall()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isNoSideEffectsCall()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isLocalResultCall()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isQuotedString()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isAdd()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isAnd()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isArrayLit()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isAssign()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isAssignAdd()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isBlock()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isBreak()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isCall()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isCase()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isCast()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isCatch()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isComma()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isContinue()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isDebugger()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isDec()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isDefaultCase()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isDelProp()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isDo()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isEmpty()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isExprResult()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isFalse()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isFor()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isFunction()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isGetterDef()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isGetElem()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isGetProp()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isHook()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isIf()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isIn()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isInc()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isInstanceOf()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isLabel()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isLabelName()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isName()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isNE()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isNew()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isNot()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isNull()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isNumber()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isObjectLit()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isOr()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isParamList()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isRegExp()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isReturn()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isScript()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isSetterDef()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isString()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isStringKey()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isSwitch()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isThis()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isThrow()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isTrue()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isTry()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isTypeOf()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isVar()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isVoid()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isWhile()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.isWith()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
19:21:27.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:28.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:28.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:29.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:29.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:30.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:30.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:31.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:31.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:32.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:32.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:33.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:33.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:34.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:34.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:34.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:34.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:35.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:35.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:36.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:36.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:37.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:37.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:38.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:38.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:39.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:39.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:40.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:40.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:41.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:41.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:42.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:42.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:43.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:43.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:43.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:43.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:44.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:44.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:45.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:45.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:46.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:46.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:47.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:47.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:48.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:48.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:49.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:49.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:50.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:50.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:51.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:51.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:51.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:51.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:52.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:52.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:53.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:53.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:54.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:54.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:55.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:55.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:56.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:56.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:57.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:57.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:58.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:58.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:59.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:59.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:21:59.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:21:59.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:00.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:00.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:01.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:01.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:02.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:02.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:03.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:03.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:04.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:04.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:05.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:05.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:06.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:06.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:07.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:07.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:07.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:07.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:08.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:08.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:09.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:09.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:10.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:10.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:11.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:11.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:12.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:12.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:13.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:13.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:14.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:14.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:15.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:15.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:16.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:16.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:16.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:16.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:17.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:17.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:18.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:18.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:19.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:19.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:20.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:20.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:21.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:21.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:22.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:22.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:23.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:23.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:24.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:24.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:25.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:25.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:26.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:26.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:26.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:26.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:27.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:27.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:28.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:28.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:29.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:29.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:30.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:30.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:31.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n.hasOneChild(AND_PRECEDENCE)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(OR_PRECEDENCE)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(NOT_PRECEDENCE)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(REGEXP_ESCAPER)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(this.late)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(this.STRING_SPLIT_OVERHEAD)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(INVALID_REGULAR_EXPRESSION_FLAGS)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(DONT_TRAVERSE_FUNCTIONS_PREDICATE)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(STANDARD_OBJECT_CONSTRUCTORS)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n.hasOneChild(REGEXP_FLAGS_RE)) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
19:22:31.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:32.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:32.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:33.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:33.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:34.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:34.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:35.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:35.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:36.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:36.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:36.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:36.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:37.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:37.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:38.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:38.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:39.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:39.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:40.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null && n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
if (n != null || n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
19:22:40.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:41.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:41.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:42.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

19:22:42.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:43.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return true;
}

if (n == null) {
    return false;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

19:22:43.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:44.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:44.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:45.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:45.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:46.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:22:46.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:46.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:46.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===987
19:22:46.916 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (n.isBlock()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.hasChildren()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isFromExterns()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.hasOneChild()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.hasMoreThanOneChild()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isQualifiedName()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isUnscopedQualifiedName()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isVarArgs()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isOptionalArg()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isSyntheticBlock()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.wasEmptyNode()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isOnlyModifiesThisCall()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isNoSideEffectsCall()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isLocalResultCall()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isQuotedString()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isAdd()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isAnd()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isArrayLit()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isAssign()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isAssignAdd()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBreak()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isCall()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isCase()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isCast()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isCatch()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isComma()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isContinue()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isDebugger()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isDec()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isDefaultCase()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isDelProp()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isDo()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isEmpty()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isExprResult()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isFalse()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isFor()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isFunction()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isGetterDef()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isGetElem()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isGetProp()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isHook()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isIf()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isIn()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isInc()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isInstanceOf()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isLabel()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isLabelName()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isName()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isNE()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isNew()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isNot()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isNull()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isNumber()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isObjectLit()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isOr()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isParamList()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isRegExp()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isReturn()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isScript()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isSetterDef()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isString()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isStringKey()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isSwitch()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isThis()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isThrow()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isTrue()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isTry()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isTypeOf()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isVar()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isVoid()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isWhile()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isWith()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
19:22:46.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:47.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:47.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:48.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:48.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:49.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:49.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:50.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:50.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:51.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:51.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:52.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:52.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:53.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:53.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:54.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:54.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:55.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:55.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:55.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:55.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:56.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:56.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:57.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:57.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:58.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:58.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:22:59.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:22:59.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:00.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:00.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:01.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:01.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:02.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:02.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:03.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:03.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:04.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:04.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:04.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:04.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:05.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:05.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:06.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:06.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:07.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:07.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:08.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:08.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:09.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:09.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:10.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:10.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:11.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:11.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:12.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:12.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:13.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:13.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:14.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:14.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:14.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:14.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:15.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:15.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:16.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:16.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:17.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:17.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:18.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:18.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:19.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:19.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:20.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:20.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:21.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:21.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:22.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:22.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:23.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:23.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:23.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:23.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:24.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:24.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:25.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:25.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:26.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:26.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:27.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:27.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:28.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:28.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:29.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:29.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:30.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:30.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:31.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:31.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:32.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:32.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:33.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:33.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:34.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:34.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:34.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:34.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:35.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:35.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:36.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:36.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:37.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:37.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:38.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:38.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:39.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:39.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:40.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:40.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:41.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:41.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:42.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:42.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:43.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:43.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:43.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:43.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:44.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:44.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:45.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:45.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:46.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:46.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:47.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:47.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:48.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:48.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:49.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:49.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:50.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:50.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:51.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n.isBlock(AND_PRECEDENCE)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(OR_PRECEDENCE)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(NOT_PRECEDENCE)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(REGEXP_ESCAPER)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(this.late)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(this.STRING_SPLIT_OVERHEAD)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(INVALID_REGULAR_EXPRESSION_FLAGS)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(DONT_TRAVERSE_FUNCTIONS_PREDICATE)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(STANDARD_OBJECT_CONSTRUCTORS)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n.isBlock(REGEXP_FLAGS_RE)) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
19:23:51.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:52.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:52.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:53.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:53.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:53.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:53.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:54.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:54.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:55.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:55.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:56.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:56.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:57.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:57.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:58.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:58.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:23:59.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:23:59.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:00.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null && n.isBlock()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
if (n != null || n.isBlock()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }
19:24:00.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:01.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:01.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:02.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

19:24:02.031 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:02.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return true;
}

if (n == null) {
    return false;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

19:24:02.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:03.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:03.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:04.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:04.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:05.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 


    return false;
	if (n.isBlock()) {
      if (n.hasOneChild()) {
        Node first = n.getFirstChild();
        if (first.isReturn()) {
          return first.hasOneChild();
        }
      }
    }

MOVE-BUGGY-STATEMENT
19:24:05.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:06.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:24:06.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:07.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:07.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===770
19:24:07.464 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
if (thenBranchIsExpressionBlock || elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
19:24:07.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:08.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
19:24:08.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:09.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	Node parent = n.getParent();

    Node cond = n.getFirstChild();

    /* If the condition is a literal, we'll let other
     * optimizations try to remove useless code.
     */
    if (NodeUtil.isLiteralValue(cond, true)) {
      return n;
    }

    Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	Node cond = n.getFirstChild();

    /* If the condition is a literal, we'll let other
     * optimizations try to remove useless code.
     */
    if (NodeUtil.isLiteralValue(cond, true)) {
      return n;
    }

    Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	if (NodeUtil.isLiteralValue(cond, true)) {
      return n;
    }

    Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    
null


    boolean thenBranchIsVar = isVarBlock(thenBranch);
	if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsVar = isVarBlock(thenBranch);
    boolean elseBranchIsVar = isVarBlock(elseBranch);
	if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsVar = isVarBlock(thenBranch);
    boolean elseBranchIsVar = isVarBlock(elseBranch);

    // if(x)var y=1;else y=2  ->  var y=x?1:2
    if (thenBranchIsVar && elseBranchIsExpressionBlock &&
        getBlockExpression(elseBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(thenBranch);
      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();

      Node name1 = var.getFirstChild();
      Node maybeName2 = elseAssign.getFirstChild();

      if (name1.hasChildren()
          && maybeName2.isName()
          && name1.getString().equals(maybeName2.getString())) {
        Node thenExpr = name1.removeChildren();
        Node elseExpr = elseAssign.getLastChild().detachFromParent();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name1.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();
        return var;
      }

    // if(x)y=1;else var y=2  ->  var y=x?1:2
    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
        getBlockExpression(thenBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(elseBranch);
      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();

      Node maybeName1 = thenAssign.getFirstChild();
      Node name2 = var.getFirstChild();

      if (name2.hasChildren()
          && maybeName1.isName()
          && maybeName1.getString().equals(name2.getString())) {
        Node thenExpr = thenAssign.getLastChild().detachFromParent();
        Node elseExpr = name2.removeChildren();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name2.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();

        return var;
      }
    }
	if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsVar = isVarBlock(thenBranch);
    boolean elseBranchIsVar = isVarBlock(elseBranch);

    // if(x)var y=1;else y=2  ->  var y=x?1:2
    if (thenBranchIsVar && elseBranchIsExpressionBlock &&
        getBlockExpression(elseBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(thenBranch);
      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();

      Node name1 = var.getFirstChild();
      Node maybeName2 = elseAssign.getFirstChild();

      if (name1.hasChildren()
          && maybeName2.isName()
          && name1.getString().equals(maybeName2.getString())) {
        Node thenExpr = name1.removeChildren();
        Node elseExpr = elseAssign.getLastChild().detachFromParent();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name1.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();
        return var;
      }

    // if(x)y=1;else var y=2  ->  var y=x?1:2
    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
        getBlockExpression(thenBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(elseBranch);
      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();

      Node maybeName1 = thenAssign.getFirstChild();
      Node name2 = var.getFirstChild();

      if (name2.hasChildren()
          && maybeName1.isName()
          && maybeName1.getString().equals(name2.getString())) {
        Node thenExpr = thenAssign.getLastChild().detachFromParent();
        Node elseExpr = name2.removeChildren();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name2.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();

        return var;
      }
    }

    return n;
	if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

MOVE-BUGGY-STATEMENT
19:24:09.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:10.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:10.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:11.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:11.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:12.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:12.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:12.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:12.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:13.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:13.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:14.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:14.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:15.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:15.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:16.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:16.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:17.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:17.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:18.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:18.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:19.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:19.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:20.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:20.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:21.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:21.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:22.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:22.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:22.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:24:22.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:23.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:23.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===768
19:24:23.868 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
boolean elseBranchIsExpressionBlock = statementMustExitParent(elseBranch);
boolean elseBranchIsExpressionBlock = isPure(elseBranch);
boolean elseBranchIsExpressionBlock = isExceptionPossible(elseBranch);
boolean elseBranchIsExpressionBlock = isReturnBlock(elseBranch);
boolean elseBranchIsExpressionBlock = isReturnExpressBlock(elseBranch);
boolean elseBranchIsExpressionBlock = isReturnExpression(elseBranch);
boolean elseBranchIsExpressionBlock = isVarBlock(elseBranch);
boolean elseBranchIsExpressionBlock = consumesDanglingElse(elseBranch);
boolean elseBranchIsExpressionBlock = isPropertyAssignmentInExpression(elseBranch);
19:24:23.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:24.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:24.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:25.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:25.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:26.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:26.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:27.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:27.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:28.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:28.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:29.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:29.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:30.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:30.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:31.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:31.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:31.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranchIsExpressionBlock);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(thenBranchIsExpressionBlock);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(cond);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(parent);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(n);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(AND_PRECEDENCE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(OR_PRECEDENCE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(NOT_PRECEDENCE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_ESCAPER);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(this.late);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(this.STRING_SPLIT_OVERHEAD);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(INVALID_REGULAR_EXPRESSION_FLAGS);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(STANDARD_OBJECT_CONSTRUCTORS);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_FLAGS_RE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock();
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranchIsExpressionBlock, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(thenBranchIsExpressionBlock, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(cond, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(parent, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(n, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(AND_PRECEDENCE, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(OR_PRECEDENCE, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(NOT_PRECEDENCE, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_ESCAPER, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(this.late, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(this.STRING_SPLIT_OVERHEAD, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(INVALID_REGULAR_EXPRESSION_FLAGS, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(DONT_TRAVERSE_FUNCTIONS_PREDICATE, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(STANDARD_OBJECT_CONSTRUCTORS, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_FLAGS_RE, elseBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, elseBranchIsExpressionBlock);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, thenBranchIsExpressionBlock);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, thenBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, cond);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, parent);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, n);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, AND_PRECEDENCE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, OR_PRECEDENCE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, NOT_PRECEDENCE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, REGEXP_ESCAPER);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, this.late);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, this.STRING_SPLIT_OVERHEAD);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, INVALID_REGULAR_EXPRESSION_FLAGS);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, STANDARD_OBJECT_CONSTRUCTORS);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, REGEXP_FLAGS_RE);
19:24:31.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:32.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:32.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:33.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:33.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:34.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:34.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:35.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:35.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:36.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:36.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:37.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:37.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:38.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:38.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:39.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:39.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:40.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:40.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:41.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:41.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:41.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:41.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:42.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:42.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:43.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:43.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:44.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:44.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:45.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:45.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:46.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:46.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:47.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:47.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:48.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:48.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:49.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:49.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:50.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:50.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:50.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:50.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:51.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:51.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:52.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:52.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:53.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:53.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:54.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:54.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:55.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:55.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:56.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:56.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:57.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:57.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:58.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:58.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:59.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:59.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:24:59.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:24:59.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:00.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:00.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:01.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:01.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:02.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:02.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:03.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:03.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:04.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:04.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:05.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:05.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:06.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:06.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:07.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:07.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:08.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:08.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:09.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:09.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:09.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:09.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:10.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:10.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:11.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:11.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:12.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:12.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:13.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:13.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:14.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:14.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:15.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:15.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:16.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
boolean elseBranchIsExpressionBlock = elseBranchIsExpressionBlock;
boolean elseBranchIsExpressionBlock = thenBranchIsExpressionBlock;
boolean elseBranchIsExpressionBlock = elseBranch;
boolean elseBranchIsExpressionBlock = thenBranch;
boolean elseBranchIsExpressionBlock = cond;
boolean elseBranchIsExpressionBlock = parent;
boolean elseBranchIsExpressionBlock = n;
boolean elseBranchIsExpressionBlock = AND_PRECEDENCE;
boolean elseBranchIsExpressionBlock = OR_PRECEDENCE;
boolean elseBranchIsExpressionBlock = NOT_PRECEDENCE;
boolean elseBranchIsExpressionBlock = REGEXP_ESCAPER;
boolean elseBranchIsExpressionBlock = this.late;
boolean elseBranchIsExpressionBlock = this.STRING_SPLIT_OVERHEAD;
boolean elseBranchIsExpressionBlock = INVALID_REGULAR_EXPRESSION_FLAGS;
boolean elseBranchIsExpressionBlock = DONT_TRAVERSE_FUNCTIONS_PREDICATE;
boolean elseBranchIsExpressionBlock = STANDARD_OBJECT_CONSTRUCTORS;
boolean elseBranchIsExpressionBlock = REGEXP_FLAGS_RE;
19:25:16.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:17.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:17.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:18.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:18.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:18.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:18.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:19.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:19.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:20.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:20.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:21.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:21.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:22.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:22.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:23.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:23.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:24.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:24.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:25.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:25.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:26.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:26.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:27.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:27.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:28.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:28.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:28.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:28.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:29.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:29.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:30.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:30.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:31.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseBranch != null) {


}

19:25:31.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:32.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (elseBranch == null) {
    return null;
}

if (elseBranch == null) {
    throw new IllegalArgumentException("Empty variable: " + elseBranch);
}

19:25:32.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:33.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:33.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:34.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:25:34.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:35.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:35.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===767
19:25:35.347 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
boolean thenBranchIsExpressionBlock = statementMustExitParent(thenBranch);
boolean thenBranchIsExpressionBlock = isPure(thenBranch);
boolean thenBranchIsExpressionBlock = isExceptionPossible(thenBranch);
boolean thenBranchIsExpressionBlock = isReturnBlock(thenBranch);
boolean thenBranchIsExpressionBlock = isReturnExpressBlock(thenBranch);
boolean thenBranchIsExpressionBlock = isReturnExpression(thenBranch);
boolean thenBranchIsExpressionBlock = isVarBlock(thenBranch);
boolean thenBranchIsExpressionBlock = consumesDanglingElse(thenBranch);
boolean thenBranchIsExpressionBlock = isPropertyAssignmentInExpression(thenBranch);
19:25:35.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:36.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:36.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:37.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:37.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:38.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:38.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:38.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:38.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:39.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:39.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:40.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:40.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:41.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:41.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:42.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:42.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:43.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranchIsExpressionBlock);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(cond);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(parent);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(n);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(AND_PRECEDENCE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(OR_PRECEDENCE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(NOT_PRECEDENCE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_ESCAPER);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(this.late);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(this.STRING_SPLIT_OVERHEAD);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(INVALID_REGULAR_EXPRESSION_FLAGS);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(DONT_TRAVERSE_FUNCTIONS_PREDICATE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(STANDARD_OBJECT_CONSTRUCTORS);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_FLAGS_RE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock();
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranchIsExpressionBlock, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(cond, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(parent, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(n, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(AND_PRECEDENCE, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(OR_PRECEDENCE, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(NOT_PRECEDENCE, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_ESCAPER, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(this.late, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(this.STRING_SPLIT_OVERHEAD, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(INVALID_REGULAR_EXPRESSION_FLAGS, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(DONT_TRAVERSE_FUNCTIONS_PREDICATE, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(STANDARD_OBJECT_CONSTRUCTORS, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(REGEXP_FLAGS_RE, thenBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, thenBranchIsExpressionBlock);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, elseBranch);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, cond);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, parent);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, n);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, AND_PRECEDENCE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, OR_PRECEDENCE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, NOT_PRECEDENCE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, REGEXP_ESCAPER);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, this.late);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, this.STRING_SPLIT_OVERHEAD);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, INVALID_REGULAR_EXPRESSION_FLAGS);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, DONT_TRAVERSE_FUNCTIONS_PREDICATE);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, STANDARD_OBJECT_CONSTRUCTORS);
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch, REGEXP_FLAGS_RE);
19:25:43.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:44.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:44.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:45.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:45.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:46.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:46.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:47.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:47.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:47.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:47.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:48.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:48.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:49.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:49.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:50.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:50.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:51.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:51.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:52.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:52.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:53.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:53.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:54.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:54.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:55.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:55.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:56.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:56.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:57.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:57.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:57.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:57.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:58.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:58.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:25:59.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:25:59.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:00.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:00.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:01.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:01.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:02.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:02.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:03.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:03.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:04.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:04.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:05.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:05.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:05.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:05.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:06.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:06.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:07.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:07.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:08.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:08.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:09.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:09.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:10.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:10.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:11.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:11.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:12.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:12.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:13.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:13.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:14.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:14.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:15.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:15.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:15.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:15.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:16.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:16.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:17.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:17.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:18.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:18.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:19.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:19.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:20.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:20.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:21.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:21.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:22.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:22.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:23.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:23.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:24.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:24.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:25.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
boolean thenBranchIsExpressionBlock = thenBranchIsExpressionBlock;
boolean thenBranchIsExpressionBlock = elseBranch;
boolean thenBranchIsExpressionBlock = thenBranch;
boolean thenBranchIsExpressionBlock = cond;
boolean thenBranchIsExpressionBlock = parent;
boolean thenBranchIsExpressionBlock = n;
boolean thenBranchIsExpressionBlock = AND_PRECEDENCE;
boolean thenBranchIsExpressionBlock = OR_PRECEDENCE;
boolean thenBranchIsExpressionBlock = NOT_PRECEDENCE;
boolean thenBranchIsExpressionBlock = REGEXP_ESCAPER;
boolean thenBranchIsExpressionBlock = this.late;
boolean thenBranchIsExpressionBlock = this.STRING_SPLIT_OVERHEAD;
boolean thenBranchIsExpressionBlock = INVALID_REGULAR_EXPRESSION_FLAGS;
boolean thenBranchIsExpressionBlock = DONT_TRAVERSE_FUNCTIONS_PREDICATE;
boolean thenBranchIsExpressionBlock = STANDARD_OBJECT_CONSTRUCTORS;
boolean thenBranchIsExpressionBlock = REGEXP_FLAGS_RE;
19:26:25.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:25.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:25.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:26.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:26.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:27.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:27.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:28.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:28.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:29.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:29.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:30.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:30.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:31.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:31.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:32.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:32.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:33.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:33.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:34.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:34.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:35.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:35.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:36.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:36.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:37.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:37.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:37.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:37.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:38.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:38.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:39.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenBranch != null) {


}

19:26:39.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:40.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenBranch == null) {
    return null;
}

if (thenBranch == null) {
    throw new IllegalArgumentException("Empty variable: " + thenBranch);
}

19:26:40.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:41.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:41.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:42.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:26:42.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:43.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:43.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===749
19:26:43.473 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
if (isReturnExpressBlock(thenBranch) || isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
19:26:43.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:44.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenBranch != null) {


}

if (elseBranch != null) {


}

19:26:44.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:45.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:45.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:46.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (thenBranch == null) {
    return null;
}

if (thenBranch == null) {
    throw new IllegalArgumentException("Empty variable: " + thenBranch);
}

if (elseBranch == null) {
    return null;
}

if (elseBranch == null) {
    throw new IllegalArgumentException("Empty variable: " + elseBranch);
}

19:26:46.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:47.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:47.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:47.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:47.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:48.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:48.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:49.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	Node parent = n.getParent();

    Node cond = n.getFirstChild();

    /* If the condition is a literal, we'll let other
     * optimizations try to remove useless code.
     */
    if (NodeUtil.isLiteralValue(cond, true)) {
      return n;
    }

    Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	Node cond = n.getFirstChild();

    /* If the condition is a literal, we'll let other
     * optimizations try to remove useless code.
     */
    if (NodeUtil.isLiteralValue(cond, true)) {
      return n;
    }

    Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	if (NodeUtil.isLiteralValue(cond, true)) {
      return n;
    }

    Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	Node thenBranch = cond.getNext();
    Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	Node elseBranch = thenBranch.getNext();

    if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	if (elseBranch == null) {
      if (isFoldableExpressBlock(thenBranch)) {
        Node expr = getBlockExpression(thenBranch);
        if (!late && isPropertyAssignmentInExpression(expr)) {
          // Keep opportunities for CollapseProperties such as
          // a.longIdentifier || a.longIdentifier = ... -> var a = ...;
          // until CollapseProperties has been run.
          return n;
        }

        if (cond.isNot()) {
          // if(!x)bar(); -> x||bar();
          if (isLowerPrecedenceInExpression(cond, OR_PRECEDENCE) &&
              isLowerPrecedenceInExpression(expr.getFirstChild(),
                  OR_PRECEDENCE)) {
            // It's not okay to add two sets of parentheses.
            return n;
          }

          Node or = IR.or(
              cond.removeFirstChild(),
              expr.removeFirstChild()).srcref(n);
          Node newExpr = NodeUtil.newExpr(or);
          parent.replaceChild(n, newExpr);
          reportCodeChange();

          return newExpr;
        }

        // if(x)foo(); -> x&&foo();
        if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
            isLowerPrecedenceInExpression(expr.getFirstChild(),
                AND_PRECEDENCE)) {
          // One additional set of parentheses is worth the change even if
          // there is no immediate code size win. However, two extra pair of
          // {}, we would have to think twice. (unless we know for sure the
          // we can further optimize its parent.
          return n;
        }

        n.removeChild(cond);
        Node and = IR.and(cond, expr.removeFirstChild()).srcref(n);
        Node newExpr = NodeUtil.newExpr(and);
        parent.replaceChild(n, newExpr);
        reportCodeChange();

        return newExpr;
      } else {

        // Try to combine two IF-ELSE
        if (NodeUtil.isStatementBlock(thenBranch) &&
            thenBranch.hasOneChild()) {
          Node innerIf = thenBranch.getFirstChild();

          if (innerIf.isIf()) {
            Node innerCond = innerIf.getFirstChild();
            Node innerThenBranch = innerCond.getNext();
            Node innerElseBranch = innerThenBranch.getNext();

            if (innerElseBranch == null &&
                 !(isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) &&
                   isLowerPrecedenceInExpression(innerCond, AND_PRECEDENCE))) {
              n.detachChildren();
              n.addChildToBack(
                  IR.and(
                      cond,
                      innerCond.detachFromParent())
                      .srcref(cond));
              n.addChildrenToBack(innerThenBranch.detachFromParent());
              reportCodeChange();
              // Not worth trying to fold the current IF-ELSE into && because
              // the inner IF-ELSE wasn't able to be folded into && anyways.
              return n;
            }
          }
        }
      }

      return n;
    }

    /* TODO(dcc) This modifies the siblings of n, which is undesirable for a
     * peephole optimization. This should probably get moved to another pass.
     */
    tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	tryRemoveRepeatedStatements(n);

    // if(!x)foo();else bar(); -> if(x)bar();else foo();
    // An additional set of curly braces isn't worth it.
    if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }
	if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
      n.replaceChild(cond, cond.removeFirstChild());
      n.removeChild(thenBranch);
      n.addChildToBack(thenBranch);
      reportCodeChange();
      return n;
    }

    // if(x)return 1;else return 2; -> return x?1:2;
    
null


    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

    boolean thenBranchIsVar = isVarBlock(thenBranch);
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

    boolean thenBranchIsVar = isVarBlock(thenBranch);
    boolean elseBranchIsVar = isVarBlock(elseBranch);
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

    boolean thenBranchIsVar = isVarBlock(thenBranch);
    boolean elseBranchIsVar = isVarBlock(elseBranch);

    // if(x)var y=1;else y=2  ->  var y=x?1:2
    if (thenBranchIsVar && elseBranchIsExpressionBlock &&
        getBlockExpression(elseBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(thenBranch);
      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();

      Node name1 = var.getFirstChild();
      Node maybeName2 = elseAssign.getFirstChild();

      if (name1.hasChildren()
          && maybeName2.isName()
          && name1.getString().equals(maybeName2.getString())) {
        Node thenExpr = name1.removeChildren();
        Node elseExpr = elseAssign.getLastChild().detachFromParent();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name1.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();
        return var;
      }

    // if(x)y=1;else var y=2  ->  var y=x?1:2
    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
        getBlockExpression(thenBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(elseBranch);
      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();

      Node maybeName1 = thenAssign.getFirstChild();
      Node name2 = var.getFirstChild();

      if (name2.hasChildren()
          && maybeName1.isName()
          && maybeName1.getString().equals(name2.getString())) {
        Node thenExpr = thenAssign.getLastChild().detachFromParent();
        Node elseExpr = name2.removeChildren();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name2.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();

        return var;
      }
    }
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

MOVE-BUGGY-STATEMENT


    boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
    boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);

    if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
      Node thenOp = getBlockExpression(thenBranch).getFirstChild();
      Node elseOp = getBlockExpression(elseBranch).getFirstChild();
      if (thenOp.getType() == elseOp.getType()) {
        // if(x)a=1;else a=2; -> a=x?1:2;
        if (NodeUtil.isAssignmentOp(thenOp)) {
          Node lhs = thenOp.getFirstChild();
          if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
              // if LHS has side effects, don't proceed [since the optimization
              // evaluates LHS before cond]
              // NOTE - there are some circumstances where we can
              // proceed even if there are side effects...
              !mayEffectMutableState(lhs)) {

            n.removeChild(cond);
            Node assignName = thenOp.removeFirstChild();
            Node thenExpr = thenOp.removeFirstChild();
            Node elseExpr = elseOp.getLastChild();
            elseOp.removeChild(elseExpr);

            Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
            Node assign = new Node(thenOp.getType(), assignName, hookNode)
                              .srcref(thenOp);
            Node expr = NodeUtil.newExpr(assign);
            parent.replaceChild(n, expr);
            reportCodeChange();

            return expr;
          }
        }
      }
      // if(x)foo();else bar(); -> x?foo():bar()
      n.removeChild(cond);
      thenOp.detachFromParent();
      elseOp.detachFromParent();
      Node expr = IR.exprResult(
          IR.hook(cond, thenOp, elseOp).srcref(n));
      parent.replaceChild(n, expr);
      reportCodeChange();
      return expr;
    }

    boolean thenBranchIsVar = isVarBlock(thenBranch);
    boolean elseBranchIsVar = isVarBlock(elseBranch);

    // if(x)var y=1;else y=2  ->  var y=x?1:2
    if (thenBranchIsVar && elseBranchIsExpressionBlock &&
        getBlockExpression(elseBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(thenBranch);
      Node elseAssign = getBlockExpression(elseBranch).getFirstChild();

      Node name1 = var.getFirstChild();
      Node maybeName2 = elseAssign.getFirstChild();

      if (name1.hasChildren()
          && maybeName2.isName()
          && name1.getString().equals(maybeName2.getString())) {
        Node thenExpr = name1.removeChildren();
        Node elseExpr = elseAssign.getLastChild().detachFromParent();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name1.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();
        return var;
      }

    // if(x)y=1;else var y=2  ->  var y=x?1:2
    } else if (elseBranchIsVar && thenBranchIsExpressionBlock &&
        getBlockExpression(thenBranch).getFirstChild().isAssign()) {

      Node var = getBlockVar(elseBranch);
      Node thenAssign = getBlockExpression(thenBranch).getFirstChild();

      Node maybeName1 = thenAssign.getFirstChild();
      Node name2 = var.getFirstChild();

      if (name2.hasChildren()
          && maybeName1.isName()
          && maybeName1.getString().equals(name2.getString())) {
        Node thenExpr = thenAssign.getLastChild().detachFromParent();
        Node elseExpr = name2.removeChildren();
        cond.detachFromParent();
        Node hookNode = IR.hook(cond, thenExpr, elseExpr)
                            .srcref(n);
        var.detachFromParent();
        name2.addChildrenToBack(hookNode);
        parent.replaceChild(n, var);
        reportCodeChange();

        return var;
      }
    }

    return n;
	if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
      Node thenExpr = getBlockReturnExpression(thenBranch);
      Node elseExpr = getBlockReturnExpression(elseBranch);
      n.removeChild(cond);
      thenExpr.detachFromParent();
      elseExpr.detachFromParent();

      // note - we ignore any cases with "return;", technically this
      // can be converted to "return undefined;" or some variant, but
      // that does not help code size.
      Node returnNode = IR.returnNode(
                            IR.hook(cond, thenExpr, elseExpr)
                                .srcref(n));
      parent.replaceChild(n, returnNode);
      reportCodeChange();
      return returnNode;
    }

MOVE-BUGGY-STATEMENT
19:26:49.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:50.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:50.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:51.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:51.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:52.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:52.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:53.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:53.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:54.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:54.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:55.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:55.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:56.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:56.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:56.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:56.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:57.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:57.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:58.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:58.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:26:59.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:26:59.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:27:00.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:27:00.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:27:01.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:27:01.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:27:02.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:27:02.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:27:03.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 

19:27:03.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
19:27:04.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-132 ---Fixer: fix fail because of failed compiling! 
19:27:04.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax ===920
19:27:04.142 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
/**
   * Try to remove duplicate statements from IF blocks. For example:
   *
   * if (a) {
   *   x = 1;
   *   return true;
   * } else {
   *   x = 2;
   *   return true;
   * }
   *
   * becomes:
   *
   * if (a) {
   *   x = 1;
   * } else {
   *   x = 2;
   * }
   * return true;
   *
   * @param n The IF node to examine.
   */
  private void tryRemoveRepeatedStatements(Node n) {
    Preconditions.checkState(n.isIf());

    Node parent = n.getParent();
    if (!NodeUtil.isStatementBlock(parent)) {
      // If the immediate parent is something like a label, we
      // can't move the statement, so bail.
      return;
    }

    Node cond = n.getFirstChild();
    Node trueBranch = cond.getNext();
    Node falseBranch = trueBranch.getNext();
    Preconditions.checkNotNull(trueBranch);
    Preconditions.checkNotNull(falseBranch);

    while (true) {
      Node lastTrue = trueBranch.getLastChild();
      Node lastFalse = falseBranch.getLastChild();
      if (lastTrue == null || lastFalse == null
          || !areNodesEqualForInlining(lastTrue, lastFalse)) {
        break;
      }
      lastTrue.detachFromParent();
      lastFalse.detachFromParent();
      parent.addChildAfter(lastTrue, n);
      reportCodeChange();
    }
  }
