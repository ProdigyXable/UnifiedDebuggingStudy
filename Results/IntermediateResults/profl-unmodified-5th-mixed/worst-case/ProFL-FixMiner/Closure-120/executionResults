Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Closure-120
16:00:13.511 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/120.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/120.txt
16:04:44.843 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
16:04:44.920 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-120/generalSusInfo.profl
16:04:45.003 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-120/aggregatedSusInfo.profl
16:04:45.007 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
16:04:45.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1459
16:04:46.014 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return res;
if (res != null) {


}

16:04:46.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:47.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (res == null) {
    return null;
}

if (res == null) {
    throw new IllegalArgumentException("Empty variable: " + res);
}

16:04:47.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:48.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:04:48.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:49.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
detachChildren();
	return res;
return res;
	detachChildren();
setQuotedString();
	return res;
return res;
	setQuotedString();
16:04:49.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:50.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:04:50.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:51.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:04:51.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:52.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:04:52.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:53.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 

16:04:53.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:55.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:04:55.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1430
16:04:55.215 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
if (node2 != null) {


}

16:04:55.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:56.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

16:04:56.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:57.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:04:57.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:58.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 

16:04:58.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:04:59.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:04:59.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1446
16:04:59.927 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return new NodeMismatch(this, node2);
if (node2 != null) {


}

16:04:59.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:01.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

16:05:01.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:02.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:02.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:03.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
addChildToFront(node2);
addChildToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToFront(node2);
addChildToBack(node2);
addChildToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToBack(node2);
addChildrenToFront(node2);
addChildrenToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToFront(node2);
addChildrenToBack(node2);
addChildrenToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToBack(node2);
removeChild(node2);
removeChild(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	removeChild(node2);
detachChildren();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	detachChildren();
setQuotedString();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	setQuotedString();
16:05:03.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:04.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:04.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:05.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:05.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:06.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:06.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:07.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:07.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:08.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:08.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:09.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:09.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:11.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:11.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:12.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:12.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:13.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:13.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:14.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:14.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:15.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:15.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:17.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:17.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:18.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:18.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:19.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:19.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:20.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:20.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:21.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:21.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:23.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:23.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:24.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:24.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:25.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 

16:05:25.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:26.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:26.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Token ===221
16:05:26.665 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case SHEQ:
if (SHEQ == 0) {
    new IllegalArgumentException("");
}

if (SHEQ != 0) {

    
}

if (SHEQ > 0) {

    
}

16:05:26.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:27.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:27.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:27.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:27.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:28.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 

16:05:28.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:28.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:28.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NodeUtil ===2185
16:05:28.970 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case Token.SHEQ:

16:05:28.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:30.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:30.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NodeUtil ===1607
16:05:30.312 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return n.getNext();
return n.getNext(parent);
return n.getNext(MAX_POSITIVE_INTEGER_NUMBER);
return n.getNext(JSC_PROPERTY_NAME_FN);
return n.getNext(LARGEST_BASIC_LATIN);
return n.getNext(CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);
return n.getNext(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);
return n.getNext(OBJECT_METHODS_WITHOUT_SIDEEFFECTS);
return n.getNext(REGEXP_METHODS);
return n.getNext(STRING_REGEXP_METHODS);
return n.getNext(IMMUTABLE_PREDICATE);
return n.getNext(NUMBERIC_RESULT_PREDICATE);
return n.getNext(BOOLEAN_RESULT_PREDICATE);
return n.getNext(MAY_BE_STRING_PREDICATE);
return n.getNext(MATCH_NOT_FUNCTION);
16:05:30.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:31.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:31.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:32.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:32.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:34.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:34.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:35.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:35.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:36.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:36.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:38.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:38.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:39.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:39.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:40.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:40.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:42.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:42.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:43.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:43.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:44.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:44.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:45.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:45.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:47.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:47.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:48.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
return n.getAncestors();
return n.getJSType();
return n.getType();
return n.getLength();
return n.getLineno();
return n.getCharno();
return n.getSourceOffset();
return n.getSourcePosition();
return n.getChildCount();
return n.getChangeTime();
return n.getSideEffectFlags();
return n.getSortedPropTypes();
return n.getPropListHeadForTesting();
return n.detachChildren();
return n.setQuotedString();
return n.getDouble();
return n.getStaticSourceFile();
return n.getInputId();
return n.children();
return n.siblings();
return n.getJSDocInfo();
return n.getFirstChild();
return n.getLastChild();
return n.getLastSibling();
return n.getParent();
return n.detachFromParent();
return n.removeFirstChild();
return n.removeChildren();
return n.cloneNode();
return n.cloneTree();
return n.getString();
return n.toString();
return n.toStringTree();
return n.toStringTreeImpl();
return n.getSourceFileName();
return n.getQualifiedName();
return n.hasChildren();
return n.isFromExterns();
return n.hasOneChild();
return n.hasMoreThanOneChild();
return n.isQualifiedName();
return n.isUnscopedQualifiedName();
return n.isVarArgs();
return n.isOptionalArg();
return n.isSyntheticBlock();
return n.wasEmptyNode();
return n.isOnlyModifiesThisCall();
return n.isOnlyModifiesArgumentsCall();
return n.isNoSideEffectsCall();
return n.isLocalResultCall();
return n.mayMutateArguments();
return n.mayMutateGlobalStateOrThrow();
return n.isQuotedString();
return n.isAdd();
return n.isAnd();
return n.isArrayLit();
return n.isAssign();
return n.isAssignAdd();
return n.isBlock();
return n.isBreak();
return n.isCall();
return n.isCase();
return n.isCast();
return n.isCatch();
return n.isComma();
return n.isContinue();
return n.isDebugger();
return n.isDec();
return n.isDefaultCase();
return n.isDelProp();
return n.isDo();
return n.isEmpty();
return n.isExprResult();
return n.isFalse();
return n.isFor();
return n.isFunction();
return n.isGetterDef();
return n.isGetElem();
return n.isGetProp();
return n.isHook();
return n.isIf();
return n.isIn();
return n.isInc();
return n.isInstanceOf();
return n.isLabel();
return n.isLabelName();
return n.isName();
return n.isNE();
return n.isNew();
return n.isNot();
return n.isNull();
return n.isNumber();
return n.isObjectLit();
return n.isOr();
return n.isParamList();
return n.isRegExp();
return n.isReturn();
return n.isScript();
return n.isSetterDef();
return n.isString();
return n.isStringKey();
return n.isSwitch();
return n.isThis();
return n.isThrow();
return n.isTrue();
return n.isTry();
return n.isTypeOf();
return n.isVar();
return n.isVoid();
return n.isWhile();
return n.isWith();
return n.getDirectives();
return n.getJsDocBuilderForNode();
16:05:48.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:49.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:49.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:50.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:50.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:52.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:52.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:53.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:53.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:54.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:54.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:55.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:55.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:57.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:57.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:58.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:58.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:05:59.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:05:59.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:01.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:01.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:02.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:02.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:03.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:03.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:04.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:04.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:06.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:06.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:07.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:07.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:08.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:08.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:10.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:10.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:11.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:11.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:12.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:12.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:14.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:14.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:15.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:15.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:16.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:16.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:18.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:18.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:19.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:19.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:20.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:20.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:21.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:21.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:23.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:23.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:24.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:24.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:25.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:25.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:27.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:27.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:28.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:28.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:29.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:29.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:31.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:31.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:32.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:32.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:34.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:34.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:35.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:35.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:36.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:36.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:37.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:37.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:39.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:39.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:40.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:40.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:41.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:41.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:43.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:43.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:44.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:44.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:45.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:45.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:47.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:47.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:48.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:48.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:49.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:49.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:50.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:50.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:52.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:52.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:53.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:53.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:54.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:54.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:56.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:56.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:57.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:57.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:58.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:58.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:06:59.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:06:59.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:01.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:01.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:02.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:02.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:03.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:03.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:05.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:05.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:06.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:06.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:07.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:07.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:09.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:09.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:10.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:10.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:11.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:11.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:13.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:13.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:14.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:14.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:15.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:15.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:17.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:17.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:18.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:18.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:19.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:19.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:21.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:21.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:22.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:22.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:23.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:23.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:25.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:25.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:26.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:26.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:27.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:27.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:28.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:28.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:30.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:30.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:31.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:31.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:32.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:32.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:34.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:34.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:35.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:35.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:36.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:36.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:38.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:38.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:39.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:39.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:40.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:40.568 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:41.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:41.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:43.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:43.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:44.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:44.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:45.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:45.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:46.999 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:47.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:48.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:48.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:49.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:49.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:50.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:50.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:52.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:52.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:53.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:53.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:55.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:55.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:56.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:56.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:57.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:57.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:07:58.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:07:58.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:00.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:00.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:01.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:01.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:02.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:02.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:04.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:04.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:05.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:05.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:06.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:06.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:08.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:08.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:09.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:09.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:10.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:10.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:12.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:12.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:13.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:13.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:14.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:14.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:15.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
return n.getNext(true);
return n.getNext(false);
16:08:15.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:17.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:17.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:18.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

16:08:18.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:19.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

16:08:19.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:21.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:21.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:22.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 

16:08:22.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:23.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:23.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.parsing.IRFactory ===1397
16:08:23.848 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return Token.SHEQ;

16:08:23.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:24.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:24.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NodeUtil ===1223
16:08:25.053 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
case Token.SHNE:

16:08:25.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:26.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:26.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NodeUtil ===1606
16:08:26.417 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (parent.isAssign() && parent.getFirstChild() == n) {
      return n.getNext();
    } else {
      return null;
    }
if (parent.isAssign() || parent.getFirstChild() == n) {
      return n.getNext();
    } else {
      return null;
    }
if (parent.isAssign() && parent.getFirstChild() != n) {
      return n.getNext();
    } else {
      return null;
    }
16:08:26.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:27.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:27.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:28.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (parent.isAssign() && parent.getFirstChild() == parent) {
      return n.getNext();
    } else {
      return null;
    }
16:08:28.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:30.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

if (parent != null) {


}

if (n != null) {


}

16:08:30.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:31.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:31.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:32.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:32.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:34.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

16:08:34.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:35.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:35.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:36.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:36.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:37.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:37.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:39.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:39.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:40.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:40.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:41.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
maybeAddFinally(n);
maybeAddFinally(n);
	if (parent.isAssign() && parent.getFirstChild() == n) {
      return n.getNext();
    } else {
      return null;
    }
if (parent.isAssign() && parent.getFirstChild() == n) {
      return n.getNext();
    } else {
      return null;
    }
	maybeAddFinally(n);
redeclareVarsInsideBranch(n);
redeclareVarsInsideBranch(n);
	if (parent.isAssign() && parent.getFirstChild() == n) {
      return n.getNext();
    } else {
      return null;
    }
if (parent.isAssign() && parent.getFirstChild() == n) {
      return n.getNext();
    } else {
      return null;
    }
	redeclareVarsInsideBranch(n);
16:08:41.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:42.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:42.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:44.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:44.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:45.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:45.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:46.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:46.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:48.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:48.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:49.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
if (parent.isAssign() && parent.getFirstChild() == n) {
      return n.getNext();
    } else {
      return null;
    }
	return n.getFirstChild();
    } else 
null
16:08:49.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:49.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 

16:08:49.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:50.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:50.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.InlineVariables ===92
16:08:50.337 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return Predicates.<Var>alwaysTrue();
return Predicates.<Var>alwaysTrue(this.compiler);
return Predicates.<Var>alwaysTrue(this.mode);
return Predicates.<Var>alwaysTrue(this.inlineAllStrings);
return Predicates.<Var>alwaysTrue(this.identifyConstants);
16:08:50.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:51.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:51.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:52.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:52.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:53.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:53.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:54.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
return getFilterForMode().<Var>alwaysTrue();
16:08:54.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:55.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
return Predicates.<Var>alwaysTrue(true);
return Predicates.<Var>alwaysTrue(false);
16:08:55.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:56.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:56.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:57.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 

16:08:57.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
16:08:58.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-120 ---Fixer: fix fail because of failed compiling! 
16:08:58.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.InlineVariables ===54
16:08:58.292 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
InlineVariables implements CompilerPass {

  private final AbstractCompiler compiler;

  enum Mode {
    // Only inline things explicitly marked as constant.
    CONSTANTS_ONLY,
    // Locals only
    LOCALS_ONLY,
    ALL
  }

  private final Mode mode;

  // Inlines all strings, even if they increase the size of the gzipped binary.
  private final boolean inlineAllStrings;

  private final IdentifyConstants identifyConstants = new IdentifyConstants();

  InlineVariables(
      AbstractCompiler compiler,
      Mode mode,
      boolean inlineAllStrings) {
    this.compiler = compiler;
    this.mode = mode;
    this.inlineAllStrings = inlineAllStrings;
  }

  @Override
  public void process(Node externs, Node root) {
    ReferenceCollectingCallback callback = new ReferenceCollectingCallback(
        compiler, new InliningBehavior(), getFilterForMode());
    callback.process(externs, root);
  }

  private Predicate<Var> getFilterForMode() {
    switch (mode) {
      case ALL:
        return Predicates.<Var>alwaysTrue();
      case LOCALS_ONLY:
        return new IdentifyLocals();
      case CONSTANTS_ONLY:
        return new IdentifyConstants();
      default:
        throw new IllegalStateException();
    }
  }

  /**
   * Filters variables declared as "constant", and declares them in the outer
   * declaredConstants map.
   *
   * In Google coding conventions, this means anything declared with @const
   * or named in all caps, and initialized to an immutable value.
   * CheckConsts has already verified that these are truly constants.
   */
  private class IdentifyConstants implements Predicate<Var> {
    @Override
    public boolean apply(Var var) {
      return var.isConst();
    }
  }

  /**
   * Filters non-global variables.
   */
  private class IdentifyLocals implements Predicate<Var> {
    @Override
    public boolean apply(Var var) {
      return var.scope.isLocal();
    }
  }

  private static class AliasCandidate {
    private final Var alias;
    private final ReferenceCollection refInfo;

    AliasCandidate(Var alias, ReferenceCollection refInfo) {
      this.alias = alias;
      this.refInfo = refInfo;
    }
  }

  /**
   * Builds up information about nodes in each scope. When exiting the
   * scope, inspects all variables in that scope, and inlines any
   * that we can.
   */
  private class InliningBehavior implements Behavior {

    /**
     * A list of variables that should not be inlined, because their
     * reference information is out of sync with the state of the AST.
     */
    private final Set<Var> staleVars = Sets.newHashSet();

    /**
     * Stored possible aliases of variables that never change, with
     * all the reference info about those variables. Hashed by the NAME
     * node of the variable being aliased.
     */
    final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();

    @Override
    public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {
      collectAliasCandidates(t, referenceMap);
      doInlinesForScope(t, referenceMap);
    }

    /**
     * If any of the variables are well-defined and alias other variables,
     * mark them as aliasing candidates.
     */
    private void collectAliasCandidates(NodeTraversal t,
        ReferenceMap referenceMap) {
      if (mode != Mode.CONSTANTS_ONLY) {
        for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
          Var v = it.next();
          ReferenceCollection referenceInfo = referenceMap.getReferences(v);

          // NOTE(nicksantos): Don't handle variables that are never used.
          // The tests are much easier to write if you don't, and there's
          // another pass that handles unused variables much more elegantly.
          if (referenceInfo != null && referenceInfo.references.size() >= 2 &&
              referenceInfo.isWellDefined() &&
              referenceInfo.isAssignedOnceInLifetime()) {
            Reference init = referenceInfo.getInitializingReference();
            Node value = init.getAssignedValue();
            if (value != null && value.isName()) {
              aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));
            }
          }
        }
      }
    }

    /**
     * For all variables in this scope, see if they are only used once.
     * If it looks safe to do so, inline them.
     */
    private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) {

      boolean maybeModifiedArguments =
          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);
      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {
        Var v = it.next();

        ReferenceCollection referenceInfo = referenceMap.getReferences(v);

        // referenceInfo will be null if we're in constants-only mode
        // and the variable is not a constant.
        if (referenceInfo == null || isVarInlineForbidden(v)) {
          // Never try to inline exported variables or variables that
          // were not collected or variables that have already been inlined.
          continue;
        } else if (isInlineableDeclaredConstant(v, referenceInfo)) {
          Reference init = referenceInfo.getInitializingReferenceForConstants();
          Node value = init.getAssignedValue();
          inlineDeclaredConstant(v, value, referenceInfo.references);
          staleVars.add(v);
        } else if (mode == Mode.CONSTANTS_ONLY) {
          // If we're in constants-only mode, don't run more aggressive
          // inlining heuristics. See InlineConstantsTest.
          continue;
        } else {
          inlineNonConstants(v, referenceInfo, maybeModifiedArguments);
        }
      }
    }

    private boolean maybeEscapedOrModifiedArguments(
        Scope scope, ReferenceMap referenceMap) {
      if (scope.isLocal()) {
        Var arguments = scope.getArgumentsVar();
        ReferenceCollection refs = referenceMap.getReferences(arguments);
        if (refs != null && !refs.references.isEmpty()) {
          for (Reference ref : refs.references) {
            Node refNode = ref.getNode();
            Node refParent = ref.getParent();
            // Any reference that is not a read of the arguments property
            // consider a escape of the arguments object.
            if (!(NodeUtil.isGet(refParent)
                && refNode == ref.getParent().getFirstChild()
                && !isLValue(refParent))) {
              return true;
            }
          }
        }
      }
      return false;
    }

    private boolean isLValue(Node n) {
      Node parent = n.getParent();
      return (parent.isInc()
          || parent.isDec()
          || (NodeUtil.isAssignmentOp(parent)
          && parent.getFirstChild() == n));
    }

    private void inlineNonConstants(
        Var v, ReferenceCollection referenceInfo,
        boolean maybeModifiedArguments) {
      int refCount = referenceInfo.references.size();
      Reference declaration = referenceInfo.references.get(0);
      Reference init = referenceInfo.getInitializingReference();
      int firstRefAfterInit = (declaration == init) ? 2 : 3;

      if (refCount > 1 &&
          isImmutableAndWellDefinedVariable(v, referenceInfo)) {
        // if the variable is referenced more than once, we can only
        // inline it if it's immutable and never defined before referenced.
        Node value;
        if (init != null) {
          value = init.getAssignedValue();
        } else {
          // Create a new node for variable that is never initialized.
          Node srcLocation = declaration.getNode();
          value = NodeUtil.newUndefinedNode(srcLocation);
        }
        Preconditions.checkNotNull(value);
        inlineWellDefinedVariable(v, value, referenceInfo.references);
        staleVars.add(v);
      } else if (refCount == firstRefAfterInit) {
        // The variable likely only read once, try some more
        // complex inlining heuristics.
        Reference reference = referenceInfo.references.get(
            firstRefAfterInit - 1);
        if (canInline(declaration, init, reference)) {
          inline(v, declaration, init, reference);
          staleVars.add(v);
        }
      } else if (declaration != init && refCount == 2) {
        if (isValidDeclaration(declaration) && isValidInitialization(init)) {
          // The only reference is the initialization, remove the assignment and
          // the variable declaration.
          Node value = init.getAssignedValue();
          Preconditions.checkNotNull(value);
          inlineWellDefinedVariable(v, value, referenceInfo.references);
          staleVars.add(v);
        }
      }

      // If this variable was not inlined normally, check if we can
      // inline an alias of it. (If the variable was inlined, then the
      // reference data is out of sync. We're better off just waiting for
      // the next pass.)
      if (!maybeModifiedArguments &&
          !staleVars.contains(v) && referenceInfo.isWellDefined() &&
          referenceInfo.isAssignedOnceInLifetime()) {
        List<Reference> refs = referenceInfo.references;
        for (int i = 1 /* start from a read */; i < refs.size(); i++) {
          Node nameNode = refs.get(i).getNode();
          if (aliasCandidates.containsKey(nameNode)) {
            AliasCandidate candidate = aliasCandidates.get(nameNode);
            if (!staleVars.contains(candidate.alias) &&
                !isVarInlineForbidden(candidate.alias)) {
              Reference aliasInit;
              aliasInit = candidate.refInfo.getInitializingReference();
              Node value = aliasInit.getAssignedValue();
              Preconditions.checkNotNull(value);
              inlineWellDefinedVariable(candidate.alias,
                  value,
                  candidate.refInfo.references);
              staleVars.add(candidate.alias);
            }
          }
        }
      }
    }

    /**
     * If there are any variable references in the given node tree, blacklist
     * them to prevent the pass from trying to inline the variable.
     */
    private void blacklistVarReferencesInTree(Node root, Scope scope) {
      for (Node c = root.getFirstChild(); c != null; c = c.getNext()) {
        blacklistVarReferencesInTree(c, scope);
      }

      if (root.isName()) {
        staleVars.add(scope.getVar(root.getString()));
      }
    }

    /**
     * Whether the given variable is forbidden from being inlined.
     */
    private boolean isVarInlineForbidden(Var var) {
      // A variable may not be inlined if:
      // 1) The variable is exported,
      // 2) A reference to the variable has been inlined. We're downstream
      //    of the mechanism that creates variable references, so we don't
      //    have a good way to update the reference. Just punt on it.
      // 3) Don't inline the special RENAME_PROPERTY_FUNCTION_NAME
      return var.isExtern()
          || compiler.getCodingConvention().isExported(var.name)
          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)
          || staleVars.contains(var);
    }

    /**
     * Do the actual work of inlining a single declaration into a single
     * reference.
     */
    private void inline(Var v, Reference decl, Reference init, Reference ref) {
      Node value = init.getAssignedValue();
      Preconditions.checkState(value != null);
      // Check for function declarations before the value is moved in the AST.
      boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);
      compiler.reportChangeToEnclosingScope(ref.getNode());
      inlineValue(v, ref, value.detachFromParent());
      if (decl != init) {
        Node expressRoot = init.getGrandparent();
        Preconditions.checkState(expressRoot.isExprResult());
        NodeUtil.removeChild(expressRoot.getParent(), expressRoot);
      }
      // Function declarations have already been removed.
      if (!isFunctionDeclaration) {
        compiler.reportChangeToEnclosingScope(decl.getNode());
        removeDeclaration(decl);
      }
    }

    /**
     * Inline an immutable variable into all of its references.
     */
    private void inlineWellDefinedVariable(Var v, Node value,
        List<Reference> refSet) {
      Reference decl = refSet.get(0);
      for (int i = 1; i < refSet.size(); i++) {
        inlineValue(v, refSet.get(i), value.cloneTree());
      }
      removeDeclaration(decl);
    }

    /**
     * Inline a declared constant.
     */
    private void inlineDeclaredConstant(Var v, Node value,
        List<Reference> refSet) {
      // Replace the references with the constant value
      Reference decl = null;

      for (Reference r : refSet) {
        if (r.getNode() == v.getNameNode()) {
          decl = r;
        } else {
          inlineValue(v, r, value.cloneTree());
        }
      }

      removeDeclaration(decl);
    }

    /**
     * Remove the given VAR declaration.
     */
    private void removeDeclaration(Reference decl) {
      Node varNode = decl.getParent();
      Node grandparent = decl.getGrandparent();

      compiler.reportChangeToEnclosingScope(decl.getNode());
      varNode.removeChild(decl.getNode());
      // Remove var node if empty
      if (!varNode.hasChildren()) {
        Preconditions.checkState(varNode.isVar());
        NodeUtil.removeChild(grandparent, varNode);
      }
    }

    /**
     * Replace the given reference with the given value node.
     *
     * @param v The variable that's referenced.
     * @param ref The reference to replace.
     * @param value The node tree to replace it with. This tree should be safe
     *     to re-parent.
     */
    private void inlineValue(Var v, Reference ref, Node value) {
      compiler.reportChangeToEnclosingScope(ref.getNode());
      if (ref.isSimpleAssignmentToName()) {
        // This is the initial assignment.
        ref.getGrandparent().replaceChild(ref.getParent(), value);
      } else {
        ref.getParent().replaceChild(ref.getNode(), value);
      }
      blacklistVarReferencesInTree(value, v.scope);
    }

    /**
     * Determines whether the given variable is declared as a constant
     * and may be inlined.
     */
    private boolean isInlineableDeclaredConstant(Var var,
        ReferenceCollection refInfo) {
      if (!identifyConstants.apply(var)) {
        return false;
      }

      if (!refInfo.isAssignedOnceInLifetime()) {
        return false;
      }

      Reference init = refInfo.getInitializingReferenceForConstants();
      if (init == null) {
        return false;
      }

      Node value = init.getAssignedValue();
      if (value == null) {
        // This constant is either externally defined or initialized indirectly
        // (e.g. in an function expression used to hide
        // temporary variables), so the constant is ineligible for inlining.
        return false;
      }

      // Is the constant's value immutable?
      if (!NodeUtil.isImmutableValue(value)) {
        return false;
      }

      // Determine if we should really inline a String or not.
      return !value.isString() ||
          isStringWorthInlining(var, refInfo.references);
    }

    /**
     * Compute whether the given string is worth inlining.
     */
    private boolean isStringWorthInlining(Var var, List<Reference> refs) {
      if (!inlineAllStrings && !var.isDefine()) {
        int len = var.getInitialValue().getString().length() + "''".length();

        // if not inlined: var xx="value"; .. xx .. xx ..
        // The 4 bytes per reference is just a heuristic:
        // 2 bytes per var name plus maybe 2 bytes if we don't inline, e.g.
        // in the case of "foo " + CONST + " bar"
        int noInlineBytes = "var xx=;".length() + len +
                            4 * (refs.size() - 1);

        // if inlined:
        // I'm going to assume that half of the quotes will be eliminated
        // thanks to constant folding, therefore I subtract 1 (2/2=1) from
        // the string length.
        int inlineBytes = (len - 1) * (refs.size() - 1);

        // Not inlining if doing so uses more bytes, or this constant is being
        // defined.
        return noInlineBytes >= inlineBytes;
      }

      return true;
    }

    /**
     * @return true if the provided reference and declaration can be safely
     *         inlined according to our criteria
     */
    private boolean canInline(
        Reference declaration,
        Reference initialization,
        Reference reference) {
      if (!isValidDeclaration(declaration)
          || !isValidInitialization(initialization)
          || !isValidReference(reference)) {
        return false;
      }

      // If the value is read more than once, skip it.
      // VAR declarations and EXPR_RESULT don't need the value, but other
      // ASSIGN expressions parents do.
      if (declaration != initialization &&
          !initialization.getGrandparent().isExprResult()) {
        return false;
      }

      // Be very conservative and do no cross control structures or
      // scope boundaries
      if (declaration.getBasicBlock() != initialization.getBasicBlock()
          || declaration.getBasicBlock() != reference.getBasicBlock()) {
        return false;
      }

      // Do not inline into a call node. This would change
      // the context in which it was being called. For example,
      //   var a = b.c;
      //   a();
      // should not be inlined, because it calls a in the context of b
      // rather than the context of the window.
      //   var a = b.c;
      //   f(a)
      // is OK.
      Node value = initialization.getAssignedValue();
      Preconditions.checkState(value != null);
      if (value.isGetProp()
          && reference.getParent().isCall()
          && reference.getParent().getFirstChild() == reference.getNode()) {
        return false;
      }

      if (value.isFunction()) {
        Node callNode = reference.getParent();
        if (reference.getParent().isCall()) {
          CodingConvention convention = compiler.getCodingConvention();
          // Bug 2388531: Don't inline subclass definitions into class defining
          // calls as this confused class removing logic.
          SubclassRelationship relationship =
              convention.getClassesDefinedByCall(callNode);
          if (relationship != null) {
            return false;
          }

          // issue 668: Don't inline singleton getter methods
          // calls as this confused class removing logic.
          if (convention.getSingletonGetterClassName(callNode) != null) {
            return false;
          }
        }
      }

      return canMoveAggressively(value) ||
          canMoveModerately(initialization, reference);
    }

    /**
     * If the value is a literal, we can cross more boundaries to inline it.
     */
    private boolean canMoveAggressively(Node value) {
      // Function expressions and other mutable objects can move within
      // the same basic block.
      return NodeUtil.isLiteralValue(value, true)
          || value.isFunction();
    }

    /**
     * If the value of a variable is not constant, then it may read or modify
     * state. Therefore it cannot be moved past anything else that may modify
     * the value being read or read values that are modified.
     */
    private boolean canMoveModerately(
        Reference initialization,
        Reference reference) {
      // Check if declaration can be inlined without passing
      // any side-effect causing nodes.
      Iterator<Node> it;
      if (initialization.getParent().isVar()) {
        it = NodeIterators.LocalVarMotion.forVar(
            initialization.getNode(),     // NAME
            initialization.getParent(),       // VAR
            initialization.getGrandparent()); // VAR container
      } else if (initialization.getParent().isAssign()) {
        Preconditions.checkState(
            initialization.getGrandparent().isExprResult());
        it = NodeIterators.LocalVarMotion.forAssign(
            initialization.getNode(),     // NAME
            initialization.getParent(),       // ASSIGN
            initialization.getGrandparent(),  // EXPR_RESULT
            initialization.getGrandparent().getParent()); // EXPR container
      } else {
        throw new IllegalStateException("Unexpected initialization parent " +
            initialization.getParent().toStringTree());
      }
      Node targetName = reference.getNode();
      while (it.hasNext()) {
        Node curNode = it.next();
        if (curNode == targetName) {
          return true;
        }
      }

      return false;
    }

    /**
     * @return true if the reference is a normal VAR or FUNCTION declaration.
     */
    private boolean isValidDeclaration(Reference declaration) {
      return (declaration.getParent().isVar()
          && !declaration.getGrandparent().isFor())
          || NodeUtil.isFunctionDeclaration(declaration.getParent());
    }

    /**
     * @return Whether there is a initial value.
     */
    private boolean isValidInitialization(Reference initialization) {
      if (initialization == null) {
        return false;
      } else if (initialization.isDeclaration()) {
        // The reference is a FUNCTION declaration or normal VAR declaration
        // with a value.
        if (!NodeUtil.isFunctionDeclaration(initialization.getParent())
            && initialization.getNode().getFirstChild() == null) {
          return false;
        }
      } else {
        Node parent = initialization.getParent();
        Preconditions.checkState(
            parent.isAssign()
            && parent.getFirstChild() == initialization.getNode());
      }

      Node n = initialization.getAssignedValue();
      if (n.isFunction()) {
        return compiler.getCodingConvention().isInlinableFunction(n);
      }

      return true;
    }

    /**
     * @return true if the reference is a candidate for inlining
     */
    private boolean isValidReference(Reference reference) {
      return !reference.isDeclaration() && !reference.isLvalue();
    }

    /**
     * Determines whether the reference collection describes a variable that
     * is initialized to an immutable value, never modified, and defined before
     * every reference.
     */
    private boolean isImmutableAndWellDefinedVariable(Var v,
        ReferenceCollection refInfo) {
      List<Reference> refSet = refInfo.references;
      int startingReadRef = 1;
      Reference refDecl = refSet.get(0);
      if (!isValidDeclaration(refDecl)) {
        return false;
      }

      boolean isNeverAssigned = refInfo.isNeverAssigned();
      // For values that are never assigned, only the references need to be
      // checked.
      if (!isNeverAssigned) {
        Reference refInit = refInfo.getInitializingReference();
        if (!isValidInitialization(refInit)) {
          return false;
        }

        if (refDecl != refInit) {
          Preconditions.checkState(refInit == refSet.get(1));
          startingReadRef = 2;
        }

        if (!refInfo.isWellDefined()) {
          return false;
        }

        Node value = refInit.getAssignedValue();
        Preconditions.checkNotNull(value);

        boolean isImmutableValueWorthInlining =
            NodeUtil.isImmutableValue(value) &&
            (!value.isString() ||
                isStringWorthInlining(v, refInfo.references));
        boolean isInlinableThisAlias =
            value.isThis() &&
            !refInfo.isEscaped();
        if (!isImmutableValueWorthInlining && !isInlinableThisAlias) {
          return false;
        }
      }

      for (int i = startingReadRef; i < refSet.size(); i++) {
        Reference ref = refSet.get(i);
        if (!isValidReference(ref)) {
          return false;
        }
      }

      return true;
    }
  }
}
