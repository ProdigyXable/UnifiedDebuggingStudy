Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Closure-108
01:48:09.072 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/108.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/108.txt
01:52:38.605 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
01:52:38.677 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-108/generalSusInfo.profl
01:52:38.763 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-108/aggregatedSusInfo.profl
01:52:38.769 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
01:52:38.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1561
01:52:40.056 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return false;
return true;
01:52:40.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:41.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:52:41.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:42.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:42.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1560
01:52:42.269 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
if (globalNames != null) {


}

01:52:42.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:43.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (globalNames == null) {
    return true;
}

if (globalNames == null) {
    return false;
}

if (globalNames == null) {
    throw new IllegalArgumentException("Empty variable: " + globalNames);
}

01:52:43.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:44.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:44.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:45.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:45.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:46.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	removeUnreferenced();
referenceAliases();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceAliases();
referenceParentNames();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceParentNames();
calculateReferences();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	calculateReferences();
01:52:46.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:47.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:47.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:48.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:48.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:49.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:49.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:50.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:50.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:51.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:51.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:52.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:52.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:53.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:53.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:54.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
    if (scope.isLocal()) {
      return false;
    }
    
null
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (scope.isLocal()) {
      return false;
    }
    
null

    return false;
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }

MOVE-BUGGY-STATEMENT
01:52:54.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:55.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:55.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:56.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:56.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:57.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:52:57.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:58.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:58.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1557
01:52:58.136 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (name.startsWith(s)) {
        return true;
      }
if (name.startsWith(scope)) {
        return true;
      }
if (name.startsWith(this.compiler)) {
        return true;
      }
if (name.startsWith(this.allNames)) {
        return true;
      }
if (name.startsWith(this.referenceGraph)) {
        return true;
      }
if (name.startsWith(this.scopes)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING_LEN)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUFFIX_LEN)) {
        return true;
      }
if (name.startsWith(WINDOW)) {
        return true;
      }
if (name.startsWith(FUNCTION)) {
        return true;
      }
if (name.startsWith(DEFAULT_GLOBAL_NAMES)) {
        return true;
      }
if (name.startsWith(this.removeUnreferenced)) {
        return true;
      }
if (name.startsWith(this.globalNames)) {
        return true;
      }
if (name.startsWith(this.changeProxy)) {
        return true;
      }
if (name.startsWith(this.externalNames)) {
        return true;
      }
if (name.startsWith(this.refNodes)) {
        return true;
      }
if (name.startsWith(this.aliases)) {
        return true;
      }
if (name.startsWith(NON_LOCAL_RESULT_PREDICATE)) {
        return true;
      }
if (name.startsWith()) {
        return true;
      }
if (name.startsWith(scope, s)) {
        return true;
      }
if (name.startsWith(this.compiler, s)) {
        return true;
      }
if (name.startsWith(this.allNames, s)) {
        return true;
      }
if (name.startsWith(this.referenceGraph, s)) {
        return true;
      }
if (name.startsWith(this.scopes, s)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING, s)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUBSTRING_LEN, s)) {
        return true;
      }
if (name.startsWith(PROTOTYPE_SUFFIX_LEN, s)) {
        return true;
      }
if (name.startsWith(WINDOW, s)) {
        return true;
      }
if (name.startsWith(FUNCTION, s)) {
        return true;
      }
if (name.startsWith(DEFAULT_GLOBAL_NAMES, s)) {
        return true;
      }
if (name.startsWith(this.removeUnreferenced, s)) {
        return true;
      }
if (name.startsWith(this.globalNames, s)) {
        return true;
      }
if (name.startsWith(this.changeProxy, s)) {
        return true;
      }
if (name.startsWith(this.externalNames, s)) {
        return true;
      }
if (name.startsWith(this.refNodes, s)) {
        return true;
      }
if (name.startsWith(this.aliases, s)) {
        return true;
      }
if (name.startsWith(NON_LOCAL_RESULT_PREDICATE, s)) {
        return true;
      }
if (name.startsWith(s, scope)) {
        return true;
      }
if (name.startsWith(s, this.compiler)) {
        return true;
      }
if (name.startsWith(s, this.allNames)) {
        return true;
      }
if (name.startsWith(s, this.referenceGraph)) {
        return true;
      }
if (name.startsWith(s, this.scopes)) {
        return true;
      }
if (name.startsWith(s, PROTOTYPE_SUBSTRING)) {
        return true;
      }
if (name.startsWith(s, PROTOTYPE_SUBSTRING_LEN)) {
        return true;
      }
if (name.startsWith(s, PROTOTYPE_SUFFIX_LEN)) {
        return true;
      }
if (name.startsWith(s, WINDOW)) {
        return true;
      }
if (name.startsWith(s, FUNCTION)) {
        return true;
      }
if (name.startsWith(s, DEFAULT_GLOBAL_NAMES)) {
        return true;
      }
if (name.startsWith(s, this.removeUnreferenced)) {
        return true;
      }
if (name.startsWith(s, this.globalNames)) {
        return true;
      }
if (name.startsWith(s, this.changeProxy)) {
        return true;
      }
if (name.startsWith(s, this.externalNames)) {
        return true;
      }
if (name.startsWith(s, this.refNodes)) {
        return true;
      }
if (name.startsWith(s, this.aliases)) {
        return true;
      }
if (name.startsWith(s, NON_LOCAL_RESULT_PREDICATE)) {
        return true;
      }
01:52:58.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:52:59.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:52:59.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:00.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:00.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:01.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:01.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:02.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:02.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:03.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:03.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:04.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:04.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:04.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:04.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:05.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:05.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:06.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:06.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:07.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:07.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:08.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:08.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:09.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:09.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:10.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:10.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:11.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:11.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:12.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:12.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:13.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:13.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:14.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:14.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:15.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:15.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:16.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:16.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:17.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:17.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:18.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:18.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:19.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:19.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:20.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:20.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:21.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:21.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:22.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:22.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:23.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:23.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:24.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:24.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:25.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:25.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:26.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:26.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:27.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:27.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:28.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:28.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:29.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:29.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:30.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:30.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:31.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:31.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:32.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:32.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:33.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:33.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:34.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:34.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:34.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:34.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:35.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:35.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:36.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:36.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:37.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:37.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:38.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:38.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:39.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:39.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:40.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:40.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:41.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:41.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:42.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:42.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:43.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:43.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:44.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:44.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:45.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:45.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:46.538 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:46.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:47.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:47.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:48.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:48.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:49.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:49.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:50.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:50.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:51.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (name != null && name.startsWith(s)) {
        return true;
      }
if (name != null || name.startsWith(s)) {
        return true;
      }
01:53:51.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:52.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:52.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:53.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (name != null) {


}

if (s != null) {


}

01:53:53.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:54.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:54.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:55.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (name == null) {
    return true;
}

if (name == null) {
    return false;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

if (s == null) {
    return true;
}

if (s == null) {
    return false;
}

if (s == null) {
    throw new IllegalArgumentException("Empty variable: " + s);
}

01:53:55.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:56.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:56.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:57.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:57.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:58.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:58.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:53:59.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:53:59.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:00.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:00.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:01.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:54:01.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:02.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:02.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1556
01:54:02.663 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
if (globalNames != null) {


}

01:54:02.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:03.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (globalNames == null) {
    return true;
}

if (globalNames == null) {
    return false;
}

if (globalNames == null) {
    throw new IllegalArgumentException("Empty variable: " + globalNames);
}

01:54:03.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:04.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:04.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:05.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:05.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:06.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	removeUnreferenced();
referenceAliases();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceAliases();
referenceParentNames();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	referenceParentNames();
calculateReferences();
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	calculateReferences();
01:54:06.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:07.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:07.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:08.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:08.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:09.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:09.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:10.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:10.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:11.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:11.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:12.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:12.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:13.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:13.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:14.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
    if (scope.isLocal()) {
      return false;
    }
    
null
for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (scope.isLocal()) {
      return false;
    }
    
null

    return false;
	for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }

MOVE-BUGGY-STATEMENT
01:54:14.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:15.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:15.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:16.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:16.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:17.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:54:17.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:18.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:18.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1553
01:54:18.484 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (scope.isLocal()) {
      return false;
    }
if (scope.isBottom()) {
      return false;
    }
if (scope.isGlobal()) {
      return false;
    }
01:54:18.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:19.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:19.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:20.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope.isLocal(name)) {
      return false;
    }
if (scope.isLocal(this.compiler)) {
      return false;
    }
if (scope.isLocal(this.allNames)) {
      return false;
    }
if (scope.isLocal(this.referenceGraph)) {
      return false;
    }
if (scope.isLocal(this.scopes)) {
      return false;
    }
if (scope.isLocal(PROTOTYPE_SUBSTRING)) {
      return false;
    }
if (scope.isLocal(PROTOTYPE_SUBSTRING_LEN)) {
      return false;
    }
if (scope.isLocal(PROTOTYPE_SUFFIX_LEN)) {
      return false;
    }
if (scope.isLocal(WINDOW)) {
      return false;
    }
if (scope.isLocal(FUNCTION)) {
      return false;
    }
if (scope.isLocal(DEFAULT_GLOBAL_NAMES)) {
      return false;
    }
if (scope.isLocal(this.removeUnreferenced)) {
      return false;
    }
if (scope.isLocal(this.globalNames)) {
      return false;
    }
if (scope.isLocal(this.changeProxy)) {
      return false;
    }
if (scope.isLocal(this.externalNames)) {
      return false;
    }
if (scope.isLocal(this.refNodes)) {
      return false;
    }
if (scope.isLocal(this.aliases)) {
      return false;
    }
if (scope.isLocal(NON_LOCAL_RESULT_PREDICATE)) {
      return false;
    }
01:54:20.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:21.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:21.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:22.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:22.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:23.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:23.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:24.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:24.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:25.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:25.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:26.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:26.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:27.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:27.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:28.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:28.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:29.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:29.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:30.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:30.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:31.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:31.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:32.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:32.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:33.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:33.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:34.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:34.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:35.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:35.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:35.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:35.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:36.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:36.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:37.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope != null && scope.isLocal()) {
      return false;
    }
if (scope != null || scope.isLocal()) {
      return false;
    }
01:54:37.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:38.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:38.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:39.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope != null) {


}

01:54:39.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:40.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope == null) {
    return true;
}

if (scope == null) {
    return false;
}

if (scope == null) {
    throw new IllegalArgumentException("Empty variable: " + scope);
}

01:54:40.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:41.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:41.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:42.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:42.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:43.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope.isLocal()) {
      return false;
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
    
null

    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (scope.isLocal()) {
      return false;
    }

MOVE-BUGGY-STATEMENT

    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
    return false;
	if (scope.isLocal()) {
      return false;
    }

MOVE-BUGGY-STATEMENT
01:54:43.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:44.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:44.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:45.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:45.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:46.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:54:46.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:47.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:47.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1550
01:54:47.962 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(scope)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.compiler)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.allNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.referenceGraph)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.scopes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUFFIX_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(WINDOW)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(FUNCTION)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(DEFAULT_GLOBAL_NAMES)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.removeUnreferenced)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.globalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.changeProxy)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.externalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.refNodes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.aliases)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(NON_LOCAL_RESULT_PREDICATE)) {
      return true;
    }
if (compiler.getCodingConvention().isExported()) {
      return true;
    }
if (compiler.getCodingConvention().isExported(scope, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.compiler, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.allNames, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.referenceGraph, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.scopes, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUBSTRING_LEN, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(PROTOTYPE_SUFFIX_LEN, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(WINDOW, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(FUNCTION, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(DEFAULT_GLOBAL_NAMES, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.removeUnreferenced, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.globalNames, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.changeProxy, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.externalNames, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.refNodes, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(this.aliases, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(NON_LOCAL_RESULT_PREDICATE, name)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, scope)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.compiler)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.allNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.referenceGraph)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.scopes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, PROTOTYPE_SUBSTRING)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, PROTOTYPE_SUBSTRING_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, PROTOTYPE_SUFFIX_LEN)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, WINDOW)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, FUNCTION)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, DEFAULT_GLOBAL_NAMES)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.removeUnreferenced)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.globalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.changeProxy)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.externalNames)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.refNodes)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, this.aliases)) {
      return true;
    }
if (compiler.getCodingConvention().isExported(name, NON_LOCAL_RESULT_PREDICATE)) {
      return true;
    }
01:54:47.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:48.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:48.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:49.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:49.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:50.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:50.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:51.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:51.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:52.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:52.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:54.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:54.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:55.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:55.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:56.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:56.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:57.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:57.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:58.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:58.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:54:59.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:54:59.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:00.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:00.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:00.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:00.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:01.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:01.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:02.939 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:02.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:03.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:03.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:04.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:04.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:05.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:05.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:06.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:06.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:07.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:07.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:08.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:08.868 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:09.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:09.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:10.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:10.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:11.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:11.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:12.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:12.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:13.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:13.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:14.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:14.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:15.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:15.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:16.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:16.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:17.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:17.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:18.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:18.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:19.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:19.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:20.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:20.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:21.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:21.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:22.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:22.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:23.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:23.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:24.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:24.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:25.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:25.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:26.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:26.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:27.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:27.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:28.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:28.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:29.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:29.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:30.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:30.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:31.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:31.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:32.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:32.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:33.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:33.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:34.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:34.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:35.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:35.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:36.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:36.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:37.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:37.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:38.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:38.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:39.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:39.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:40.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:40.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:41.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:41.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:42.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (compiler != null && compiler.getCodingConvention().isExported(name)) {
      return true;
    }
if (compiler != null || compiler.getCodingConvention().isExported(name)) {
      return true;
    }
01:55:42.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:43.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:43.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:44.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (compiler != null) {


}

if (name != null) {


}

01:55:44.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:45.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:45.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:46.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (compiler == null) {
    return true;
}

if (compiler == null) {
    return false;
}

if (compiler == null) {
    throw new IllegalArgumentException("Empty variable: " + compiler);
}

if (name == null) {
    return true;
}

if (name == null) {
    return false;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

01:55:46.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:47.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:47.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:48.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:48.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:49.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:49.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:50.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:50.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:51.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:51.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:52.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

    if (scope.isLocal()) {
      return false;
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }

MOVE-BUGGY-STATEMENT

    if (scope.isLocal()) {
      return false;
    }
    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }

MOVE-BUGGY-STATEMENT

    if (scope.isLocal()) {
      return false;
    }
    for (String s : globalNames) {
      if (name.startsWith(s)) {
        return true;
      }
    }
    return false;
	if (compiler.getCodingConvention().isExported(name)) {
      return true;
    }

MOVE-BUGGY-STATEMENT
01:55:52.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:53.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:53.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:54.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:54.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:55.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:55:55.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:56.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:56.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1538
01:55:56.471 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return nameInfo;
if (nameInfo != null) {


}

01:55:56.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:57.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (nameInfo == null) {
    return null;
}

if (nameInfo == null) {
    throw new IllegalArgumentException("Empty variable: " + nameInfo);
}

01:55:57.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:58.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:55:58.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:55:59.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	return nameInfo;
return nameInfo;
	removeUnreferenced();
referenceAliases();
	return nameInfo;
return nameInfo;
	referenceAliases();
referenceParentNames();
	return nameInfo;
return nameInfo;
	referenceParentNames();
calculateReferences();
	return nameInfo;
return nameInfo;
	calculateReferences();
01:55:59.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:00.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:00.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:01.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:01.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:02.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:02.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:03.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:03.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:04.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:04.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:05.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:05.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:06.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:06.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:07.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:56:07.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:08.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:08.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1536
01:56:08.434 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
if (scope != null) {


}

if (name != null) {


}

01:56:08.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:09.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:09.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:10.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope == null) {
    return null;
}

if (scope == null) {
    throw new IllegalArgumentException("Empty variable: " + scope);
}

if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

01:56:10.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:11.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:11.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:12.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:12.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:13.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:13.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:14.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	removeUnreferenced();
referenceAliases();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	referenceAliases();
referenceParentNames();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	referenceParentNames();
calculateReferences();
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	calculateReferences();
01:56:14.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:15.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:15.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:16.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:16.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:17.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:17.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:18.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:18.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:19.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:19.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:20.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:20.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:21.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:21.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:22.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    
null
nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	nameInfo.name = name;
    
null

    return nameInfo;
	nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);

MOVE-BUGGY-STATEMENT
01:56:22.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:23.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:23.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:24.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:24.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:25.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:25.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:26.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:26.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:27.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:27.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:28.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:28.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:29.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:29.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:30.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:30.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:31.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:31.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:32.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:56:32.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:33.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:33.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1535
01:56:33.541 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
nameInfo.name = name;
if (name != null) {


}

01:56:33.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:34.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

01:56:34.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:35.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:35.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:36.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	nameInfo.name = name;
nameInfo.name = name;
	removeUnreferenced();
createName(name);
createName(name);
	nameInfo.name = name;
nameInfo.name = name;
	createName(name);
createName(name);
createName(name);
	nameInfo.name = name;
nameInfo.name = name;
	createName(name);
referenceAliases();
	nameInfo.name = name;
nameInfo.name = name;
	referenceAliases();
referenceParentNames();
	nameInfo.name = name;
nameInfo.name = name;
	referenceParentNames();
calculateReferences();
	nameInfo.name = name;
nameInfo.name = name;
	calculateReferences();
01:56:36.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:37.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:37.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:38.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:38.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:39.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:39.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:40.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:40.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:41.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:41.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:42.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:42.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:43.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:43.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:44.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:44.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:45.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:45.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:46.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:46.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:47.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:47.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:48.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:48.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:49.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:49.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:50.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
nameInfo.name = name;
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null
nameInfo.name = name;
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    
null

    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	nameInfo.name = name;

MOVE-BUGGY-STATEMENT

    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
    return nameInfo;
	nameInfo.name = name;

MOVE-BUGGY-STATEMENT
01:56:50.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:51.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:51.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:52.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:52.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:53.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:53.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:54.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:54.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:55.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:55.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:56.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:56.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:57.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:57.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:58.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:58.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:56:59.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:56:59.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:00.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:57:00.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:01.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:01.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1528
01:57:01.211 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx == -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
01:57:01.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:02.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (idx == 0) {
    new IllegalArgumentException("");
}

if (idx != 0) {

    
}

if (idx > 0) {

    
}

01:57:02.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:03.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:03.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:04.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:04.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:05.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	removeUnreferenced();
referenceAliases();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	referenceAliases();
referenceParentNames();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	referenceParentNames();
calculateReferences();
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	calculateReferences();
01:57:05.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:06.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:06.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:07.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:07.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:08.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:08.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:09.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:09.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:10.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:10.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:11.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:11.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:12.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:12.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:13.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	if (!isGlobalRef) {
      return null;
    }

    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null
if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    
null


    nameInfo.name = name;
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

MOVE-BUGGY-STATEMENT


    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

MOVE-BUGGY-STATEMENT


    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
    return nameInfo;
	if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

MOVE-BUGGY-STATEMENT
01:57:13.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:14.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:14.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:15.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:15.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:16.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:16.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:17.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:17.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:18.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:18.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:19.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:19.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:20.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:20.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:21.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:21.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:22.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:22.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:23.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:57:23.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:24.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:24.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1527
01:57:24.168 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
int idx = name.indexOf(PROTOTYPE_SUBSTRING);

double idx = name.indexOf(PROTOTYPE_SUBSTRING);
float idx = name.indexOf(PROTOTYPE_SUBSTRING);
long idx = name.indexOf(PROTOTYPE_SUBSTRING);
short idx = name.indexOf(PROTOTYPE_SUBSTRING);
byte idx = name.indexOf(PROTOTYPE_SUBSTRING);
01:57:24.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:25.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:25.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:26.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:26.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:27.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:27.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:28.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:28.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:29.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
int idx = name.lastIndexOf(PROTOTYPE_SUBSTRING);
01:57:29.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:30.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
int idx = name.indexOf(idx);
int idx = name.indexOf(nameInfo);
int idx = name.indexOf(isGlobalRef);
int idx = name.indexOf(isExtern);
int idx = name.indexOf(v);
int idx = name.indexOf(rootName);
int idx = name.indexOf(scope);
int idx = name.indexOf(rootNameNode);
int idx = name.indexOf(this.compiler);
int idx = name.indexOf(this.allNames);
int idx = name.indexOf(this.referenceGraph);
int idx = name.indexOf(this.scopes);
int idx = name.indexOf(PROTOTYPE_SUBSTRING_LEN);
int idx = name.indexOf(PROTOTYPE_SUFFIX_LEN);
int idx = name.indexOf(WINDOW);
int idx = name.indexOf(FUNCTION);
int idx = name.indexOf(DEFAULT_GLOBAL_NAMES);
int idx = name.indexOf(this.removeUnreferenced);
int idx = name.indexOf(this.globalNames);
int idx = name.indexOf(this.changeProxy);
int idx = name.indexOf(this.externalNames);
int idx = name.indexOf(this.refNodes);
int idx = name.indexOf(this.aliases);
int idx = name.indexOf(NON_LOCAL_RESULT_PREDICATE);
int idx = name.indexOf();
int idx = name.indexOf(idx, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(nameInfo, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(isGlobalRef, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(isExtern, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(v, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(rootName, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(scope, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(rootNameNode, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.compiler, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.allNames, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.referenceGraph, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.scopes, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING_LEN, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUFFIX_LEN, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(WINDOW, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(FUNCTION, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(DEFAULT_GLOBAL_NAMES, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.removeUnreferenced, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.globalNames, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.changeProxy, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.externalNames, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.refNodes, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(this.aliases, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(NON_LOCAL_RESULT_PREDICATE, PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, idx);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, nameInfo);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, isGlobalRef);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, isExtern);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, v);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, rootName);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, scope);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, rootNameNode);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.compiler);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.allNames);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.referenceGraph);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.scopes);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, PROTOTYPE_SUBSTRING_LEN);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, PROTOTYPE_SUFFIX_LEN);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, WINDOW);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, FUNCTION);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, DEFAULT_GLOBAL_NAMES);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.removeUnreferenced);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.globalNames);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.changeProxy);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.externalNames);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.refNodes);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, this.aliases);
int idx = name.indexOf(PROTOTYPE_SUBSTRING, NON_LOCAL_RESULT_PREDICATE);
01:57:30.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:31.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:31.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:32.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:32.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:33.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:33.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:34.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:34.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:35.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:35.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:36.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:36.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:37.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:37.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:38.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:38.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:39.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:39.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:40.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:40.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:41.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:41.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:42.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:42.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:43.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:43.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:44.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:44.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:45.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:45.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:46.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:46.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:47.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:47.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:48.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:48.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:49.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:49.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:50.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:50.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:51.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:51.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:52.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:52.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:53.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:53.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:54.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:54.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:55.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:55.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:56.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:56.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:57.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:57.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:58.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:58.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:57:59.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:57:59.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:00.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:00.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:01.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:01.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:02.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:02.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:03.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:03.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:04.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:04.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:05.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:05.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:06.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:06.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:07.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:07.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:08.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:08.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:09.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:09.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:10.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:10.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:11.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:11.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:12.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:12.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:13.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:13.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:14.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:14.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:15.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:15.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:16.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:16.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:17.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:17.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:18.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:18.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:19.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:19.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:20.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:20.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:21.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:21.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:22.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:22.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:23.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:23.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:24.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:24.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:25.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:25.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:26.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:26.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:27.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:27.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:28.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:28.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:29.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:29.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:30.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:30.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:31.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:31.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:32.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:32.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:33.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:33.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:34.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:34.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:35.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:35.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:36.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:36.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:37.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:37.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:38.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:38.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:39.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:39.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:40.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:40.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:41.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:41.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:42.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:42.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:43.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
int idx = idx.indexOf(PROTOTYPE_SUBSTRING);
int idx = nameInfo.indexOf(PROTOTYPE_SUBSTRING);
int idx = isGlobalRef.indexOf(PROTOTYPE_SUBSTRING);
int idx = isExtern.indexOf(PROTOTYPE_SUBSTRING);
int idx = v.indexOf(PROTOTYPE_SUBSTRING);
int idx = rootName.indexOf(PROTOTYPE_SUBSTRING);
int idx = scope.indexOf(PROTOTYPE_SUBSTRING);
int idx = rootNameNode.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.compiler.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.allNames.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.referenceGraph.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.scopes.indexOf(PROTOTYPE_SUBSTRING);
int idx = PROTOTYPE_SUBSTRING.indexOf(PROTOTYPE_SUBSTRING);
int idx = PROTOTYPE_SUBSTRING_LEN.indexOf(PROTOTYPE_SUBSTRING);
int idx = PROTOTYPE_SUFFIX_LEN.indexOf(PROTOTYPE_SUBSTRING);
int idx = WINDOW.indexOf(PROTOTYPE_SUBSTRING);
int idx = FUNCTION.indexOf(PROTOTYPE_SUBSTRING);
int idx = DEFAULT_GLOBAL_NAMES.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.removeUnreferenced.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.globalNames.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.changeProxy.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.externalNames.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.refNodes.indexOf(PROTOTYPE_SUBSTRING);
int idx = this.aliases.indexOf(PROTOTYPE_SUBSTRING);
int idx = NON_LOCAL_RESULT_PREDICATE.indexOf(PROTOTYPE_SUBSTRING);
01:58:43.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:44.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:44.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:45.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:45.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:46.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:46.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:47.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:47.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:48.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:48.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:49.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:49.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:50.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:50.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:51.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:51.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:52.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:52.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:53.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:53.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:54.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:54.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:55.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:55.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:56.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:56.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:57.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:57.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:58.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:58.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:58:59.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:58:59.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:00.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:00.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:01.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:01.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:02.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:02.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:03.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:03.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:04.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:04.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:05.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:05.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:06.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:06.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:07.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:07.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:08.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (name != null) {


}

if (PROTOTYPE_SUBSTRING != null) {


}

01:59:08.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:09.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:09.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:10.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

if (PROTOTYPE_SUBSTRING == null) {
    return null;
}

if (PROTOTYPE_SUBSTRING == null) {
    throw new IllegalArgumentException("Empty variable: " + PROTOTYPE_SUBSTRING);
}

01:59:10.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:11.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:11.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:12.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:12.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:13.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:13.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:14.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	removeUnreferenced();
referenceAliases();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	referenceAliases();
referenceParentNames();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	referenceParentNames();
calculateReferences();
	int idx = name.indexOf(PROTOTYPE_SUBSTRING);
int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	calculateReferences();
01:59:14.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:15.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:15.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:16.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:16.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:17.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:17.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:18.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:18.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:19.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:19.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:20.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:20.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:21.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:21.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:23.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:59:23.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:24.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:24.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1524
01:59:24.113 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
NameInformation nameInfo = new NameInformation();
removeUnreferenced();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	removeUnreferenced();
referenceAliases();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	referenceAliases();
referenceParentNames();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	referenceParentNames();
calculateReferences();
	NameInformation nameInfo = new NameInformation();
NameInformation nameInfo = new NameInformation();
	calculateReferences();
01:59:24.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:25.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:25.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:26.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:26.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:27.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:27.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:28.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:28.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:29.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:29.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:30.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:30.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:31.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:31.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:32.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:59:32.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:33.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:33.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1520
01:59:33.399 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!isGlobalRef) {
      return null;
    }
if (!isExtern) {
      return null;
    }
01:59:33.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:34.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	removeUnreferenced();
referenceAliases();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	referenceAliases();
referenceParentNames();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	referenceParentNames();
calculateReferences();
	if (!isGlobalRef) {
      return null;
    }
if (!isGlobalRef) {
      return null;
    }
	calculateReferences();
01:59:34.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:35.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:35.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:36.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:36.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:37.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:37.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:38.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:38.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:39.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:39.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:40.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:40.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:41.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:41.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:42.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (!isGlobalRef) {
      return null;
    }
	String rootName = rootNameNode.getString();
    Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null
if (!isGlobalRef) {
      return null;
    }
	Var v = scope.getVar(rootName);
    boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null
if (!isGlobalRef) {
      return null;
    }
	boolean isExtern = (v == null && externalNames.contains(rootName));
    boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null
if (!isGlobalRef) {
      return null;
    }
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
    
null


    NameInformation nameInfo = new NameInformation();
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT


    NameInformation nameInfo = new NameInformation();

    // If a prototype property or method, fill in prototype information.
    int idx = name.indexOf(PROTOTYPE_SUBSTRING);
    if (idx != -1) {
      nameInfo.isPrototype = true;
      nameInfo.prototypeClass = name.substring(0, idx);
      nameInfo.prototypeProperty = name.substring(
          idx + PROTOTYPE_SUBSTRING_LEN);
    }

    nameInfo.name = name;
    nameInfo.isExternallyReferenceable =
        isExtern || isExternallyReferenceable(scope, name);
    return nameInfo;
	if (!isGlobalRef) {
      return null;
    }

MOVE-BUGGY-STATEMENT
01:59:42.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:43.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:43.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:44.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:44.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:45.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:45.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:46.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:46.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:47.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:47.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:48.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:48.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:49.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:49.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:50.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:50.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:51.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:51.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:52.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

01:59:52.207 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:53.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:53.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1518
01:59:53.257 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
if (v != null) {


}

if (v != null) {


}

if (rootName != null) {


}

if (WINDOW != null) {


}

01:59:53.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:54.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:54.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:55.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:55.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:56.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:56.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:57.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (v == null) {
    return null;
}

if (v == null) {
    throw new IllegalArgumentException("Empty variable: " + v);
}

if (v == null) {
    return null;
}

if (v == null) {
    throw new IllegalArgumentException("Empty variable: " + v);
}

if (rootName == null) {
    return null;
}

if (rootName == null) {
    throw new IllegalArgumentException("Empty variable: " + rootName);
}

if (WINDOW == null) {
    return null;
}

if (WINDOW == null) {
    throw new IllegalArgumentException("Empty variable: " + WINDOW);
}

01:59:57.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:58.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:58.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
01:59:59.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
01:59:59.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:00.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:00.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:01.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:01.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:02.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:02.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:03.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:03.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:04.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:04.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:05.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	removeUnreferenced();
referenceAliases();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	referenceAliases();
referenceParentNames();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	referenceParentNames();
calculateReferences();
	boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||
        rootName.equals(WINDOW);
	calculateReferences();
02:00:05.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:06.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:06.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:07.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:07.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:08.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:08.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:09.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:09.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:10.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:10.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:10.982 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:10.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:11.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:11.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:12.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:00:12.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:13.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:13.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1517
02:00:13.964 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean isExtern = (v == null && externalNames.contains(rootName));
if (v != null) {


}

if (externalNames != null) {


}

if (rootName != null) {


}

02:00:13.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:14.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:14.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:15.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:15.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:16.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (v == null) {
    return null;
}

if (v == null) {
    throw new IllegalArgumentException("Empty variable: " + v);
}

if (externalNames == null) {
    return null;
}

if (externalNames == null) {
    throw new IllegalArgumentException("Empty variable: " + externalNames);
}

if (rootName == null) {
    return null;
}

if (rootName == null) {
    throw new IllegalArgumentException("Empty variable: " + rootName);
}

02:00:16.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:17.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:17.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:18.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:18.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:19.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:19.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:20.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:20.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:21.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:21.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:22.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	removeUnreferenced();
referenceAliases();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	referenceAliases();
referenceParentNames();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	referenceParentNames();
calculateReferences();
	boolean isExtern = (v == null && externalNames.contains(rootName));
boolean isExtern = (v == null && externalNames.contains(rootName));
	calculateReferences();
02:00:22.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:23.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:23.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:24.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:24.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:25.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:25.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:26.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:26.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:27.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:27.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:28.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:28.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:29.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:29.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:30.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:00:30.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:31.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:31.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1516
02:00:31.539 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Var v = scope.getVar(rootName);
Var v = scope.getSlot(rootName);
Var v = scope.getOwnSlot(rootName);
02:00:31.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:32.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:32.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:33.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
Var v = scope.getVar(v);
Var v = scope.getVar(name);
Var v = scope.getVar(rootNameNode);
Var v = scope.getVar(this.compiler);
Var v = scope.getVar(this.allNames);
Var v = scope.getVar(this.referenceGraph);
Var v = scope.getVar(this.scopes);
Var v = scope.getVar(PROTOTYPE_SUBSTRING);
Var v = scope.getVar(PROTOTYPE_SUBSTRING_LEN);
Var v = scope.getVar(PROTOTYPE_SUFFIX_LEN);
Var v = scope.getVar(WINDOW);
Var v = scope.getVar(FUNCTION);
Var v = scope.getVar(DEFAULT_GLOBAL_NAMES);
Var v = scope.getVar(this.removeUnreferenced);
Var v = scope.getVar(this.globalNames);
Var v = scope.getVar(this.changeProxy);
Var v = scope.getVar(this.externalNames);
Var v = scope.getVar(this.refNodes);
Var v = scope.getVar(this.aliases);
Var v = scope.getVar(NON_LOCAL_RESULT_PREDICATE);
Var v = scope.getVar();
Var v = scope.getVar(v, rootName);
Var v = scope.getVar(name, rootName);
Var v = scope.getVar(rootNameNode, rootName);
Var v = scope.getVar(this.compiler, rootName);
Var v = scope.getVar(this.allNames, rootName);
Var v = scope.getVar(this.referenceGraph, rootName);
Var v = scope.getVar(this.scopes, rootName);
Var v = scope.getVar(PROTOTYPE_SUBSTRING, rootName);
Var v = scope.getVar(PROTOTYPE_SUBSTRING_LEN, rootName);
Var v = scope.getVar(PROTOTYPE_SUFFIX_LEN, rootName);
Var v = scope.getVar(WINDOW, rootName);
Var v = scope.getVar(FUNCTION, rootName);
Var v = scope.getVar(DEFAULT_GLOBAL_NAMES, rootName);
Var v = scope.getVar(this.removeUnreferenced, rootName);
Var v = scope.getVar(this.globalNames, rootName);
Var v = scope.getVar(this.changeProxy, rootName);
Var v = scope.getVar(this.externalNames, rootName);
Var v = scope.getVar(this.refNodes, rootName);
Var v = scope.getVar(this.aliases, rootName);
Var v = scope.getVar(NON_LOCAL_RESULT_PREDICATE, rootName);
Var v = scope.getVar(rootName, v);
Var v = scope.getVar(rootName, name);
Var v = scope.getVar(rootName, rootNameNode);
Var v = scope.getVar(rootName, this.compiler);
Var v = scope.getVar(rootName, this.allNames);
Var v = scope.getVar(rootName, this.referenceGraph);
Var v = scope.getVar(rootName, this.scopes);
Var v = scope.getVar(rootName, PROTOTYPE_SUBSTRING);
Var v = scope.getVar(rootName, PROTOTYPE_SUBSTRING_LEN);
Var v = scope.getVar(rootName, PROTOTYPE_SUFFIX_LEN);
Var v = scope.getVar(rootName, WINDOW);
Var v = scope.getVar(rootName, FUNCTION);
Var v = scope.getVar(rootName, DEFAULT_GLOBAL_NAMES);
Var v = scope.getVar(rootName, this.removeUnreferenced);
Var v = scope.getVar(rootName, this.globalNames);
Var v = scope.getVar(rootName, this.changeProxy);
Var v = scope.getVar(rootName, this.externalNames);
Var v = scope.getVar(rootName, this.refNodes);
Var v = scope.getVar(rootName, this.aliases);
Var v = scope.getVar(rootName, NON_LOCAL_RESULT_PREDICATE);
02:00:33.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:34.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:34.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:35.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:35.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:36.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:36.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:37.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:37.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:38.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:38.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:39.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:39.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:40.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:40.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:41.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:41.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:42.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:42.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:43.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:43.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:44.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:44.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:45.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:45.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:46.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:46.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:47.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:47.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:48.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:48.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:49.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:49.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:50.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:50.326 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:51.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:51.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:52.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:52.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:53.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:53.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:54.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:54.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:55.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:55.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:56.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:56.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:57.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:57.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:58.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:58.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:00:59.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:00:59.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:00.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:00.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:01.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:01.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:02.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:02.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:03.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:03.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:04.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:04.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:05.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:05.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:06.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:06.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:07.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:07.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:08.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:08.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:09.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:09.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:10.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:10.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:11.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:11.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:12.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:12.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:13.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:13.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:14.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:14.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:15.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:15.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:16.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:16.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:17.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:17.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:18.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:18.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:19.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:19.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:20.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:20.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:21.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:21.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:22.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:22.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:23.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:23.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:24.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:24.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:25.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:25.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:26.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:26.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:27.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:27.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:28.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:28.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:29.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:29.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:30.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:30.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:31.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:31.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:32.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:32.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:33.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:33.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:34.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
Var v = v.getVar(rootName);
Var v = rootName.getVar(rootName);
Var v = name.getVar(rootName);
Var v = rootNameNode.getVar(rootName);
Var v = this.compiler.getVar(rootName);
Var v = this.allNames.getVar(rootName);
Var v = this.referenceGraph.getVar(rootName);
Var v = this.scopes.getVar(rootName);
Var v = PROTOTYPE_SUBSTRING.getVar(rootName);
Var v = PROTOTYPE_SUBSTRING_LEN.getVar(rootName);
Var v = PROTOTYPE_SUFFIX_LEN.getVar(rootName);
Var v = WINDOW.getVar(rootName);
Var v = FUNCTION.getVar(rootName);
Var v = DEFAULT_GLOBAL_NAMES.getVar(rootName);
Var v = this.removeUnreferenced.getVar(rootName);
Var v = this.globalNames.getVar(rootName);
Var v = this.changeProxy.getVar(rootName);
Var v = this.externalNames.getVar(rootName);
Var v = this.refNodes.getVar(rootName);
Var v = this.aliases.getVar(rootName);
Var v = NON_LOCAL_RESULT_PREDICATE.getVar(rootName);
02:01:34.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:35.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:35.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:36.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:36.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:37.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:37.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:38.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:38.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:39.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:39.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:40.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:40.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:41.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:41.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:42.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:42.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:43.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:43.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:44.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:44.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:45.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:45.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:45.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:45.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:46.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:46.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:47.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:47.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:48.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:48.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:49.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:49.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:50.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:50.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:51.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:51.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:52.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:52.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:53.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:53.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:54.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope != null) {


}

if (rootName != null) {


}

02:01:54.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:55.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:55.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:56.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (scope == null) {
    return null;
}

if (scope == null) {
    throw new IllegalArgumentException("Empty variable: " + scope);
}

if (rootName == null) {
    return null;
}

if (rootName == null) {
    throw new IllegalArgumentException("Empty variable: " + rootName);
}

02:01:56.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:57.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:57.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:58.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:58.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:01:59.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:01:59.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:00.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	removeUnreferenced();
referenceAliases();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	referenceAliases();
referenceParentNames();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	referenceParentNames();
calculateReferences();
	Var v = scope.getVar(rootName);
Var v = scope.getVar(rootName);
	calculateReferences();
02:02:00.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:01.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:01.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:03.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:03.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:04.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:04.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:05.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:05.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:06.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:06.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:07.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:07.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:08.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:08.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:09.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:02:09.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:10.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:10.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1515
02:02:10.159 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
String rootName = rootNameNode.getString();
String rootName = rootNameNode.toString();
String rootName = rootNameNode.toStringTree();
String rootName = rootNameNode.toStringTreeImpl();
String rootName = rootNameNode.getSourceFileName();
String rootName = rootNameNode.getQualifiedName();
02:02:10.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:11.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:11.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:12.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:12.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:13.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:13.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:14.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:14.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:15.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
String rootName = rootNameNode.getString(rootName);
String rootName = rootNameNode.getString(name);
String rootName = rootNameNode.getString(scope);
String rootName = rootNameNode.getString(this.compiler);
String rootName = rootNameNode.getString(this.allNames);
String rootName = rootNameNode.getString(this.referenceGraph);
String rootName = rootNameNode.getString(this.scopes);
String rootName = rootNameNode.getString(PROTOTYPE_SUBSTRING);
String rootName = rootNameNode.getString(PROTOTYPE_SUBSTRING_LEN);
String rootName = rootNameNode.getString(PROTOTYPE_SUFFIX_LEN);
String rootName = rootNameNode.getString(WINDOW);
String rootName = rootNameNode.getString(FUNCTION);
String rootName = rootNameNode.getString(DEFAULT_GLOBAL_NAMES);
String rootName = rootNameNode.getString(this.removeUnreferenced);
String rootName = rootNameNode.getString(this.globalNames);
String rootName = rootNameNode.getString(this.changeProxy);
String rootName = rootNameNode.getString(this.externalNames);
String rootName = rootNameNode.getString(this.refNodes);
String rootName = rootNameNode.getString(this.aliases);
String rootName = rootNameNode.getString(NON_LOCAL_RESULT_PREDICATE);
02:02:15.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:16.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:16.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:17.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:17.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:18.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:18.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:19.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:19.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:20.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:20.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:21.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:21.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:22.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:22.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:23.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:23.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:24.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:24.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:25.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:25.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:26.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:26.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:27.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:27.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:28.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:28.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:29.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:29.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:30.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:30.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:31.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:31.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:32.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:32.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:33.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:33.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:34.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:34.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:35.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
String rootName = rootName.getString();
String rootName = name.getString();
String rootName = scope.getString();
String rootName = this.compiler.getString();
String rootName = this.allNames.getString();
String rootName = this.referenceGraph.getString();
String rootName = this.scopes.getString();
String rootName = PROTOTYPE_SUBSTRING.getString();
String rootName = PROTOTYPE_SUBSTRING_LEN.getString();
String rootName = PROTOTYPE_SUFFIX_LEN.getString();
String rootName = WINDOW.getString();
String rootName = FUNCTION.getString();
String rootName = DEFAULT_GLOBAL_NAMES.getString();
String rootName = this.removeUnreferenced.getString();
String rootName = this.globalNames.getString();
String rootName = this.changeProxy.getString();
String rootName = this.externalNames.getString();
String rootName = this.refNodes.getString();
String rootName = this.aliases.getString();
String rootName = NON_LOCAL_RESULT_PREDICATE.getString();
02:02:35.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:36.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:36.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:37.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:37.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:38.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:38.414 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:39.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:39.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:40.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:40.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:41.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:41.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:42.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:42.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:43.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:43.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:44.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:44.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:45.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:45.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:46.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:46.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:47.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:47.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:48.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:48.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:49.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:49.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:50.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:50.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:51.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:51.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:52.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:52.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:53.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:53.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:54.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:54.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:55.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode != null) {


}

02:02:55.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:56.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:02:56.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:57.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:57.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:58.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	removeUnreferenced();
createName(rootName);
createName(rootName);
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	createName(rootName);
referenceAliases();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	referenceAliases();
referenceParentNames();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	referenceParentNames();
calculateReferences();
	String rootName = rootNameNode.getString();
String rootName = rootNameNode.getString();
	calculateReferences();
02:02:58.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:02:59.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:02:59.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:00.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:00.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:01.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:01.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:01.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:01.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:02.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:02.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:03.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:03.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:04.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:04.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:05.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:05.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:06.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:06.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:07.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:07.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:08.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:03:08.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:09.854 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:09.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1483
02:03:09.994 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            bNameWasShortened, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            name, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            parent, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            t, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            n, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.compiler, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.allNames, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.referenceGraph, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.scopes, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            PROTOTYPE_SUBSTRING, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            PROTOTYPE_SUBSTRING_LEN, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            PROTOTYPE_SUFFIX_LEN, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            WINDOW, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            FUNCTION, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            DEFAULT_GLOBAL_NAMES, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.removeUnreferenced, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.globalNames, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.changeProxy, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.externalNames, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.refNodes, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            this.aliases, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            NON_LOCAL_RESULT_PREDICATE, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, bNameWasShortened, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, name, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, parent, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, n, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.compiler, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.allNames, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.referenceGraph, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.scopes, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, PROTOTYPE_SUBSTRING, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, PROTOTYPE_SUBSTRING_LEN, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, PROTOTYPE_SUFFIX_LEN, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, WINDOW, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, FUNCTION, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, DEFAULT_GLOBAL_NAMES, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.removeUnreferenced, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.globalNames, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.changeProxy, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.externalNames, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.refNodes, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, this.aliases, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, NON_LOCAL_RESULT_PREDICATE, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), bNameWasShortened);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), name);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), parent);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), t);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), n);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.compiler);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.allNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.referenceGraph);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.scopes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUFFIX_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), WINDOW);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), FUNCTION);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), DEFAULT_GLOBAL_NAMES);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.removeUnreferenced);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.globalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.changeProxy);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.externalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.refNodes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.aliases);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), NON_LOCAL_RESULT_PREDICATE);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), );
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), bNameWasShortened, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), name, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), parent, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), t, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), n, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.compiler, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.allNames, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.referenceGraph, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.scopes, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUBSTRING_LEN, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), PROTOTYPE_SUFFIX_LEN, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), WINDOW, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), FUNCTION, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), DEFAULT_GLOBAL_NAMES, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.removeUnreferenced, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.globalNames, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.changeProxy, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.externalNames, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.refNodes, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), this.aliases, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), NON_LOCAL_RESULT_PREDICATE, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, bNameWasShortened);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, name);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, parent);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, t);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, n);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.compiler);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.allNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.referenceGraph);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.scopes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, PROTOTYPE_SUBSTRING);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, PROTOTYPE_SUBSTRING_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, PROTOTYPE_SUFFIX_LEN);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, WINDOW);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, FUNCTION);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, DEFAULT_GLOBAL_NAMES);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.removeUnreferenced);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.globalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.changeProxy);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.externalNames);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.refNodes);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, this.aliases);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, NON_LOCAL_RESULT_PREDICATE);
02:03:09.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:10.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:10.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:11.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:11.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:12.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:12.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:13.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:13.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:15.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:15.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:16.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:16.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:17.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:17.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:18.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:18.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:19.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:19.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:20.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:20.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:21.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:21.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:22.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:22.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:23.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:23.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:24.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:24.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:25.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:25.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:26.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:26.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:27.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:27.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:28.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:28.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:29.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:29.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:30.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:30.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:31.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:31.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:32.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:32.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:33.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:33.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:34.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:34.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:35.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:35.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:36.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:36.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:37.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:37.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:38.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:38.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:39.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:39.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:40.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:40.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:41.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:41.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:42.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:42.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:43.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:43.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:44.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:44.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:45.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:45.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:46.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:46.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:47.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:47.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:48.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:48.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:49.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:49.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:50.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:50.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:51.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:51.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:52.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:52.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:53.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:53.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:54.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:54.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:55.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:55.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:56.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:56.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:57.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:57.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:58.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:58.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:03:59.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:03:59.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:00.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:00.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:01.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:01.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:02.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:02.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:03.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:03.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:04.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:04.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:05.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:05.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:06.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:06.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:07.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:07.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:08.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:08.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:09.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:09.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:10.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:10.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:11.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:11.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:12.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:12.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:13.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:13.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:14.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:14.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:15.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:15.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:16.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:16.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:16.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:16.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:17.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:17.956 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:18.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:18.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:20.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:20.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:21.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:21.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:22.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:22.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:23.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:23.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:24.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:24.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:25.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:25.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:26.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:26.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:27.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:27.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:28.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:28.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:29.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:29.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:30.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:30.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:31.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:31.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:32.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:32.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:33.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:33.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:34.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:34.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:35.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:35.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:36.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:36.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:37.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:37.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:38.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:38.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:39.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:39.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:40.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:40.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:41.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:41.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:42.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:42.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:43.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:43.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:44.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:44.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:45.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:45.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:46.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:46.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:47.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:47.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:48.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:48.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:49.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:49.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:50.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:50.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:51.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:51.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:52.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:52.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:53.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:53.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:54.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:54.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:55.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:55.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:56.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:56.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:57.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:57.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:58.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:58.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:04:59.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:04:59.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:00.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:00.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:01.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
return getHtmlReport();
02:05:01.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:02.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
return createNameInformation(
            true, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            false, rootNameNode.getString() + name, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, true, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, false, t.getScope(), rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), true, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), false, rootNameNode);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, true);
return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode, false);
02:05:02.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:03.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:03.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:04.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:04.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:05.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:05.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:06.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:06.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:07.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:07.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:08.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:08.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:09.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:09.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:10.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode != null) {


}

if (name != null) {


}

if (t != null) {


}

if (rootNameNode != null) {


}

02:05:10.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:11.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:11.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:12.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:12.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:12.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:12.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:13.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

if (name == null) {
    return null;
}

if (name == null) {
    throw new IllegalArgumentException("Empty variable: " + name);
}

if (t == null) {
    return null;
}

if (t == null) {
    throw new IllegalArgumentException("Empty variable: " + t);
}

if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:05:13.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:14.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:14.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:15.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:15.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:16.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:16.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:17.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:17.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:18.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:18.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:19.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:19.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:20.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:20.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:21.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:05:21.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:22.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:22.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1469
02:05:22.834 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened || n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
02:05:22.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:23.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (parent != null) {


}

if (n != null) {


}

02:05:23.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:24.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:24.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:25.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:25.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:26.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:05:26.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:27.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:27.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:28.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:28.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:29.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:29.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:30.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:30.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:31.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:31.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:32.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	removeUnreferenced();
referenceAliases();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	referenceAliases();
referenceParentNames();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	referenceParentNames();
calculateReferences();
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
	calculateReferences();
02:05:32.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:33.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:33.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:34.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:34.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:35.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:35.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:36.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:36.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:37.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:37.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:38.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:38.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:39.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:39.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:40.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
	if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }

MOVE-BUGGY-STATEMENT
02:05:40.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:41.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:05:41.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:42.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:42.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1465
02:05:42.891 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
if (rootNameNode != null) {


}

02:05:42.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:43.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:05:43.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:44.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:44.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:45.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	Node parent = n.getParent();
    // Build the full name and find its root node by iterating down through all
    // GETPROP/GETELEM nodes.
    String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

    
null
02:05:45.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:46.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:46.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:47.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:47.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:48.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:48.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:49.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:49.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:50.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:50.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:51.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:05:51.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:52.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:52.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1444
02:05:52.972 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
if (parent.isCall() || t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
02:05:52.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:53.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

if (t != null) {


}

02:05:53.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:55.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:55.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:56.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (t == null) {
    return null;
}

if (t == null) {
    throw new IllegalArgumentException("Empty variable: " + t);
}

02:05:56.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:57.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:57.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:58.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:58.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:05:59.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:05:59.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:00.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	Node parent = n.getParent();
    // Build the full name and find its root node by iterating down through all
    // GETPROP/GETELEM nodes.
    String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	String name = "";
    Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	Node rootNameNode = n;
    boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	boolean bNameWasShortened = false;
    while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null
if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }
	while (true) {
      if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
    }

    // Check whether this is a class-defining call. Classes may only be defined
    // in the global scope.
    
null


    switch (rootNameNode.getType()) {
      case Token.NAME:
        // Check whether this is an assignment to a prototype property
        // of an object defined in the global scope.
        if (!bNameWasShortened &&
            n.isGetProp() &&
            parent.isAssign() &&
            "prototype".equals(n.getLastChild().getString())) {
          if (createNameInformation(t, n.getFirstChild()) != null) {
            name = rootNameNode.getString() + name;
            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);
            NameInformation nameInfo = new NameInformation();
            nameInfo.name = name;
            return nameInfo;
          } else {
            return null;
          }
        }
        return createNameInformation(
            rootNameNode.getString() + name, t.getScope(), rootNameNode);
      case Token.THIS:
        if (t.inGlobalScope()) {
          NameInformation nameInfo = new NameInformation();
          if (name.indexOf('.') == 0) {
            nameInfo.name = name.substring(1);  // strip leading "."
          } else {
            nameInfo.name = name;
          }
          nameInfo.isExternallyReferenceable = true;
          return nameInfo;
        }
        return null;
      default:
        return null;
    }
	if (parent.isCall() && t.inGlobalScope()) {
      CodingConvention convention = compiler.getCodingConvention();
      SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
      if (classes != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = classes.subclassName;
        nameInfo.onlyAffectsClassDef = true;
        nameInfo.superclass = classes.superclassName;
        return nameInfo;
      }

      String singletonGetterClass =
          convention.getSingletonGetterClassName(parent);
      if (singletonGetterClass != null) {
        NameInformation nameInfo = new NameInformation();
        nameInfo.name = singletonGetterClass;
        nameInfo.onlyAffectsClassDef = true;
        return nameInfo;
      }
    }

MOVE-BUGGY-STATEMENT
02:06:00.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:01.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:01.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:02.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:02.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:03.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:03.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:04.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:04.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:05.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:05.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:06.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:06:06.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:07.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:07.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1409
02:06:07.109 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isImmutableValue(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isSymmetricOperation(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isRelationalOperation(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isEmptyBlock(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isSimpleOperator(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNamespaceDecl(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isEmptyObjectLit(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayEffectMutableState(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayHaveSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.constructorCallHasSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.functionCallHasSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.callHasLocalResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.newHasLocalResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.nodeTypeMayHaveSideEffects(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.allArgsUnescapedLocal(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.canBeSideEffected(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isUndefined(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNullOrUndefined(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isImmutableResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNumericResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNumericResultHelper(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isBooleanResult(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isBooleanResultHelper(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayBeString(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.mayBeStringHelper(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isAssignmentOp(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.containsFunction(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.referencesThis(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isVarDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExprAssign(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExprCall(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isForIn(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isLoopStructure(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isWithinLoop(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isControlStructure(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isStatementBlock(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isStatement(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isStatementParent(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isSwitchCase(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isReferenceName(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isTryCatchNodeContainer(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.tryMergeBlock(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isCallOrNew(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isHoistedFunctionDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionExpression(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isBleedingFunctionName(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isEmptyFunctionExpression(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isVarArgsFunction(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionObjectCall(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isFunctionObjectApply(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isLValue(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isObjectLitKey(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGetOrSetKey(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isPrototypePropertyDeclaration(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isPrototypeProperty(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.hasFinally(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.hasCatchHandler(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isConstantName(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.evaluatesToLocalValue(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isCallOrNewTarget(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isToStringMethodCall(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExpressionResultUsed(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isExecutedExactlyOnce(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isNaN(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
02:06:07.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:08.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:08.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:09.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:09.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:10.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:10.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:11.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:11.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:12.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:12.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:13.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:13.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:14.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:14.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:15.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:15.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:16.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:16.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:17.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:17.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:18.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:18.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:19.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:19.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:20.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:20.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:21.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:21.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:22.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:22.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:23.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:23.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:24.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:24.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:25.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:25.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:26.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:26.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:27.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:27.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:28.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:28.653 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:29.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:29.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:30.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:30.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:31.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:31.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:32.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:32.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:33.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:33.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:34.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:34.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:35.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:35.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:36.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:36.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:37.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:37.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:38.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:38.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:39.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:39.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:40.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:40.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:41.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:41.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:42.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:42.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:43.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:43.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:44.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:44.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:45.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:45.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:46.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:46.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:47.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:47.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:48.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:48.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:49.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:49.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:50.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:50.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:51.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:51.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:52.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:52.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:53.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:53.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:54.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:54.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:55.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:55.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:56.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:56.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:57.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:57.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:58.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:58.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:06:59.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:06:59.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:00.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:00.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:01.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:01.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:02.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:02.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:03.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:03.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:04.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:04.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:05.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:05.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:06.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:06.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:07.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:07.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:08.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:08.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:09.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:09.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:10.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:10.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:11.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:11.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:12.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil.isGet(bNameWasShortened)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(name)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(parent)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(t)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(n)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.compiler)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.allNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.referenceGraph)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.scopes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUFFIX_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(WINDOW)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(FUNCTION)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(DEFAULT_GLOBAL_NAMES)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.removeUnreferenced)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.globalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.changeProxy)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.externalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.refNodes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.aliases)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(NON_LOCAL_RESULT_PREDICATE)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet()) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(bNameWasShortened, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(name, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(parent, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(t, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(n, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.compiler, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.allNames, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.referenceGraph, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.scopes, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUBSTRING_LEN, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(PROTOTYPE_SUFFIX_LEN, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(WINDOW, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(FUNCTION, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(DEFAULT_GLOBAL_NAMES, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.removeUnreferenced, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.globalNames, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.changeProxy, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.externalNames, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.refNodes, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(this.aliases, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(NON_LOCAL_RESULT_PREDICATE, rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, bNameWasShortened)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, name)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, parent)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, t)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, n)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.compiler)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.allNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.referenceGraph)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.scopes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, PROTOTYPE_SUBSTRING)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, PROTOTYPE_SUBSTRING_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, PROTOTYPE_SUFFIX_LEN)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, WINDOW)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, FUNCTION)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, DEFAULT_GLOBAL_NAMES)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.removeUnreferenced)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.globalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.changeProxy)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.externalNames)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.refNodes)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, this.aliases)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil.isGet(rootNameNode, NON_LOCAL_RESULT_PREDICATE)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
02:07:12.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:13.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:13.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:14.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:14.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:15.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:15.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:16.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:16.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:17.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:17.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:18.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:18.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:19.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:19.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:20.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:20.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:21.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:21.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:22.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:22.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:23.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:23.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:24.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:24.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:25.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:25.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:27.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:27.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:28.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:28.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:29.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:29.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:30.044 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:30.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:31.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:31.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:32.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:32.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:33.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:33.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:34.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:34.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:35.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:35.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:36.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:36.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:37.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:37.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:38.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:38.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:39.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:39.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:40.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:40.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:41.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:41.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:42.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:42.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:43.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:43.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:44.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:44.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:45.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:45.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:46.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:46.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:47.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:47.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:48.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:48.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:49.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:49.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:50.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:50.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:51.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:51.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:52.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:52.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:53.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:53.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:54.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:54.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:55.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:55.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:56.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:56.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:57.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:57.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:58.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:58.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:07:59.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:07:59.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:00.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:00.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:01.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:01.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:02.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:02.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:03.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:03.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:04.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:04.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:05.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:05.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:06.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:06.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:07.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:07.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:08.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:08.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:09.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:09.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:10.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:10.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:11.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:11.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:12.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:12.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:13.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:13.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:14.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:14.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:15.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:15.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:16.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:16.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:17.351 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:17.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:18.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:18.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:19.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:19.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:20.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil != null && NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
if (NodeUtil != null || NodeUtil.isGet(rootNameNode)) {
        Node prop = rootNameNode.getLastChild();
        if (rootNameNode.isGetProp()) {
          name = "." + prop.getString() + name;
        } else {
          // We consider the name to be "a.b" in a.b['c'] or a.b[x].d.
          bNameWasShortened = true;
          name = "";
        }
        rootNameNode = rootNameNode.getFirstChild();
      } else if (NodeUtil.isObjectLitKey(rootNameNode)) {
        name = "." + rootNameNode.getString() + name;

        // Check if this is an object literal assigned to something.
        Node objLit = rootNameNode.getParent();
        Node objLitParent = objLit.getParent();
        if (objLitParent.isAssign()) {
          // This must be the right side of the assign.
          rootNameNode = objLitParent.getFirstChild();
        } else if (objLitParent.isName()) {
          // This must be a VAR initialization.
          rootNameNode = objLitParent;
        } else if (objLitParent.isStringKey()) {
          // This must be a object literal key initialization.
          rootNameNode = objLitParent;
        } else {
          return null;
        }
      } else {
        break;
      }
02:08:20.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:21.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:21.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:22.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode != null) {


}

02:08:22.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:23.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (rootNameNode == null) {
    return null;
}

if (rootNameNode == null) {
    throw new IllegalArgumentException("Empty variable: " + rootNameNode);
}

02:08:23.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:24.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:24.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:25.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:08:25.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:26.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:26.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1407
02:08:26.582 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
boolean bNameWasShortened = false;
removeUnreferenced();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	removeUnreferenced();
referenceAliases();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	referenceAliases();
referenceParentNames();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	referenceParentNames();
calculateReferences();
	boolean bNameWasShortened = false;
boolean bNameWasShortened = false;
	calculateReferences();
02:08:26.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:27.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:27.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:28.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:28.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:29.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:29.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:30.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:30.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:31.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:31.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:32.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:32.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:33.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:33.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:34.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:08:34.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:35.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:35.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1406
02:08:35.731 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node rootNameNode = n;
if (n != null) {


}

02:08:35.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:36.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:08:36.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:37.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:37.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:38.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	Node rootNameNode = n;
Node rootNameNode = n;
	removeUnreferenced();
referenceAliases();
	Node rootNameNode = n;
Node rootNameNode = n;
	referenceAliases();
referenceParentNames();
	Node rootNameNode = n;
Node rootNameNode = n;
	referenceParentNames();
calculateReferences();
	Node rootNameNode = n;
Node rootNameNode = n;
	calculateReferences();
02:08:38.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:39.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:39.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:40.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:40.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:41.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:41.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:42.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:42.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:43.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:43.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:44.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:44.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:45.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:45.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:46.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:08:46.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:47.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:47.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1405
02:08:47.687 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
String name = "";
removeUnreferenced();
	String name = "";
String name = "";
	removeUnreferenced();
createName(name);
createName(name);
	String name = "";
String name = "";
	createName(name);
referenceAliases();
	String name = "";
String name = "";
	referenceAliases();
referenceParentNames();
	String name = "";
String name = "";
	referenceParentNames();
calculateReferences();
	String name = "";
String name = "";
	calculateReferences();
02:08:47.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:48.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:48.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:49.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:49.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:50.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:50.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:51.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:51.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:52.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:52.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:53.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:53.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:54.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:54.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:55.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:55.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:56.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:56.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:57.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:57.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:58.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:08:58.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:08:59.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:08:59.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1402
02:08:59.753 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node parent = n.getParent();
Node parent = n.getFirstChild();
Node parent = n.getLastChild();
Node parent = n.getNext();
Node parent = n.getLastSibling();
Node parent = n.detachFromParent();
Node parent = n.removeFirstChild();
Node parent = n.removeChildren();
Node parent = n.cloneNode();
Node parent = n.cloneTree();
02:08:59.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:00.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:00.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:01.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:01.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:02.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:02.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:03.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:03.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:04.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:04.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:05.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:05.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:06.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:06.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:07.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:07.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:08.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
Node parent = n.getParent(parent);
Node parent = n.getParent(t);
Node parent = n.getParent(this.compiler);
Node parent = n.getParent(this.allNames);
Node parent = n.getParent(this.referenceGraph);
Node parent = n.getParent(this.scopes);
Node parent = n.getParent(PROTOTYPE_SUBSTRING);
Node parent = n.getParent(PROTOTYPE_SUBSTRING_LEN);
Node parent = n.getParent(PROTOTYPE_SUFFIX_LEN);
Node parent = n.getParent(WINDOW);
Node parent = n.getParent(FUNCTION);
Node parent = n.getParent(DEFAULT_GLOBAL_NAMES);
Node parent = n.getParent(this.removeUnreferenced);
Node parent = n.getParent(this.globalNames);
Node parent = n.getParent(this.changeProxy);
Node parent = n.getParent(this.externalNames);
Node parent = n.getParent(this.refNodes);
Node parent = n.getParent(this.aliases);
Node parent = n.getParent(NON_LOCAL_RESULT_PREDICATE);
02:09:08.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:09.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:09.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:10.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:10.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:11.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:11.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:12.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:12.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:13.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:13.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:14.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:14.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:15.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:15.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:16.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:16.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:18.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:18.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:19.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:19.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:20.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:20.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:21.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:21.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:22.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:22.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:23.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:23.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:24.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:24.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:25.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:25.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:26.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:26.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:27.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:27.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:28.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
Node parent = parent.getParent();
Node parent = t.getParent();
Node parent = this.compiler.getParent();
Node parent = this.allNames.getParent();
Node parent = this.referenceGraph.getParent();
Node parent = this.scopes.getParent();
Node parent = PROTOTYPE_SUBSTRING.getParent();
Node parent = PROTOTYPE_SUBSTRING_LEN.getParent();
Node parent = PROTOTYPE_SUFFIX_LEN.getParent();
Node parent = WINDOW.getParent();
Node parent = FUNCTION.getParent();
Node parent = DEFAULT_GLOBAL_NAMES.getParent();
Node parent = this.removeUnreferenced.getParent();
Node parent = this.globalNames.getParent();
Node parent = this.changeProxy.getParent();
Node parent = this.externalNames.getParent();
Node parent = this.refNodes.getParent();
Node parent = this.aliases.getParent();
Node parent = NON_LOCAL_RESULT_PREDICATE.getParent();
02:09:28.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:29.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:29.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:30.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:30.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:31.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:31.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:32.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:32.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:33.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:33.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:34.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:34.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:35.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:35.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:36.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:36.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:37.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:37.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:38.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:38.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:39.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:39.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:40.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:40.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:41.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:41.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:42.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:42.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:43.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:43.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:44.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:44.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:45.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:45.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:46.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:46.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:47.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

02:09:47.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:48.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

02:09:48.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:49.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:49.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:50.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
removeUnreferenced();
	Node parent = n.getParent();
Node parent = n.getParent();
	removeUnreferenced();
referenceAliases();
	Node parent = n.getParent();
Node parent = n.getParent();
	referenceAliases();
referenceParentNames();
	Node parent = n.getParent();
Node parent = n.getParent();
	referenceParentNames();
calculateReferences();
	Node parent = n.getParent();
Node parent = n.getParent();
	calculateReferences();
02:09:50.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:51.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:51.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:52.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:52.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:53.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:53.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:54.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:54.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:55.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:55.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:56.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:56.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:57.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:57.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:58.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 

02:09:58.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:09:59.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-108 ---Fixer: fix fail because of failed compiling! 
02:09:59.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NameAnalyzer ===1327
02:09:59.403 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
/**
   * Creates a {@link JsName} for the given name if it doesn't already
   * exist.
   *
   * @param name A fully qualified name
   */
  private void createName(String name) {
    JsName jsn = allNames.get(name);
    if (jsn == null) {
      jsn = new JsName();
      jsn.name = name;
      allNames.put(name, jsn);
    }
  }
