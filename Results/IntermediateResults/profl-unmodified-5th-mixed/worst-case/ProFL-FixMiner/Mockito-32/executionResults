Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Mockito-32
02:40:22.022 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Mockito/32.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Mockito/32.txt
02:40:24.482 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
02:40:24.505 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Mockito-32/generalSusInfo.profl
02:40:24.538 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Mockito-32/aggregatedSusInfo.profl
02:40:24.539 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
02:40:24.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - org.mockito.internal.configuration.SpyAnnotationEngine ===55
02:40:25.219 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
try {
                    Object instance = field.get(testClass);
                    if (instance == null) {
                        throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
                        		  "The instance must be created *before* initMocks();\n" +
                                  "Example of correct usage of @Spy:\n" +
                            	  "   @Spy List mock = new LinkedList();\n" +
                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");

                    }
                    if (new MockUtil().isMock(instance)) { 
                        // instance has been spied earlier
                        Mockito.reset(instance);
                    } else {
                        field.set(testClass, Mockito.spy(instance));
                    }
                } catch (IllegalAccessException e) {
                    throw new MockitoException("Problems initiating spied field " + field.getName(), e);
                } finally {
                    field.setAccessible(wasAccessible);
                }
try {
                    Object instance = field.get(testClass);
                    if (instance == null) {
                        throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
                        		  "The instance must be created *before* initMocks();\n" +
                                  "Example of correct usage of @Spy:\n" +
                            	  "   @Spy List mock = new LinkedList();\n" +
                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");

                    }
                    if (new MockUtil().isMock(instance)) { 
                        // instance has been spied earlier
                        Mockito.reset(instance);
                    } else {
                        field.set(testClass, Mockito.spy(instance));
                    }
                } catch (IllegalAccessException e) {
                    throw new MockitoException("Problems initiating spied field " + field.getName(), e);
                } finally {
                    field.setAccessible(wasAccessible);
                }
	assertNoAnnotations(Spy.class, field, Mock.class, org.mockito.MockitoAnnotations.Mock.class, Captor.class);
                boolean wasAccessible = field.isAccessible();
                field.setAccessible(true);
                
null
try {
                    Object instance = field.get(testClass);
                    if (instance == null) {
                        throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
                        		  "The instance must be created *before* initMocks();\n" +
                                  "Example of correct usage of @Spy:\n" +
                            	  "   @Spy List mock = new LinkedList();\n" +
                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");

                    }
                    if (new MockUtil().isMock(instance)) { 
                        // instance has been spied earlier
                        Mockito.reset(instance);
                    } else {
                        field.set(testClass, Mockito.spy(instance));
                    }
                } catch (IllegalAccessException e) {
                    throw new MockitoException("Problems initiating spied field " + field.getName(), e);
                } finally {
                    field.setAccessible(wasAccessible);
                }
	boolean wasAccessible = field.isAccessible();
                field.setAccessible(true);
                
null
try {
                    Object instance = field.get(testClass);
                    if (instance == null) {
                        throw new MockitoException("Cannot create a @Spy for '" + field.getName() + "' field because the *instance* is missing\n" +
                        		  "The instance must be created *before* initMocks();\n" +
                                  "Example of correct usage of @Spy:\n" +
                            	  "   @Spy List mock = new LinkedList();\n" +
                            	  "   //also, don't forget about MockitoAnnotations.initMocks();");

                    }
                    if (new MockUtil().isMock(instance)) { 
                        // instance has been spied earlier
                        Mockito.reset(instance);
                    } else {
                        field.set(testClass, Mockito.spy(instance));
                    }
                } catch (IllegalAccessException e) {
                    throw new MockitoException("Problems initiating spied field " + field.getName(), e);
                } finally {
                    field.setAccessible(wasAccessible);
                }
	field.setAccessible(true);
                
null
02:40:25.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:40:25.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:40:25.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:40:26.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:40:26.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:40:27.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
02:40:27.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
02:43:06.706 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:43:06.706 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 15, [- org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksByName, - org.mockitousage.annotation.MockInjectionTest::shouldInjectSpies, - org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksForClassHierarchyIfAnnotated, - org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksIfAnnotated, - org.mockitousage.annotation.MockInjectionTest::shouldProvideDecentExceptionWhenInjectMockInstanceIsNull, - org.mockitousage.annotation.MockInjectionTest::shouldNotInjectIfNotAnnotated, - org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInHierarchy, - org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInBaseClass, - org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest::shouldInitSpiesInBaseClass, - org.mockitousage.annotation.SpyAnnotationTest::shouldFailIfFieldIsNotInitialized, - org.mockitousage.annotation.SpyAnnotationTest::shouldProvideDecentExceptionWhenSpyInstanceIsNull, - org.mockitousage.annotation.SpyAnnotationTest::shouldInitSpies, - org.mockitousage.annotation.SpyAnnotationTest::shouldResetSpies, - org.mockitousage.annotation.SpyInjectionTest::shouldDoStuff, - org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:43:06.706 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksByName
02:43:06.706 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectSpies
02:43:06.706 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksForClassHierarchyIfAnnotated
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksIfAnnotated
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldProvideDecentExceptionWhenInjectMockInstanceIsNull
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldNotInjectIfNotAnnotated
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInHierarchy
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInBaseClass
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest::shouldInitSpiesInBaseClass
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationTest::shouldFailIfFieldIsNotInitialized
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationTest::shouldProvideDecentExceptionWhenSpyInstanceIsNull
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationTest::shouldInitSpies
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationTest::shouldResetSpies
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyInjectionTest::shouldDoStuff
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=14, pp=Unknown
02:43:06.707 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NegFix found
02:43:06.798 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Mockito-32/aggregatedSusInfo.profl
02:43:06.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V in org.mockito.internal.configuration.SpyAnnotationEngine:55
02:43:06.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 15 Mockito-32

02:43:06.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:43:07.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
02:43:07.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
02:45:46.096 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 13, [- org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksByName, - org.mockitousage.annotation.MockInjectionTest::shouldInjectSpies, - org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksForClassHierarchyIfAnnotated, - org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksIfAnnotated, - org.mockitousage.annotation.MockInjectionTest::shouldProvideDecentExceptionWhenInjectMockInstanceIsNull, - org.mockitousage.annotation.MockInjectionTest::shouldNotInjectIfNotAnnotated, - org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInHierarchy, - org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInBaseClass, - org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest::shouldInitSpiesInBaseClass, - org.mockitousage.annotation.SpyAnnotationTest::shouldFailIfFieldIsNotInitialized, - org.mockitousage.annotation.SpyAnnotationTest::shouldInitSpies, - org.mockitousage.annotation.SpyAnnotationTest::shouldInitSpies, - org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksByName
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectSpies
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksForClassHierarchyIfAnnotated
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldInjectMocksIfAnnotated
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldProvideDecentExceptionWhenInjectMockInstanceIsNull
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.MockInjectionTest::shouldNotInjectIfNotAnnotated
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInHierarchy
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest$SubTest::shouldInitSpiesInBaseClass
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationInitializedInBaseClassTest::shouldInitSpiesInBaseClass
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationTest::shouldFailIfFieldIsNotInitialized
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationTest::shouldInitSpies
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Pass->Fail test case ->org.mockitousage.annotation.SpyAnnotationTest::shouldInitSpies
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
02:45:46.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=12, pp=Unknown
02:45:46.098 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NegFix found
02:45:47.057 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Mockito-32/aggregatedSusInfo.profl
02:45:47.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V in org.mockito.internal.configuration.SpyAnnotationEngine:55
02:45:47.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 13 Mockito-32
02:45:47.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - org.mockito.internal.configuration.SpyAnnotationEngine ===54
02:45:47.079 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
field.setAccessible(wasAccessible);
field.setAccessible(true, wasAccessible);
field.setAccessible(false, wasAccessible);
field.setAccessible(wasAccessible, true);
field.setAccessible(wasAccessible, false);
02:45:47.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:47.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:45:47.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:48.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:45:48.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:49.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:45:49.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:49.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
field.setAccessible(fields);
field.setAccessible(context);
field.setAccessible(testClass);
field.setAccessible();
field.setAccessible(fields, wasAccessible);
field.setAccessible(context, wasAccessible);
field.setAccessible(testClass, wasAccessible);
field.setAccessible(wasAccessible, fields);
field.setAccessible(wasAccessible, context);
field.setAccessible(wasAccessible, testClass);
02:45:49.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:50.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:45:50.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:51.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:45:51.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:52.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:45:52.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:52.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:45:52.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:45:53.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
02:45:53.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
02:48:31.838 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:48:31.838 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:48:31.838 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
02:48:31.838 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
02:48:31.838 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
02:48:50.645 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Mockito-32/aggregatedSusInfo.profl
02:48:50.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V in org.mockito.internal.configuration.SpyAnnotationEngine:54
02:48:50.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Mockito-32
02:48:50.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:48:51.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:48:51.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:48:52.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:48:52.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:48:52.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:48:52.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:48:53.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
02:48:53.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:48:54.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mockito-32 ---Fixer: fix fail because of failed compiling! 
if (field != null) {


}

02:48:54.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:48:55.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
02:48:55.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
02:51:33.268 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:51:33.268 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
02:51:33.268 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
02:51:33.268 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
02:51:33.268 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
02:58:12.276 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Mockito-32/aggregatedSusInfo.profl
02:58:12.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V in org.mockito.internal.configuration.SpyAnnotationEngine:54
02:58:12.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Mockito-32
if (field == null) {
    return;
}

if (field == null) {
    throw new IllegalArgumentException("Empty variable: " + field);
}

02:58:12.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
02:58:13.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
02:58:13.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:00:50.418 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
03:00:50.418 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
03:00:50.418 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
03:00:50.418 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:00:50.418 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
05:23:13.123 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Mockito-32/aggregatedSusInfo.profl
05:23:13.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.mockito.internal.configuration.SpyAnnotationEngine:process(Ljava/lang/Class;Ljava/lang/Object;)V in org.mockito.internal.configuration.SpyAnnotationEngine:54
05:23:13.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Mockito-32
05:23:13.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
05:23:13.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
05:23:13.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
05:25:46.994 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
05:25:46.994 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName]
05:25:46.994 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.mockitousage.bugs.SpyShouldHaveNiceNameTest::shouldPrintNiceName
05:25:46.994 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
05:25:46.994 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
