Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Closure-35
20:40:38.136 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/35.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/35.txt
20:45:04.297 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
20:45:04.604 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-35/generalSusInfo.profl
20:45:05.057 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-35/aggregatedSusInfo.profl
20:45:05.087 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
20:45:05.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.TypeInference ===1123
20:45:06.726 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (objType != null) {
        for (String prop : constraintObj.getOwnPropertyNames()) {
          JSType propType = constraintObj.getPropertyType(prop);
          if (!objType.isPropertyTypeDeclared(prop)) {
            JSType typeToInfer = propType;
            if (!objType.hasProperty(prop)) {
              typeToInfer =
                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
            }
            objType.defineInferredProperty(prop, typeToInfer, null);
          }
        }
      }
if (objType == null) {
        for (String prop : constraintObj.getOwnPropertyNames()) {
          JSType propType = constraintObj.getPropertyType(prop);
          if (!objType.isPropertyTypeDeclared(prop)) {
            JSType typeToInfer = propType;
            if (!objType.hasProperty(prop)) {
              typeToInfer =
                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
            }
            objType.defineInferredProperty(prop, typeToInfer, null);
          }
        }
      }
20:45:06.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:07.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 
if (constraintObj != null) {
        for (String prop : constraintObj.getOwnPropertyNames()) {
          JSType propType = constraintObj.getPropertyType(prop);
          if (!objType.isPropertyTypeDeclared(prop)) {
            JSType typeToInfer = propType;
            if (!objType.hasProperty(prop)) {
              typeToInfer =
                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
            }
            objType.defineInferredProperty(prop, typeToInfer, null);
          }
        }
      }
20:45:07.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:08.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 
if (objType != null) {


}

20:45:08.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:09.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 
if (objType == null) {
    return;
}

if (objType == null) {
    throw new IllegalArgumentException("Empty variable: " + objType);
}

20:45:09.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:10.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 
20:45:10.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:11.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 
if (objType != null) {
        for (String prop : constraintObj.getOwnPropertyNames()) {
          JSType propType = constraintObj.getPropertyType(prop);
          if (!objType.isPropertyTypeDeclared(prop)) {
            JSType typeToInfer = propType;
            if (!objType.hasProperty(prop)) {
              typeToInfer =
                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
            }
            objType.defineInferredProperty(prop, typeToInfer, null);
          }
        }
      }
	ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
      
null
20:45:11.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:12.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 

20:45:12.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:13.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 
if (constraintObj != null) {
        for (String prop : constraintObj.getOwnPropertyNames()) {
          JSType propType = constraintObj.getPropertyType(prop);
          if (!objType.isPropertyTypeDeclared(prop)) {
            JSType typeToInfer = propType;
            if (!objType.hasProperty(prop)) {
              typeToInfer =
                  getNativeType(VOID_TYPE).getLeastSupertype(propType);
            }
            objType.defineInferredProperty(prop, typeToInfer, null);
          }
        }
      }
20:45:13.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
20:45:14.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-35 ---Fixer: fix fail because of failed compiling! 
20:45:14.989 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Finish off Fixing======
20:45:15.481 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-35/aggregatedSusInfo.profl
Failed to fix bug Closure-35
