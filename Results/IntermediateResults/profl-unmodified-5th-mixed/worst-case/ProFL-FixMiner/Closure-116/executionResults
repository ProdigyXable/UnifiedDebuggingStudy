Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable

java version "1.7.0_80"
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)

Java 7 environment setup completed
Closure-116
03:50:55.254 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 Failed Tests: 8
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/116.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/116.txt
03:54:34.125 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
03:54:34.220 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-116/generalSusInfo.profl
03:54:34.356 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-116/aggregatedSusInfo.profl
03:54:34.359 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
03:54:34.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1459
03:54:35.493 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return res;
if (res != null) {


}

03:54:35.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:36.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (res == null) {
    return null;
}

if (res == null) {
    throw new IllegalArgumentException("Empty variable: " + res);
}

03:54:36.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:37.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:37.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:38.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
detachChildren();
	return res;
return res;
	detachChildren();
setQuotedString();
	return res;
return res;
	setQuotedString();
03:54:38.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:39.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:39.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:40.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:40.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:41.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:41.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:42.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:54:42.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:43.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:43.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1430
03:54:43.323 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
if (node2 != null) {


}

03:54:43.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:44.308 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

03:54:44.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:45.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:45.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:46.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:54:46.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:47.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:47.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1446
03:54:47.199 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return new NodeMismatch(this, node2);
if (node2 != null) {


}

03:54:47.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:48.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

03:54:48.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:49.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:49.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:50.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
addChildToFront(node2);
addChildToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToFront(node2);
addChildToBack(node2);
addChildToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToBack(node2);
addChildrenToFront(node2);
addChildrenToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToFront(node2);
addChildrenToBack(node2);
addChildrenToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToBack(node2);
removeChild(node2);
removeChild(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	removeChild(node2);
detachChildren();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	detachChildren();
setQuotedString();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	setQuotedString();
03:54:50.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:51.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:51.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:51.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:51.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:52.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:52.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:53.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:53.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:54.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:54.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:55.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:55.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:56.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:56.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:57.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:57.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:58.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:58.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:54:59.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:54:59.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:00.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:00.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:01.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:01.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:02.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:02.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:03.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:03.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:04.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:04.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:05.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:05.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:06.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:06.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:07.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:07.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:08.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:55:08.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:09.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:09.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===744
03:55:09.261 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
cArg = cArg.getNext();
cArg = cArg.getNext(true);
cArg = cArg.getNext(false);
03:55:09.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:10.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:10.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:10.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
cArg = cArg.getFirstChild();
cArg = cArg.getLastChild();
cArg = cArg.getLastSibling();
cArg = cArg.getParent();
cArg = cArg.detachFromParent();
cArg = cArg.removeFirstChild();
cArg = cArg.removeChildren();
cArg = cArg.cloneNode();
cArg = cArg.cloneTree();
03:55:11.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:11.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:11.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:12.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:12.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:13.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:13.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:14.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:14.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:15.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:15.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:16.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:16.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:16.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:16.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:17.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:17.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:18.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {


}

03:55:18.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:19.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

03:55:19.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:20.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:20.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:21.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(cArg);
maybePrepareCall(cArg);
	cArg = cArg.getNext();
cArg = cArg.getNext();
	maybePrepareCall(cArg);
03:55:21.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:21.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:21.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:22.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:22.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:23.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
cArg = cArg.getNext();
	if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        
null
03:55:23.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:24.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:55:24.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:25.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:25.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===735
03:55:25.209 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
fnParam = fnParam.getNext();
fnParam = fnParam.getNext(true);
fnParam = fnParam.getNext(false);
03:55:25.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:26.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:26.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:26.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
fnParam = fnParam.getFirstChild();
fnParam = fnParam.getLastChild();
fnParam = fnParam.getLastSibling();
fnParam = fnParam.getParent();
fnParam = fnParam.detachFromParent();
fnParam = fnParam.removeFirstChild();
fnParam = fnParam.removeChildren();
fnParam = fnParam.cloneNode();
fnParam = fnParam.cloneTree();
03:55:26.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:27.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:27.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:28.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:28.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:29.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:29.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:30.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:30.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:31.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:31.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:31.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:31.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:32.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:32.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:33.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:33.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:34.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnParam != null) {


}

03:55:34.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:35.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnParam == null) {
    return null;
}

if (fnParam == null) {
    throw new IllegalArgumentException("Empty variable: " + fnParam);
}

03:55:35.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:35.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:35.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:36.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(fnParam);
maybePrepareCall(fnParam);
	fnParam = fnParam.getNext();
fnParam = fnParam.getNext();
	maybePrepareCall(fnParam);
03:55:36.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:37.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:37.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:38.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:38.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:39.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
fnParam = fnParam.getNext();
	if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        
null
03:55:39.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:40.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:55:40.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:40.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:40.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===727
03:55:40.973 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
if (NodeUtil.mayEffectMutableState(cArg, compiler) || NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) >= 1) {
            return CanInlineResult.NO;
          }
if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) <= 1) {
            return CanInlineResult.NO;
          }
if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) < 1) {
            return CanInlineResult.NO;
          }
03:55:40.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:41.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:41.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:42.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:42.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:43.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:43.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:44.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {


}

if (compiler != null) {


}

if (block != null) {


}

if (fnParam != null) {


}

03:55:44.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:45.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:45.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:45.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:45.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:46.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:46.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:47.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

if (compiler == null) {
    return null;
}

if (compiler == null) {
    throw new IllegalArgumentException("Empty variable: " + compiler);
}

if (block == null) {
    return null;
}

if (block == null) {
    throw new IllegalArgumentException("Empty variable: " + block);
}

if (fnParam == null) {
    return null;
}

if (fnParam == null) {
    throw new IllegalArgumentException("Empty variable: " + fnParam);
}

03:55:47.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:48.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:48.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:49.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:49.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:50.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:50.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:50.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:50.869 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:51.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:51.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:52.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:52.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:53.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:53.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:54.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:55:54.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:54.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:54.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===741
03:55:54.997 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayEffectMutableState(cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.constructorCallHasSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.functionCallHasSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.nodeTypeMayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
03:55:55.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:55.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:55.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:56.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:56.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:57.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:57.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:58.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil.mayHaveSideEffects(fnParam, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(block, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(callNode, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(fnNode, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.compiler, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.safeNameIdSupplier, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.allowDecomposition, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.knownConstants, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.assumeStrictThis, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.assumeMinimumCapture, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(NAME_COST_ESTIMATE, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(COMMA_COST, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(PAREN_COST, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects( compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(fnParam, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(block, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(callNode, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(fnNode, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.compiler, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.safeNameIdSupplier, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.allowDecomposition, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.knownConstants, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.assumeStrictThis, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(this.assumeMinimumCapture, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(NAME_COST_ESTIMATE, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(COMMA_COST, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(PAREN_COST, cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, fnParam)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, block)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, callNode)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, fnNode)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.safeNameIdSupplier)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.allowDecomposition)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.knownConstants)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.assumeStrictThis)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.assumeMinimumCapture)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, NAME_COST_ESTIMATE)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, COMMA_COST)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, PAREN_COST)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, )) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, fnParam, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, block, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, callNode, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, fnNode, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.compiler, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.safeNameIdSupplier, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.allowDecomposition, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.knownConstants, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.assumeStrictThis, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, this.assumeMinimumCapture, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, NAME_COST_ESTIMATE, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, COMMA_COST, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, PAREN_COST, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, fnParam)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, block)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, callNode)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, fnNode)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, this.compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, this.safeNameIdSupplier)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, this.allowDecomposition)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, this.knownConstants)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, this.assumeStrictThis)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, this.assumeMinimumCapture)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, NAME_COST_ESTIMATE)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, COMMA_COST)) {
          return CanInlineResult.NO;
        }
if (NodeUtil.mayHaveSideEffects(cArg, compiler, PAREN_COST)) {
          return CanInlineResult.NO;
        }
03:55:58.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:55:59.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:55:59.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:00.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:00.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:00.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:00.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:01.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:01.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:02.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:02.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:03.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:03.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:04.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:04.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:05.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:05.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:05.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:05.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:06.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:06.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:07.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:07.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:08.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:08.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:09.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:09.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:10.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:10.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:10.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:10.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:11.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:11.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:12.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:12.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:13.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:13.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:14.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:14.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:15.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:15.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:15.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:15.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:16.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:16.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:17.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:17.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:18.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:18.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:19.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:19.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:20.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:20.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:20.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:20.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:21.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:21.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:22.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:22.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:23.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:23.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:24.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:24.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:25.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:25.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:25.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:25.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:26.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:26.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:27.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:27.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:28.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:28.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:29.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:29.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:30.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:30.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:31.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:31.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:31.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:31.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:32.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:32.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:33.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:33.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:33.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:33.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:34.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:34.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:35.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:35.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:36.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:36.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:37.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:37.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:38.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:38.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:38.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:38.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:39.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:39.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:40.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:40.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:41.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:41.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:42.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:42.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:43.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:43.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:43.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:43.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:44.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:44.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:45.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:45.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:46.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:46.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:47.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:47.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:48.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:48.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:48.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:48.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:49.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:49.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:50.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:50.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:51.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:51.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:52.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:52.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:53.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:53.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:53.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (NodeUtil != null && NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
if (NodeUtil != null || NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
03:56:53.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:54.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:54.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:55.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {


}

if (compiler != null) {


}

03:56:55.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:56.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:56.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:57.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

if (compiler == null) {
    return null;
}

if (compiler == null) {
    throw new IllegalArgumentException("Empty variable: " + compiler);
}

03:56:57.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:57.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:57.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:58.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:58.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:56:59.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:56:59.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:00.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

        cArg = cArg.getNext();
	if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }

MOVE-BUGGY-STATEMENT
03:57:00.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:01.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:57:01.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:02.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:02.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===722
03:57:02.143 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
if (cArg == null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
03:57:02.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:02.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnParam != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
if (block != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
if (callNode != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
if (fnNode != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
03:57:02.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:03.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:03.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:04.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:04.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:05.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:05.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:06.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {


}

03:57:06.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:07.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

03:57:07.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:07.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:07.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:08.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(cArg);
maybePrepareCall(cArg);
	if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }
	maybePrepareCall(cArg);
03:57:08.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:09.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:09.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:10.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:10.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:11.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 


        // Move to the next name.
        fnParam = fnParam.getNext();
	if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

MOVE-BUGGY-STATEMENT
03:57:11.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:12.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:57:12.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:12.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:12.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===740
03:57:12.862 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
if (cArg == null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
03:57:12.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:13.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnParam != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
if (block != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
if (callNode != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
if (fnNode != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
03:57:13.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:14.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:14.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:15.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:15.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:16.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:16.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:16.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {


}

03:57:16.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:17.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

03:57:17.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:18.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:18.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:19.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(cArg);
maybePrepareCall(cArg);
	if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
	maybePrepareCall(cArg);
03:57:19.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:20.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:20.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:21.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:21.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:22.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
	if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      
null
03:57:22.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:22.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:57:22.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:23.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:23.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===721
03:57:23.689 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
if (fnParam == null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
03:57:23.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:24.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
if (block != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
if (callNode != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
if (fnNode != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
03:57:24.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:25.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:25.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:26.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:26.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:26.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:26.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:27.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnParam != null) {


}

03:57:27.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:28.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnParam == null) {
    return null;
}

if (fnParam == null) {
    throw new IllegalArgumentException("Empty variable: " + fnParam);
}

03:57:28.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:29.511 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:29.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:30.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(fnParam);
maybePrepareCall(fnParam);
	if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }
	maybePrepareCall(fnParam);
03:57:30.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:31.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:31.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:32.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:32.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:32.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 


      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
	if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

MOVE-BUGGY-STATEMENT
03:57:32.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:33.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:57:33.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:34.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:34.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExpressionDecomposer ===213
03:57:34.548 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (parentType == Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
if (parentType != Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
03:57:34.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:35.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parentType == 0) {
    new IllegalArgumentException("");
}

if (parentType != 0) {

    
}

if (parentType > 0) {

    
}

03:57:35.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:36.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:36.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:36.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:36.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:37.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parentType == Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
	Node functionExpression = parent.getFirstChild();
        decomposeSubExpressions(functionExpression.getNext(), child, state);
        // Now handle the call expression
        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
      } else 
null
if (parentType == Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
	decomposeSubExpressions(functionExpression.getNext(), child, state);
        // Now handle the call expression
        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
      } else 
null
if (parentType == Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
	if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
      } else 
null
03:57:37.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:37.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:37.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:38.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:38.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:38.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:57:38.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:38.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:38.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExpressionDecomposer ===198
03:57:38.968 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects) || functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() == grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
03:57:38.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:39.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:39.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:40.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != functionExpression) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != child) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != parent) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != exprInjectionPoint) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != nonconditionalExpr) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != expressionRoot) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != subExpression) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
03:57:40.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:41.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:41.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:42.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:42.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:42.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:42.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:43.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:43.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:44.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:44.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:45.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:45.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:45.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (functionExpression != null) {


}

if (functionExpression != null) {


}

if (grandchild != null) {


}

03:57:45.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:46.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:46.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:47.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:47.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:48.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (functionExpression == null) {
    return;
}

if (functionExpression == null) {
    throw new IllegalArgumentException("Empty variable: " + functionExpression);
}

if (functionExpression == null) {
    return;
}

if (functionExpression == null) {
    throw new IllegalArgumentException("Empty variable: " + functionExpression);
}

if (grandchild == null) {
    return;
}

if (grandchild == null) {
    throw new IllegalArgumentException("Empty variable: " + grandchild);
}

03:57:48.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:48.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:48.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:49.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:49.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:50.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:50.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:51.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:51.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:52.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:52.144 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:52.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybeExposeExpression(grandchild);
maybeExposeExpression(grandchild);
	if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
	maybeExposeExpression(grandchild);
exposeExpression(grandchild);
exposeExpression(grandchild);
	if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
	exposeExpression(grandchild);
moveExpression(grandchild);
moveExpression(grandchild);
	if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
	moveExpression(grandchild);
03:57:52.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:53.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:53.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:54.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:54.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:55.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:55.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:56.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:56.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:56.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:56.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:57.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:57.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:58.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:58.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:59.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:57:59.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:57:59.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
	Node functionExpression = parent.getFirstChild();
        decomposeSubExpressions(functionExpression.getNext(), child, state);
        // Now handle the call expression
        
null
if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
	decomposeSubExpressions(functionExpression.getNext(), child, state);
        // Now handle the call expression
        
null

      } else if (parentType == Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
	if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }

MOVE-BUGGY-STATEMENT
03:57:59.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:00.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:00.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:01.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:01.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:02.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:58:02.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:02.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:02.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExpressionDecomposer ===196
03:58:02.885 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
decomposeSubExpressions(functionExpression.getNext(), child, state);
decomposeSubExpressions(true, functionExpression.getNext(), child, state);
decomposeSubExpressions(false, functionExpression.getNext(), child, state);
decomposeSubExpressions(functionExpression.getNext(), true, child, state);
decomposeSubExpressions(functionExpression.getNext(), false, child, state);
decomposeSubExpressions(functionExpression.getNext(), child, true, state);
decomposeSubExpressions(functionExpression.getNext(), child, false, state);
decomposeSubExpressions(functionExpression.getNext(), child, state, true);
decomposeSubExpressions(functionExpression.getNext(), child, state, false);
03:58:02.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:03.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:03.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:04.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:04.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:05.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:05.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:05.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:05.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:06.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:06.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:07.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:07.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:08.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:08.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:09.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
decomposeSubExpressions(functionExpression, functionExpression.getNext(), child, state);
decomposeSubExpressions(parentType, functionExpression.getNext(), child, state);
decomposeSubExpressions(grandchild, functionExpression.getNext(), child, state);
decomposeSubExpressions(parent, functionExpression.getNext(), child, state);
decomposeSubExpressions(exprInjectionPoint, functionExpression.getNext(), child, state);
decomposeSubExpressions(hasFollowingSideEffects, functionExpression.getNext(), child, state);
decomposeSubExpressions(nonconditionalExpr, functionExpression.getNext(), child, state);
decomposeSubExpressions(expressionRoot, functionExpression.getNext(), child, state);
decomposeSubExpressions(subExpression, functionExpression.getNext(), child, state);
decomposeSubExpressions(this.compiler, functionExpression.getNext(), child, state);
decomposeSubExpressions(this.safeNameIdSupplier, functionExpression.getNext(), child, state);
decomposeSubExpressions(this.knownConstants, functionExpression.getNext(), child, state);
decomposeSubExpressions(MAX_INTERATIONS, functionExpression.getNext(), child, state);
decomposeSubExpressions(this.tempNamePrefix, functionExpression.getNext(), child, state);
decomposeSubExpressions(this.resultNamePrefix, functionExpression.getNext(), child, state);
decomposeSubExpressions(functionExpression.getNext(), functionExpression, state);
decomposeSubExpressions(functionExpression.getNext(), parentType, state);
decomposeSubExpressions(functionExpression.getNext(), grandchild, state);
decomposeSubExpressions(functionExpression.getNext(), parent, state);
decomposeSubExpressions(functionExpression.getNext(), exprInjectionPoint, state);
decomposeSubExpressions(functionExpression.getNext(), hasFollowingSideEffects, state);
decomposeSubExpressions(functionExpression.getNext(), nonconditionalExpr, state);
decomposeSubExpressions(functionExpression.getNext(), expressionRoot, state);
decomposeSubExpressions(functionExpression.getNext(), subExpression, state);
decomposeSubExpressions(functionExpression.getNext(), this.compiler, state);
decomposeSubExpressions(functionExpression.getNext(), this.safeNameIdSupplier, state);
decomposeSubExpressions(functionExpression.getNext(), this.knownConstants, state);
decomposeSubExpressions(functionExpression.getNext(), MAX_INTERATIONS, state);
decomposeSubExpressions(functionExpression.getNext(), this.tempNamePrefix, state);
decomposeSubExpressions(functionExpression.getNext(), this.resultNamePrefix, state);
decomposeSubExpressions(functionExpression.getNext(),  state);
decomposeSubExpressions(functionExpression.getNext(), functionExpression, child, state);
decomposeSubExpressions(functionExpression.getNext(), parentType, child, state);
decomposeSubExpressions(functionExpression.getNext(), grandchild, child, state);
decomposeSubExpressions(functionExpression.getNext(), parent, child, state);
decomposeSubExpressions(functionExpression.getNext(), exprInjectionPoint, child, state);
decomposeSubExpressions(functionExpression.getNext(), hasFollowingSideEffects, child, state);
decomposeSubExpressions(functionExpression.getNext(), nonconditionalExpr, child, state);
decomposeSubExpressions(functionExpression.getNext(), expressionRoot, child, state);
decomposeSubExpressions(functionExpression.getNext(), subExpression, child, state);
decomposeSubExpressions(functionExpression.getNext(), this.compiler, child, state);
decomposeSubExpressions(functionExpression.getNext(), this.safeNameIdSupplier, child, state);
decomposeSubExpressions(functionExpression.getNext(), this.knownConstants, child, state);
decomposeSubExpressions(functionExpression.getNext(), MAX_INTERATIONS, child, state);
decomposeSubExpressions(functionExpression.getNext(), this.tempNamePrefix, child, state);
decomposeSubExpressions(functionExpression.getNext(), this.resultNamePrefix, child, state);
decomposeSubExpressions(functionExpression.getNext(), child, functionExpression);
decomposeSubExpressions(functionExpression.getNext(), child, parentType);
decomposeSubExpressions(functionExpression.getNext(), child, grandchild);
decomposeSubExpressions(functionExpression.getNext(), child, parent);
decomposeSubExpressions(functionExpression.getNext(), child, exprInjectionPoint);
decomposeSubExpressions(functionExpression.getNext(), child, hasFollowingSideEffects);
decomposeSubExpressions(functionExpression.getNext(), child, nonconditionalExpr);
decomposeSubExpressions(functionExpression.getNext(), child, expressionRoot);
decomposeSubExpressions(functionExpression.getNext(), child, subExpression);
decomposeSubExpressions(functionExpression.getNext(), child, this.compiler);
decomposeSubExpressions(functionExpression.getNext(), child, this.safeNameIdSupplier);
decomposeSubExpressions(functionExpression.getNext(), child, this.knownConstants);
decomposeSubExpressions(functionExpression.getNext(), child, MAX_INTERATIONS);
decomposeSubExpressions(functionExpression.getNext(), child, this.tempNamePrefix);
decomposeSubExpressions(functionExpression.getNext(), child, this.resultNamePrefix);
decomposeSubExpressions(functionExpression.getNext(), child, );
decomposeSubExpressions(functionExpression.getNext(), child, functionExpression, state);
decomposeSubExpressions(functionExpression.getNext(), child, parentType, state);
decomposeSubExpressions(functionExpression.getNext(), child, grandchild, state);
decomposeSubExpressions(functionExpression.getNext(), child, parent, state);
decomposeSubExpressions(functionExpression.getNext(), child, exprInjectionPoint, state);
decomposeSubExpressions(functionExpression.getNext(), child, hasFollowingSideEffects, state);
decomposeSubExpressions(functionExpression.getNext(), child, nonconditionalExpr, state);
decomposeSubExpressions(functionExpression.getNext(), child, expressionRoot, state);
decomposeSubExpressions(functionExpression.getNext(), child, subExpression, state);
decomposeSubExpressions(functionExpression.getNext(), child, this.compiler, state);
decomposeSubExpressions(functionExpression.getNext(), child, this.safeNameIdSupplier, state);
decomposeSubExpressions(functionExpression.getNext(), child, this.knownConstants, state);
decomposeSubExpressions(functionExpression.getNext(), child, MAX_INTERATIONS, state);
decomposeSubExpressions(functionExpression.getNext(), child, this.tempNamePrefix, state);
decomposeSubExpressions(functionExpression.getNext(), child, this.resultNamePrefix, state);
decomposeSubExpressions(functionExpression.getNext(), child, state, functionExpression);
decomposeSubExpressions(functionExpression.getNext(), child, state, parentType);
decomposeSubExpressions(functionExpression.getNext(), child, state, grandchild);
decomposeSubExpressions(functionExpression.getNext(), child, state, parent);
decomposeSubExpressions(functionExpression.getNext(), child, state, exprInjectionPoint);
decomposeSubExpressions(functionExpression.getNext(), child, state, hasFollowingSideEffects);
decomposeSubExpressions(functionExpression.getNext(), child, state, nonconditionalExpr);
decomposeSubExpressions(functionExpression.getNext(), child, state, expressionRoot);
decomposeSubExpressions(functionExpression.getNext(), child, state, subExpression);
decomposeSubExpressions(functionExpression.getNext(), child, state, this.compiler);
decomposeSubExpressions(functionExpression.getNext(), child, state, this.safeNameIdSupplier);
decomposeSubExpressions(functionExpression.getNext(), child, state, this.knownConstants);
decomposeSubExpressions(functionExpression.getNext(), child, state, MAX_INTERATIONS);
decomposeSubExpressions(functionExpression.getNext(), child, state, this.tempNamePrefix);
decomposeSubExpressions(functionExpression.getNext(), child, state, this.resultNamePrefix);
03:58:09.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:09.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:09.824 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:10.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:10.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:11.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:11.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:12.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:12.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:12.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:12.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:13.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:13.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:14.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:14.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:15.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:15.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:15.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:15.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:16.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:16.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:17.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:17.527 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:18.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:18.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:19.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:19.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:19.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:19.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:20.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:20.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:21.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:21.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:22.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:22.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:22.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:22.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:23.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:23.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:24.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:24.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:25.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:25.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:26.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:26.092 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:26.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:26.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:27.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:27.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:28.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:28.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:29.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:29.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:30.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:30.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:30.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:30.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:31.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:31.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:32.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:32.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:33.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:33.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:34.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:34.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:34.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:34.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:35.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:35.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:36.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:36.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:37.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:37.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:37.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:37.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:38.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:38.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:39.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:39.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:40.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:40.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:41.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:41.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:41.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:41.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:42.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:42.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:43.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:43.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:44.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:44.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:44.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:44.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:45.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:45.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:46.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:46.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:47.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:47.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:47.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:47.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:48.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:48.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:49.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:49.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:50.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:50.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:51.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:51.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:51.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:51.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:52.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:52.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:53.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:53.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:54.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:54.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:54.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:54.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:55.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:55.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:56.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:56.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:56.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:56.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:57.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:57.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:58.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:58.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:59.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:59.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:58:59.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:58:59.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:00.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:00.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:01.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:01.433 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:02.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:02.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:02.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:02.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:03.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:03.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:04.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:04.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:05.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:05.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:06.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:06.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:06.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:06.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:07.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:07.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:08.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:08.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:09.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:09.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:09.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:09.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:10.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:10.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:11.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:11.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:12.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:12.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:13.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:13.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:13.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:13.819 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:14.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:14.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:15.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:15.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:16.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:16.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:16.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:16.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:17.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:17.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:18.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:18.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:19.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:19.248 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:20.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
decomposeObjectLiteralKeys(functionExpression.getNext(), child, state);
03:59:20.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:20.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (functionExpression != null) {


}

if (child != null) {


}

if (state != null) {


}

03:59:20.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:21.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:21.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:22.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:22.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:23.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (functionExpression == null) {
    return;
}

if (functionExpression == null) {
    throw new IllegalArgumentException("Empty variable: " + functionExpression);
}

if (child == null) {
    return;
}

if (child == null) {
    throw new IllegalArgumentException("Empty variable: " + child);
}

if (state == null) {
    return;
}

if (state == null) {
    throw new IllegalArgumentException("Empty variable: " + state);
}

03:59:23.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:23.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:23.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:24.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:24.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:25.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:25.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:26.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:26.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:26.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:26.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:27.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
decomposeSubExpressions(functionExpression.getNext(), child, state);
	Node functionExpression = parent.getFirstChild();
        
null

        // Now handle the call expression
        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
	decomposeSubExpressions(functionExpression.getNext(), child, state);

MOVE-BUGGY-STATEMENT

        // Now handle the call expression
        if (isExpressionTreeUnsafe(functionExpression, state.sideEffects)
            && functionExpression.getFirstChild() != grandchild) {
          // TODO(johnlenz): In Internet Explorer, non-JavaScript objects such
          // as DOM objects can not be decomposed.
          Preconditions.checkState(allowObjectCallDecomposing(),
              "Object method calls can not be decomposed.");
          // Either there were preexisting side-effects, or this node has
          // side-effects.
          state.sideEffects = true;

          // Rewrite the call so "this" is preserved.
          Node replacement = rewriteCallExpression(parent, state);
          // Continue from here.
          parent = replacement;
        }
      } else if (parentType == Token.OBJECTLIT) {
        decomposeObjectLiteralKeys(parent.getFirstChild(), child, state);
      } else {
        decomposeSubExpressions(parent.getFirstChild(), child, state);
      }
	decomposeSubExpressions(functionExpression.getNext(), child, state);

MOVE-BUGGY-STATEMENT
03:59:27.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:28.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:28.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:29.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:29.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:30.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

03:59:30.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:30.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:30.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExpressionDecomposer ===195
03:59:30.842 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node functionExpression = parent.getFirstChild();
Node functionExpression = parent.getLastChild();
Node functionExpression = parent.getNext();
Node functionExpression = parent.getLastSibling();
Node functionExpression = parent.getParent();
Node functionExpression = parent.detachFromParent();
Node functionExpression = parent.removeFirstChild();
Node functionExpression = parent.removeChildren();
Node functionExpression = parent.cloneNode();
Node functionExpression = parent.cloneTree();
03:59:30.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:31.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:31.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:32.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:32.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:33.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:33.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:33.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:33.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:34.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:34.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:35.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:35.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:36.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:36.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:37.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:37.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:37.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node functionExpression = parent.getFirstChild(functionExpression);
Node functionExpression = parent.getFirstChild(parentType);
Node functionExpression = parent.getFirstChild(grandchild);
Node functionExpression = parent.getFirstChild(child);
Node functionExpression = parent.getFirstChild(state);
Node functionExpression = parent.getFirstChild(exprInjectionPoint);
Node functionExpression = parent.getFirstChild(hasFollowingSideEffects);
Node functionExpression = parent.getFirstChild(nonconditionalExpr);
Node functionExpression = parent.getFirstChild(expressionRoot);
Node functionExpression = parent.getFirstChild(subExpression);
Node functionExpression = parent.getFirstChild(this.compiler);
Node functionExpression = parent.getFirstChild(this.safeNameIdSupplier);
Node functionExpression = parent.getFirstChild(this.knownConstants);
Node functionExpression = parent.getFirstChild(MAX_INTERATIONS);
Node functionExpression = parent.getFirstChild(this.tempNamePrefix);
Node functionExpression = parent.getFirstChild(this.resultNamePrefix);
03:59:37.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:38.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:38.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:39.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:39.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:40.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:40.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:40.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:40.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:41.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:41.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:42.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:42.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:43.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:43.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:44.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:44.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:44.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:44.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:45.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:45.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:46.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:46.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:47.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:47.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:47.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:47.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:48.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:48.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:49.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:49.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:50.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node functionExpression = functionExpression.getFirstChild();
Node functionExpression = parentType.getFirstChild();
Node functionExpression = grandchild.getFirstChild();
Node functionExpression = child.getFirstChild();
Node functionExpression = state.getFirstChild();
Node functionExpression = exprInjectionPoint.getFirstChild();
Node functionExpression = hasFollowingSideEffects.getFirstChild();
Node functionExpression = nonconditionalExpr.getFirstChild();
Node functionExpression = expressionRoot.getFirstChild();
Node functionExpression = subExpression.getFirstChild();
Node functionExpression = this.compiler.getFirstChild();
Node functionExpression = this.safeNameIdSupplier.getFirstChild();
Node functionExpression = this.knownConstants.getFirstChild();
Node functionExpression = MAX_INTERATIONS.getFirstChild();
Node functionExpression = this.tempNamePrefix.getFirstChild();
Node functionExpression = this.resultNamePrefix.getFirstChild();
03:59:50.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:50.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:50.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:51.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:51.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:52.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:52.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:53.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:53.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:54.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:54.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:54.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:54.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:55.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:55.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:56.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:56.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:57.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:57.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:57.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:57.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:58.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:58.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:59:59.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
03:59:59.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:00.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:00.267 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:01.040 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:01.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:01.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:01.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:02.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

04:00:02.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:03.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

04:00:03.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:04.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:04.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:04.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybeExposeExpression(functionExpression);
maybeExposeExpression(functionExpression);
	Node functionExpression = parent.getFirstChild();
Node functionExpression = parent.getFirstChild();
	maybeExposeExpression(functionExpression);
exposeExpression(functionExpression);
exposeExpression(functionExpression);
	Node functionExpression = parent.getFirstChild();
Node functionExpression = parent.getFirstChild();
	exposeExpression(functionExpression);
moveExpression(functionExpression);
moveExpression(functionExpression);
	Node functionExpression = parent.getFirstChild();
Node functionExpression = parent.getFirstChild();
	moveExpression(functionExpression);
04:00:04.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:05.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:05.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:06.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:06.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:07.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:07.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:07.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:07.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:08.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:08.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:09.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:09.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:10.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:10.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:10.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:10.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:11.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:00:11.611 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:12.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:12.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===748
04:00:12.393 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return CanInlineResult.YES;

04:00:12.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:13.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:13.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===74
04:00:13.207 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return replacement;
if (replacement != null) {


}

04:00:13.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:13.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (replacement == null) {
    return null;
}

if (replacement == null) {
    throw new IllegalArgumentException("Empty variable: " + replacement);
}

04:00:13.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:14.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:14.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:15.519 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:00:15.520 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:16.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:16.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===73
04:00:16.313 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
parent.replaceChild(node, replacement);
parent.replaceChild(true, node, replacement);
parent.replaceChild(false, node, replacement);
parent.replaceChild(node, true, replacement);
parent.replaceChild(node, false, replacement);
parent.replaceChild(node, replacement, true);
parent.replaceChild(node, replacement, false);
04:00:16.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:17.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:17.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:17.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:17.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:18.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:18.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:19.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:19.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:20.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:20.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:21.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
parent.replaceChild(replacementTemplate, replacement);
parent.replaceChild(compiler, replacement);
parent.replaceChild(replacements, replacement);
parent.replaceChild(replaceThis, replacement);
parent.replaceChild(THIS_MARKER, replacement);
parent.replaceChild( replacement);
parent.replaceChild(replacementTemplate, node, replacement);
parent.replaceChild(compiler, node, replacement);
parent.replaceChild(replacements, node, replacement);
parent.replaceChild(replaceThis, node, replacement);
parent.replaceChild(THIS_MARKER, node, replacement);
parent.replaceChild(node, replacementTemplate);
parent.replaceChild(node, compiler);
parent.replaceChild(node, replacements);
parent.replaceChild(node, replaceThis);
parent.replaceChild(node, THIS_MARKER);
parent.replaceChild(node, );
parent.replaceChild(node, replacementTemplate, replacement);
parent.replaceChild(node, compiler, replacement);
parent.replaceChild(node, replacements, replacement);
parent.replaceChild(node, replaceThis, replacement);
parent.replaceChild(node, THIS_MARKER, replacement);
parent.replaceChild(node, replacement, replacementTemplate);
parent.replaceChild(node, replacement, compiler);
parent.replaceChild(node, replacement, replacements);
parent.replaceChild(node, replacement, replaceThis);
parent.replaceChild(node, replacement, THIS_MARKER);
04:00:21.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:21.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:21.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:22.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:22.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:23.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:23.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:24.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:24.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:24.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:24.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:25.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:25.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:26.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:26.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:27.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:27.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:27.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:27.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:28.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:28.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:29.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:29.521 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:30.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:30.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:31.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:31.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:31.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:31.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:32.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:32.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:33.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:33.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:33.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:33.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:34.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:34.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:35.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:35.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:36.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:36.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:36.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:36.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:37.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:37.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:38.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:38.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:39.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:39.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:39.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:39.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:40.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:40.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:41.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
parent.addChildBefore(node, replacement);
parent.addChildAfter(node, replacement);
parent.addChildrenAfter(node, replacement);
parent.replaceChildAfter(node, replacement);
04:00:41.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:42.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:42.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:43.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:43.149 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:43.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:43.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:44.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

if (node != null) {


}

if (replacement != null) {


}

04:00:44.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:45.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:45.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:46.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:46.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:47.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (node == null) {
    return null;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

if (replacement == null) {
    return null;
}

if (replacement == null) {
    throw new IllegalArgumentException("Empty variable: " + replacement);
}

04:00:47.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:47.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:47.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:48.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:48.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:49.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:49.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:50.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:50.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:51.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:51.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:51.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
parent.replaceChild(node, replacement);
	Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
        // The name may need to be replaced more than once,
        // so we need to clone the node.
        Node replacement = replacementTemplate.cloneTree();
        
null
parent.replaceChild(node, replacement);
	Node replacement = replacementTemplate.cloneTree();
        
null

        return replacement;
	parent.replaceChild(node, replacement);

MOVE-BUGGY-STATEMENT
04:00:51.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:52.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:52.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:53.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:53.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:54.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:00:54.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:54.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:54.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===72
04:00:54.898 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node replacement = replacementTemplate.cloneTree();
Node replacement = replacementTemplate.getFirstChild();
Node replacement = replacementTemplate.getLastChild();
Node replacement = replacementTemplate.getNext();
Node replacement = replacementTemplate.getLastSibling();
Node replacement = replacementTemplate.getParent();
Node replacement = replacementTemplate.detachFromParent();
Node replacement = replacementTemplate.removeFirstChild();
Node replacement = replacementTemplate.removeChildren();
Node replacement = replacementTemplate.cloneNode();
04:00:54.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:55.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:55.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:56.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:56.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:57.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:57.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:58.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:58.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:58.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:58.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:00:59.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:00:59.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:00.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:00.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:01.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:01.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:01.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node replacement = replacementTemplate.cloneTree(replacement);
Node replacement = replacementTemplate.cloneTree(compiler);
Node replacement = replacementTemplate.cloneTree(node);
Node replacement = replacementTemplate.cloneTree(parent);
Node replacement = replacementTemplate.cloneTree(replacements);
Node replacement = replacementTemplate.cloneTree(replaceThis);
Node replacement = replacementTemplate.cloneTree(THIS_MARKER);
04:01:01.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:02.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:02.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:03.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:03.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:04.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:04.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:05.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:05.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:05.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:05.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:06.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:06.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:07.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node replacement = replacement.cloneTree();
Node replacement = compiler.cloneTree();
Node replacement = node.cloneTree();
Node replacement = parent.cloneTree();
Node replacement = replacements.cloneTree();
Node replacement = replaceThis.cloneTree();
Node replacement = THIS_MARKER.cloneTree();
04:01:07.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:08.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:08.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:09.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:09.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:09.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:09.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:10.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:10.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:11.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:11.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:12.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:12.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:13.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (replacementTemplate != null) {


}

04:01:13.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:13.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (replacementTemplate == null) {
    return null;
}

if (replacementTemplate == null) {
    throw new IllegalArgumentException("Empty variable: " + replacementTemplate);
}

04:01:13.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:14.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:14.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:15.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:01:15.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:16.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:16.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===67
04:01:16.228 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(true, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(false, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), true);
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), false);
04:01:16.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:17.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:17.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:17.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:17.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:18.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:18.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:19.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkState(replacementTemplate, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(compiler, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(node, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(parent, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(replacements, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(replaceThis, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(THIS_MARKER, !parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), replacementTemplate);
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), compiler);
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), node);
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), parent);
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), replacements);
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), replaceThis);
Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch(), THIS_MARKER);
04:01:19.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:20.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:20.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:20.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:20.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:21.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:21.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:22.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:22.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:23.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:23.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:23.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:23.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:24.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:24.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:25.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:25.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:26.338 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:26.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:27.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:27.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:27.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:27.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:28.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:28.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:29.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:29.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:30.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

if (parent != null) {


}

if (parent != null) {


}

04:01:30.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:31.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:31.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:31.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:31.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:32.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

04:01:32.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:33.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:33.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:34.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:34.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:34.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:34.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:35.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:35.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:36.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:36.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:37.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

        // The name may need to be replaced more than once,
        // so we need to clone the node.
        Node replacement = replacementTemplate.cloneTree();
	Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());

MOVE-BUGGY-STATEMENT

        // The name may need to be replaced more than once,
        // so we need to clone the node.
        Node replacement = replacementTemplate.cloneTree();
        parent.replaceChild(node, replacement);
	Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());

MOVE-BUGGY-STATEMENT

        // The name may need to be replaced more than once,
        // so we need to clone the node.
        Node replacement = replacementTemplate.cloneTree();
        parent.replaceChild(node, replacement);
        return replacement;
	Preconditions.checkState(!parent.isFunction()
            || !parent.isVar()
            || !parent.isCatch());

MOVE-BUGGY-STATEMENT
04:01:37.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:38.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:38.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:38.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:38.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:39.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:01:39.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:40.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:40.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===233
04:01:40.495 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return (type == Token.VAR || type == Token.INC || type == Token.DEC ||
        (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) ||
        (NodeUtil.isForIn(parent)));
if (parent != null) {


}

if (parent != null) {


}

if (n != null) {


}

if (parent != null) {


}

04:01:40.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:41.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:41.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:42.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:42.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:42.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:42.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:43.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return true;
}

if (parent == null) {
    return false;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (parent == null) {
    return true;
}

if (parent == null) {
    return false;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (n == null) {
    return true;
}

if (n == null) {
    return false;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (parent == null) {
    return true;
}

if (parent == null) {
    return false;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

04:01:43.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:44.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:44.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:45.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:45.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:45.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:45.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:46.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:46.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:47.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:47.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:48.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:48.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:49.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:49.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:49.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:49.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:50.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:50.687 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:51.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:51.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:52.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:52.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:53.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (type == 0) {
    new IllegalArgumentException("");
}

if (type != 0) {

    
}

if (type > 0) {

    
}

if (type == 0) {
    new IllegalArgumentException("");
}

if (type != 0) {

    
}

if (type > 0) {

    
}

if (type == 0) {
    new IllegalArgumentException("");
}

if (type != 0) {

    
}

if (type > 0) {

    
}

04:01:53.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:53.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:53.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:54.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:54.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:55.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:55.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:56.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:56.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:57.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:57.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:57.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:57.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:58.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:58.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:01:59.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:01:59.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:00.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:02:00.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:01.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:01.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===232
04:02:01.039 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
int type = parent.getType();

double type = parent.getType();
float type = parent.getType();
long type = parent.getType();
short type = parent.getType();
byte type = parent.getType();
04:02:01.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:01.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:01.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:02.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:02.581 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:03.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:03.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:04.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:04.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:04.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
int type = parent.getLength();
int type = parent.getLineno();
int type = parent.getCharno();
int type = parent.getSourceOffset();
int type = parent.getSourcePosition();
int type = parent.getChildCount();
int type = parent.getChangeTime();
int type = parent.getSideEffectFlags();
04:02:04.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:05.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:05.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:06.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:06.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:07.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:07.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:08.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:08.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:08.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:08.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:09.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:09.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:10.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:10.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:11.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
int type = parent.getType(type);
int type = parent.getType(n);
int type = parent.getType(THIS_MARKER);
04:02:11.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:12.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:12.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:12.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:12.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:13.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
int type = type.getType();
int type = n.getType();
int type = THIS_MARKER.getType();
04:02:13.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:14.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:14.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:15.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:15.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:16.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

04:02:16.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:16.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return true;
}

if (parent == null) {
    return false;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

04:02:16.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:17.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:17.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:18.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:18.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:19.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:02:19.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:19.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:19.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===200
04:02:19.967 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
if (inInnerFunction && canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
04:02:19.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:20.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (parent != null) {


}

04:02:20.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:21.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:21.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:22.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (parent == null) {
    return null;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

04:02:22.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:23.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:23.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:23.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:23.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:24.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:24.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:25.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:02:25.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:26.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:26.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===719
04:02:26.303 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
if (cArg != null) {


}

if (fnParam != null) {


}

04:02:26.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:27.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:27.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:27.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

if (fnParam == null) {
    return null;
}

if (fnParam == null) {
    throw new IllegalArgumentException("Empty variable: " + fnParam);
}

04:02:27.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:28.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:28.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:29.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:29.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:30.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:30.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:31.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(fnParam);
maybePrepareCall(fnParam);
	while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	maybePrepareCall(fnParam);
maybePrepareCall(cArg);
maybePrepareCall(cArg);
	while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	maybePrepareCall(cArg);
04:02:31.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:32.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:32.157 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:32.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:32.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:33.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:33.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:34.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:34.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:35.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:35.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:36.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

    Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    
null
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    
null
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    
null
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    
null
while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    
null


    return CanInlineResult.YES;
	while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }

MOVE-BUGGY-STATEMENT
04:02:36.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:37.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:37.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:37.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:37.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:38.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:38.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:39.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:39.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:40.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:40.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:41.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:02:41.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:42.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:42.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===718
04:02:42.100 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(fnParam);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(cArg);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(block);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(callNode);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(fnNode);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(this.compiler);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(this.safeNameIdSupplier);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(this.allowDecomposition);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(this.knownConstants);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(this.assumeStrictThis);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(this.assumeMinimumCapture);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(NAME_COST_ESTIMATE);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(COMMA_COST);
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild(PAREN_COST);
04:02:42.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:42.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:42.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:43.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:43.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:44.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:44.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:45.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:45.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:46.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:46.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:47.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:47.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:47.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:47.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:48.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:48.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:49.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:49.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:50.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:50.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:51.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:51.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:51.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:51.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:52.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:52.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:53.644 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node fnParam = fnParam.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = cArg.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = block.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = callNode.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = fnNode.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = this.compiler.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = this.safeNameIdSupplier.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = this.allowDecomposition.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = this.knownConstants.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = this.assumeStrictThis.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = this.assumeMinimumCapture.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = NAME_COST_ESTIMATE.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = COMMA_COST.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = PAREN_COST.getFunctionParameters(fnNode).getFirstChild();
04:02:53.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:54.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:54.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:55.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:55.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:56.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:56.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:56.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:56.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:57.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:57.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:58.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:58.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:02:59.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:02:59.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:00.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:00.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:01.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:01.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:01.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:01.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:02.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:02.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:03.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:03.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:04.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:04.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:05.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode != null) {


}

04:03:05.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:06.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:03:06.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:06.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:06.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:07.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(fnParam);
maybePrepareCall(fnParam);
	Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
	maybePrepareCall(fnParam);
04:03:07.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:08.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:08.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:09.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:09.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:10.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:03:10.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:11.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:11.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===704
04:03:11.075 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }
if (callNode != null) {


}

04:03:11.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:11.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode == null) {
    return null;
}

if (callNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callNode);
}

04:03:11.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:12.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:12.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:13.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

    Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    
null
if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }
	Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    
null
if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }
	Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    
null


    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
	if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

MOVE-BUGGY-STATEMENT


    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

MOVE-BUGGY-STATEMENT


    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }

    return CanInlineResult.YES;
	if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

MOVE-BUGGY-STATEMENT
04:03:13.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:14.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:14.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:15.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:15.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:16.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:16.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:16.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:16.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:17.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:17.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:18.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:03:18.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:19.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:19.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===699
04:03:19.498 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node cArg = callNode.getFirstChild().getNext();
Node cArg = callNode.getFirstChild().getNext(cArg);
Node cArg = callNode.getFirstChild().getNext(block);
Node cArg = callNode.getFirstChild().getNext(callNode);
Node cArg = callNode.getFirstChild().getNext(fnNode);
Node cArg = callNode.getFirstChild().getNext(this.compiler);
Node cArg = callNode.getFirstChild().getNext(this.safeNameIdSupplier);
Node cArg = callNode.getFirstChild().getNext(this.allowDecomposition);
Node cArg = callNode.getFirstChild().getNext(this.knownConstants);
Node cArg = callNode.getFirstChild().getNext(this.assumeStrictThis);
Node cArg = callNode.getFirstChild().getNext(this.assumeMinimumCapture);
Node cArg = callNode.getFirstChild().getNext(NAME_COST_ESTIMATE);
Node cArg = callNode.getFirstChild().getNext(COMMA_COST);
Node cArg = callNode.getFirstChild().getNext(PAREN_COST);
04:03:19.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:20.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:20.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:21.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:21.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:22.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:22.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:22.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:22.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:23.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:23.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:24.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:24.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:25.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:25.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:26.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:26.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:27.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:27.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:27.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:27.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:28.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:28.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:29.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:29.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:30.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node cArg = cArg.getFirstChild().getNext();
Node cArg = block.getFirstChild().getNext();
Node cArg = fnNode.getFirstChild().getNext();
Node cArg = this.compiler.getFirstChild().getNext();
Node cArg = this.safeNameIdSupplier.getFirstChild().getNext();
Node cArg = this.allowDecomposition.getFirstChild().getNext();
Node cArg = this.knownConstants.getFirstChild().getNext();
Node cArg = this.assumeStrictThis.getFirstChild().getNext();
Node cArg = this.assumeMinimumCapture.getFirstChild().getNext();
Node cArg = NAME_COST_ESTIMATE.getFirstChild().getNext();
Node cArg = COMMA_COST.getFirstChild().getNext();
Node cArg = PAREN_COST.getFirstChild().getNext();
04:03:30.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:31.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:31.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:32.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:32.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:32.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:32.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:33.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:33.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:34.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:34.602 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:35.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:35.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:36.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:36.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:37.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:37.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:37.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:37.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:38.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:38.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:39.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:39.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:40.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode != null) {


}

04:03:40.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:41.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode == null) {
    return null;
}

if (callNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callNode);
}

04:03:41.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:42.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:42.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:42.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(cArg);
maybePrepareCall(cArg);
	Node cArg = callNode.getFirstChild().getNext();
Node cArg = callNode.getFirstChild().getNext();
	maybePrepareCall(cArg);
04:03:42.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:43.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:43.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:44.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:44.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:45.421 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:03:45.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:46.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:46.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===695
04:03:46.292 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node block = fnNode.getLastChild();
Node block = fnNode.getFirstChild();
Node block = fnNode.getNext();
Node block = fnNode.getLastSibling();
Node block = fnNode.getParent();
Node block = fnNode.detachFromParent();
Node block = fnNode.removeFirstChild();
Node block = fnNode.removeChildren();
Node block = fnNode.cloneNode();
Node block = fnNode.cloneTree();
04:03:46.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:47.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:47.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:47.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:47.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:48.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:48.809 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:49.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:49.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:50.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:50.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:51.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:51.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:52.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:52.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:52.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:52.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:53.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node block = fnNode.getLastChild(block);
Node block = fnNode.getLastChild(callNode);
Node block = fnNode.getLastChild(this.compiler);
Node block = fnNode.getLastChild(this.safeNameIdSupplier);
Node block = fnNode.getLastChild(this.allowDecomposition);
Node block = fnNode.getLastChild(this.knownConstants);
Node block = fnNode.getLastChild(this.assumeStrictThis);
Node block = fnNode.getLastChild(this.assumeMinimumCapture);
Node block = fnNode.getLastChild(NAME_COST_ESTIMATE);
Node block = fnNode.getLastChild(COMMA_COST);
Node block = fnNode.getLastChild(PAREN_COST);
04:03:53.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:54.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:54.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:55.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:55.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:56.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:56.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:57.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:57.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:57.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:57.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:58.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:58.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:03:59.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:03:59.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:00.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:00.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:01.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:01.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:02.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:02.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:02.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node block = block.getLastChild();
Node block = callNode.getLastChild();
Node block = this.compiler.getLastChild();
Node block = this.safeNameIdSupplier.getLastChild();
Node block = this.allowDecomposition.getLastChild();
Node block = this.knownConstants.getLastChild();
Node block = this.assumeStrictThis.getLastChild();
Node block = this.assumeMinimumCapture.getLastChild();
Node block = NAME_COST_ESTIMATE.getLastChild();
Node block = COMMA_COST.getLastChild();
Node block = PAREN_COST.getLastChild();
04:04:02.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:03.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:03.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:04.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:04.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:05.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:05.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:06.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:06.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:07.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:07.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:07.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:07.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:08.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:08.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:09.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:09.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:10.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:10.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:11.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:11.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:12.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode != null) {


}

04:04:12.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:12.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:04:12.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:13.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:13.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:14.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(block);
maybePrepareCall(block);
	Node block = fnNode.getLastChild();
Node block = fnNode.getLastChild();
	maybePrepareCall(block);
04:04:14.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:15.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:15.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:16.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:16.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:16.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:04:16.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:17.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:17.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===691
04:04:17.846 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }
if (fnNode != null) {


}

04:04:17.848 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:18.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:04:18.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:19.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:19.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:20.334 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 


    Node block = fnNode.getLastChild();
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

MOVE-BUGGY-STATEMENT


    Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

MOVE-BUGGY-STATEMENT


    Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

MOVE-BUGGY-STATEMENT


    Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

MOVE-BUGGY-STATEMENT


    Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

MOVE-BUGGY-STATEMENT


    Node block = fnNode.getLastChild();


    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();

    // Functions called via 'call' and 'apply' have a this-object as
    // the first parameter, but this is not part of the called function's
    // parameter list.
    if (!callNode.getFirstChild().isName()) {
      if (NodeUtil.isFunctionObjectCall(callNode)) {
        // TODO(johnlenz): Support replace this with a value.
        if (cArg == null || !cArg.isThis()) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      } else {
        // ".apply" call should be filtered before this.
        Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      }
    }

    // FUNCTION NODE -> LP NODE: [ ARG1, ARG2, ... ]
    Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
    while (cArg != null || fnParam != null) {
      // For each named parameter check if a mutable argument use more than one.
      if (fnParam != null) {
        if (cArg != null) {

          // Check for arguments that are evaluated more than once.
          // Note: Unlike block inlining, there it is not possible that a
          // parameter reference will be in a loop.
          if (NodeUtil.mayEffectMutableState(cArg, compiler)
              && NodeUtil.getNameReferenceCount(
                  block, fnParam.getString()) > 1) {
            return CanInlineResult.NO;
          }
        }

        // Move to the next name.
        fnParam = fnParam.getNext();
      }

      // For every call argument check for side-effects, even if there
      // isn't a named parameter to match.
      if (cArg != null) {
        if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
          return CanInlineResult.NO;
        }
        cArg = cArg.getNext();
      }
    }

    return CanInlineResult.YES;
	if (!isDirectCallNodeReplacementPossible(fnNode)) {
      return CanInlineResult.NO;
    }

MOVE-BUGGY-STATEMENT
04:04:20.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:21.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:21.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:21.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:21.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:22.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:22.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:23.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:23.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:24.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:24.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:25.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:04:25.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:26.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:26.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===208
04:04:26.114 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return canInlineReferenceDirectly(callNode, fnNode);
return canInlineReferenceDirectly(t, fnNode);
return canInlineReferenceDirectly(needAliases, fnNode);
return canInlineReferenceDirectly(mode, fnNode);
return canInlineReferenceDirectly(referencesThis, fnNode);
return canInlineReferenceDirectly(containsFunctions, fnNode);
return canInlineReferenceDirectly(this.compiler, fnNode);
return canInlineReferenceDirectly(this.safeNameIdSupplier, fnNode);
return canInlineReferenceDirectly(this.allowDecomposition, fnNode);
return canInlineReferenceDirectly(this.knownConstants, fnNode);
return canInlineReferenceDirectly(this.assumeStrictThis, fnNode);
return canInlineReferenceDirectly(this.assumeMinimumCapture, fnNode);
return canInlineReferenceDirectly(NAME_COST_ESTIMATE, fnNode);
return canInlineReferenceDirectly(COMMA_COST, fnNode);
return canInlineReferenceDirectly(PAREN_COST, fnNode);
return canInlineReferenceDirectly( fnNode);
return canInlineReferenceDirectly(t, callNode, fnNode);
return canInlineReferenceDirectly(needAliases, callNode, fnNode);
return canInlineReferenceDirectly(mode, callNode, fnNode);
return canInlineReferenceDirectly(referencesThis, callNode, fnNode);
return canInlineReferenceDirectly(containsFunctions, callNode, fnNode);
return canInlineReferenceDirectly(this.compiler, callNode, fnNode);
return canInlineReferenceDirectly(this.safeNameIdSupplier, callNode, fnNode);
return canInlineReferenceDirectly(this.allowDecomposition, callNode, fnNode);
return canInlineReferenceDirectly(this.knownConstants, callNode, fnNode);
return canInlineReferenceDirectly(this.assumeStrictThis, callNode, fnNode);
return canInlineReferenceDirectly(this.assumeMinimumCapture, callNode, fnNode);
return canInlineReferenceDirectly(NAME_COST_ESTIMATE, callNode, fnNode);
return canInlineReferenceDirectly(COMMA_COST, callNode, fnNode);
return canInlineReferenceDirectly(PAREN_COST, callNode, fnNode);
return canInlineReferenceDirectly(callNode, t);
return canInlineReferenceDirectly(callNode, needAliases);
return canInlineReferenceDirectly(callNode, mode);
return canInlineReferenceDirectly(callNode, referencesThis);
return canInlineReferenceDirectly(callNode, containsFunctions);
return canInlineReferenceDirectly(callNode, this.compiler);
return canInlineReferenceDirectly(callNode, this.safeNameIdSupplier);
return canInlineReferenceDirectly(callNode, this.allowDecomposition);
return canInlineReferenceDirectly(callNode, this.knownConstants);
return canInlineReferenceDirectly(callNode, this.assumeStrictThis);
return canInlineReferenceDirectly(callNode, this.assumeMinimumCapture);
return canInlineReferenceDirectly(callNode, NAME_COST_ESTIMATE);
return canInlineReferenceDirectly(callNode, COMMA_COST);
return canInlineReferenceDirectly(callNode, PAREN_COST);
return canInlineReferenceDirectly(callNode, );
return canInlineReferenceDirectly(callNode, t, fnNode);
return canInlineReferenceDirectly(callNode, needAliases, fnNode);
return canInlineReferenceDirectly(callNode, mode, fnNode);
return canInlineReferenceDirectly(callNode, referencesThis, fnNode);
return canInlineReferenceDirectly(callNode, containsFunctions, fnNode);
return canInlineReferenceDirectly(callNode, this.compiler, fnNode);
return canInlineReferenceDirectly(callNode, this.safeNameIdSupplier, fnNode);
return canInlineReferenceDirectly(callNode, this.allowDecomposition, fnNode);
return canInlineReferenceDirectly(callNode, this.knownConstants, fnNode);
return canInlineReferenceDirectly(callNode, this.assumeStrictThis, fnNode);
return canInlineReferenceDirectly(callNode, this.assumeMinimumCapture, fnNode);
return canInlineReferenceDirectly(callNode, NAME_COST_ESTIMATE, fnNode);
return canInlineReferenceDirectly(callNode, COMMA_COST, fnNode);
return canInlineReferenceDirectly(callNode, PAREN_COST, fnNode);
return canInlineReferenceDirectly(callNode, fnNode, t);
return canInlineReferenceDirectly(callNode, fnNode, needAliases);
return canInlineReferenceDirectly(callNode, fnNode, mode);
return canInlineReferenceDirectly(callNode, fnNode, referencesThis);
return canInlineReferenceDirectly(callNode, fnNode, containsFunctions);
return canInlineReferenceDirectly(callNode, fnNode, this.compiler);
return canInlineReferenceDirectly(callNode, fnNode, this.safeNameIdSupplier);
return canInlineReferenceDirectly(callNode, fnNode, this.allowDecomposition);
return canInlineReferenceDirectly(callNode, fnNode, this.knownConstants);
return canInlineReferenceDirectly(callNode, fnNode, this.assumeStrictThis);
return canInlineReferenceDirectly(callNode, fnNode, this.assumeMinimumCapture);
return canInlineReferenceDirectly(callNode, fnNode, NAME_COST_ESTIMATE);
return canInlineReferenceDirectly(callNode, fnNode, COMMA_COST);
return canInlineReferenceDirectly(callNode, fnNode, PAREN_COST);
04:04:26.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:26.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:26.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:27.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:27.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:28.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:28.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:29.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:29.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:30.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:30.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:31.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:31.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:31.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:31.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:32.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:32.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:33.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:33.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:34.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:34.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:35.342 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:35.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:36.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:36.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:37.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:37.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:37.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:37.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:38.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:38.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:39.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:39.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:40.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:40.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:41.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:41.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:42.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:42.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:42.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:42.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:43.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:43.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:44.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:44.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:45.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:45.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:46.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:46.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:47.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:47.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:47.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:47.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:48.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:48.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:49.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:49.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:50.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:50.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:51.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:51.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:52.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:52.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:52.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:52.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:53.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:53.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:54.657 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:54.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:55.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:55.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:56.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:56.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:57.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:57.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:57.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:57.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:58.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:58.780 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:04:59.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:04:59.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:00.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:00.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:01.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:01.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:02.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:02.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:02.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:02.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:03.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:03.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:04.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:04.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:04.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:04.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:05.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:05.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:06.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:06.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:07.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:07.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:08.250 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:08.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:09.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:09.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:09.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:09.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:10.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:10.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:11.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:11.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:12.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:12.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:13.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:13.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:13.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:13.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:14.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:14.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:15.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:15.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:16.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:16.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:17.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:17.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:18.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:18.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:18.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:18.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:19.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:19.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:20.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:20.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:21.387 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:21.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:22.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:22.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:23.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:23.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:23.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:23.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:24.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:24.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:25.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
return inlineReturnValue(callNode, fnNode);
04:05:25.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:26.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
return getDecomposer();
04:05:26.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:27.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
return canInlineReferenceDirectly(true, callNode, fnNode);
return canInlineReferenceDirectly(false, callNode, fnNode);
return canInlineReferenceDirectly(callNode, true, fnNode);
return canInlineReferenceDirectly(callNode, false, fnNode);
return canInlineReferenceDirectly(callNode, fnNode, true);
return canInlineReferenceDirectly(callNode, fnNode, false);
04:05:27.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:28.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:28.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:28.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:28.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:29.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:29.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:30.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:30.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:31.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:31.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:32.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode != null) {


}

if (fnNode != null) {


}

04:05:32.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:33.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:33.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:33.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode == null) {
    return null;
}

if (callNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callNode);
}

if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:05:33.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:34.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:34.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:35.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:35.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:36.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:36.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:37.236 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:05:37.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:38.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:38.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===796
04:05:38.097 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return true;
return false;
04:05:38.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:38.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:05:38.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:39.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:39.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===555
04:05:39.754 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return true;
return false;
04:05:39.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:40.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:05:40.577 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:41.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:41.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===282
04:05:41.466 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
newExpression = safeReturnNode.removeFirstChild();
newExpression = safeReturnNode.removeFirstChild(true);
newExpression = safeReturnNode.removeFirstChild(false);
04:05:41.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:42.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:42.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:43.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
newExpression = safeReturnNode.getFirstChild();
newExpression = safeReturnNode.getLastChild();
newExpression = safeReturnNode.getNext();
newExpression = safeReturnNode.getLastSibling();
newExpression = safeReturnNode.getParent();
newExpression = safeReturnNode.detachFromParent();
newExpression = safeReturnNode.removeChildren();
newExpression = safeReturnNode.cloneNode();
newExpression = safeReturnNode.cloneTree();
04:05:43.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:43.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:43.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:44.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:44.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:45.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:45.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:46.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:46.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:47.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:47.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:48.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:48.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:48.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:48.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:49.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:49.733 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:50.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (safeReturnNode != null) {


}

04:05:50.576 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:51.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (safeReturnNode == null) {
    return null;
}

if (safeReturnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + safeReturnNode);
}

04:05:51.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:52.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:52.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:53.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(newExpression);
maybePrepareCall(newExpression);
	newExpression = safeReturnNode.removeFirstChild();
newExpression = safeReturnNode.removeFirstChild();
	maybePrepareCall(newExpression);
04:05:53.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:53.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:53.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:54.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:54.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:55.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
newExpression = safeReturnNode.removeFirstChild();
	Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      
null
newExpression = safeReturnNode.removeFirstChild();
	newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      
null
newExpression = safeReturnNode.removeFirstChild();
	Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      
null
newExpression = safeReturnNode.removeFirstChild();
	Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      
null
newExpression = safeReturnNode.removeFirstChild();
	Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      
null
newExpression = safeReturnNode.removeFirstChild();
	Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      
null
newExpression = safeReturnNode.removeFirstChild();
	Preconditions.checkArgument(safeReturnNode == inlineResult);
      
null
04:05:55.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:56.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:56.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:57.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:57.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:57.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:57.997 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:58.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:58.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:05:59.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:05:59.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:00.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:00.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:01.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:06:01.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:02.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:02.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===281
04:06:02.149 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkArgument(safeReturnNode == inlineResult);
Preconditions.checkArgument(true, safeReturnNode == inlineResult);
Preconditions.checkArgument(false, safeReturnNode == inlineResult);
Preconditions.checkArgument(safeReturnNode == inlineResult, true);
Preconditions.checkArgument(safeReturnNode == inlineResult, false);
04:06:02.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:02.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:02.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:03.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:03.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:04.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:04.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:05.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkArgument(inlineResult, safeReturnNode == inlineResult);
Preconditions.checkArgument(safeReturnNode, safeReturnNode == inlineResult);
Preconditions.checkArgument(returnNode, safeReturnNode == inlineResult);
Preconditions.checkArgument(srcLocation, safeReturnNode == inlineResult);
Preconditions.checkArgument(newExpression, safeReturnNode == inlineResult);
Preconditions.checkArgument(argMap, safeReturnNode == inlineResult);
Preconditions.checkArgument(callParentNode, safeReturnNode == inlineResult);
Preconditions.checkArgument(block, safeReturnNode == inlineResult);
Preconditions.checkArgument(callNode, safeReturnNode == inlineResult);
Preconditions.checkArgument(fnNode, safeReturnNode == inlineResult);
Preconditions.checkArgument(this.compiler, safeReturnNode == inlineResult);
Preconditions.checkArgument(this.safeNameIdSupplier, safeReturnNode == inlineResult);
Preconditions.checkArgument(this.allowDecomposition, safeReturnNode == inlineResult);
Preconditions.checkArgument(this.knownConstants, safeReturnNode == inlineResult);
Preconditions.checkArgument(this.assumeStrictThis, safeReturnNode == inlineResult);
Preconditions.checkArgument(this.assumeMinimumCapture, safeReturnNode == inlineResult);
Preconditions.checkArgument(NAME_COST_ESTIMATE, safeReturnNode == inlineResult);
Preconditions.checkArgument(COMMA_COST, safeReturnNode == inlineResult);
Preconditions.checkArgument(PAREN_COST, safeReturnNode == inlineResult);
Preconditions.checkArgument(safeReturnNode == inlineResult, inlineResult);
Preconditions.checkArgument(safeReturnNode == inlineResult, safeReturnNode);
Preconditions.checkArgument(safeReturnNode == inlineResult, returnNode);
Preconditions.checkArgument(safeReturnNode == inlineResult, srcLocation);
Preconditions.checkArgument(safeReturnNode == inlineResult, newExpression);
Preconditions.checkArgument(safeReturnNode == inlineResult, argMap);
Preconditions.checkArgument(safeReturnNode == inlineResult, callParentNode);
Preconditions.checkArgument(safeReturnNode == inlineResult, block);
Preconditions.checkArgument(safeReturnNode == inlineResult, callNode);
Preconditions.checkArgument(safeReturnNode == inlineResult, fnNode);
Preconditions.checkArgument(safeReturnNode == inlineResult, this.compiler);
Preconditions.checkArgument(safeReturnNode == inlineResult, this.safeNameIdSupplier);
Preconditions.checkArgument(safeReturnNode == inlineResult, this.allowDecomposition);
Preconditions.checkArgument(safeReturnNode == inlineResult, this.knownConstants);
Preconditions.checkArgument(safeReturnNode == inlineResult, this.assumeStrictThis);
Preconditions.checkArgument(safeReturnNode == inlineResult, this.assumeMinimumCapture);
Preconditions.checkArgument(safeReturnNode == inlineResult, NAME_COST_ESTIMATE);
Preconditions.checkArgument(safeReturnNode == inlineResult, COMMA_COST);
Preconditions.checkArgument(safeReturnNode == inlineResult, PAREN_COST);
04:06:05.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:06.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:06.256 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:07.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:07.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:07.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:07.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:08.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:08.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:09.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:09.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:10.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:10.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:11.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:11.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:12.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:12.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:13.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:13.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:13.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:13.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:14.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:14.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:15.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:15.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:16.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:16.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:17.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:17.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:18.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:18.108 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:18.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:18.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:19.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:19.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:20.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:20.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:21.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:21.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:22.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:22.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:23.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:23.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:23.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:23.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:24.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:24.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:25.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:25.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:26.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:26.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:27.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:27.251 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:28.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:28.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:28.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:28.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:29.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:29.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:30.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:30.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:31.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:31.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:32.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:32.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:33.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:33.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:33.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:33.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:34.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:34.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:35.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:35.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:36.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:36.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:37.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (safeReturnNode != null) {


}

if (inlineResult != null) {


}

04:06:37.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:38.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:38.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:38.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (safeReturnNode == null) {
    return null;
}

if (safeReturnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + safeReturnNode);
}

if (inlineResult == null) {
    return null;
}

if (inlineResult == null) {
    throw new IllegalArgumentException("Empty variable: " + inlineResult);
}

04:06:38.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:39.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:39.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:40.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:40.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:41.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:41.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:42.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkArgument(safeReturnNode == inlineResult);
	Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      
null
Preconditions.checkArgument(safeReturnNode == inlineResult);
	newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      
null
Preconditions.checkArgument(safeReturnNode == inlineResult);
	Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      
null
Preconditions.checkArgument(safeReturnNode == inlineResult);
	Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      
null
Preconditions.checkArgument(safeReturnNode == inlineResult);
	Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      
null
Preconditions.checkArgument(safeReturnNode == inlineResult);
	Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      
null

      newExpression = safeReturnNode.removeFirstChild();
	Preconditions.checkArgument(safeReturnNode == inlineResult);

MOVE-BUGGY-STATEMENT
04:06:42.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:42.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:42.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:43.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:43.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:44.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:44.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:45.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:45.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:46.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:46.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:47.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:47.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:47.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:06:47.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:48.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:48.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===279
04:06:48.726 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          inlineResult, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          returnNode, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          srcLocation, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          newExpression, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          callParentNode, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          block, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          callNode, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          fnNode, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          this.compiler, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          this.safeNameIdSupplier, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          this.allowDecomposition, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          this.knownConstants, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          this.assumeStrictThis, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          this.assumeMinimumCapture, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          NAME_COST_ESTIMATE, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          COMMA_COST, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          PAREN_COST, null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, inlineResult, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, returnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, srcLocation, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, newExpression, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, callParentNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, block, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, callNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, fnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.compiler, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.safeNameIdSupplier, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.allowDecomposition, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.knownConstants, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.assumeStrictThis, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.assumeMinimumCapture, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, NAME_COST_ESTIMATE, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, COMMA_COST, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, PAREN_COST, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null,  null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, inlineResult, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, returnNode, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, srcLocation, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, newExpression, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, callParentNode, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, block, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, callNode, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, fnNode, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.compiler, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.safeNameIdSupplier, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.allowDecomposition, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.knownConstants, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.assumeStrictThis, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, this.assumeMinimumCapture, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, NAME_COST_ESTIMATE, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, COMMA_COST, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, PAREN_COST, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, inlineResult, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, returnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, srcLocation, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, newExpression, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, callParentNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, block, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, callNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, fnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, this.compiler, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, this.safeNameIdSupplier, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, this.allowDecomposition, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, this.knownConstants, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, this.assumeStrictThis, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, this.assumeMinimumCapture, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, NAME_COST_ESTIMATE, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, COMMA_COST, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, PAREN_COST, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, inlineResult);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, returnNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, srcLocation);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, newExpression);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, callParentNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, block);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, callNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, fnNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.compiler);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.safeNameIdSupplier);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.allowDecomposition);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.knownConstants);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.assumeStrictThis);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.assumeMinimumCapture);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, NAME_COST_ESTIMATE);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, COMMA_COST);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, PAREN_COST);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, );
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, inlineResult, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, returnNode, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, srcLocation, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, newExpression, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, callParentNode, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, block, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, callNode, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, fnNode, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.compiler, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.safeNameIdSupplier, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.allowDecomposition, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.knownConstants, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.assumeStrictThis, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, this.assumeMinimumCapture, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, NAME_COST_ESTIMATE, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, COMMA_COST, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, PAREN_COST, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, inlineResult);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, returnNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, srcLocation);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, newExpression);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, callParentNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, block);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, callNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, fnNode);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, this.compiler);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, this.safeNameIdSupplier);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, this.allowDecomposition);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, this.knownConstants);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, this.assumeStrictThis);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, this.assumeMinimumCapture);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, NAME_COST_ESTIMATE);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, COMMA_COST);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap, PAREN_COST);
04:06:48.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:49.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:49.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:50.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:50.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:51.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:51.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:52.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:52.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:52.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:52.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:53.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:53.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:54.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:54.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:55.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:55.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:56.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:56.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:57.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:57.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:58.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:58.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:58.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:58.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:06:59.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:06:59.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:00.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:00.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:01.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:01.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:02.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:02.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:03.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:03.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:03.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:03.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:04.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:04.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:05.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:05.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:06.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:06.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:07.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:07.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:07.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:07.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:08.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:08.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:09.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:09.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:10.504 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:10.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:11.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:11.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:12.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:12.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:13.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:13.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:13.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:13.884 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:14.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:14.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:15.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:15.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:16.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:16.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:17.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:17.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:18.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:18.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:19.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:19.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:20.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:20.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:20.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:20.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:21.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:21.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:22.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:22.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:23.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:23.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:24.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:24.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:25.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:25.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:26.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:26.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:27.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:27.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:28.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:28.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:28.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:28.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:29.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:29.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:30.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:30.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:31.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:31.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:32.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:32.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:33.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:33.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:34.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:34.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:35.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:35.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:35.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:35.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:36.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:36.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:37.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:37.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:38.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:38.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:39.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:39.458 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:40.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:40.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:41.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:41.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:42.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:42.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:42.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:42.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:43.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:43.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:44.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:44.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:45.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:45.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:46.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:46.274 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:47.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:47.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:47.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:47.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:48.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:48.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:49.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:49.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:50.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:50.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:51.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:51.237 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:52.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:52.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:52.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:52.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:53.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:53.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:54.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:54.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:55.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:55.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:56.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:56.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:57.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:57.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:57.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:57.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:58.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:58.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:07:59.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:07:59.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:00.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:00.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:01.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:01.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:02.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:02.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:02.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:02.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:03.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:03.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:04.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:04.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:04.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:04.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:05.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:05.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:06.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:06.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:07.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:07.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:08.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:08.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:09.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:09.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:10.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:10.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:10.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:10.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:11.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:11.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:12.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:12.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:13.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:13.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:14.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:14.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:15.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:15.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:15.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:15.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:16.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:16.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:17.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:17.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:18.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:18.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:19.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:19.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:20.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:20.390 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:21.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:21.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:22.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:22.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:23.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:23.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:23.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:23.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:24.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:24.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:25.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:25.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:26.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:26.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:27.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:27.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:28.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:28.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:29.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:29.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:29.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:29.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:30.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:30.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:31.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node inlineResult = inlineResult.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = safeReturnNode.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = returnNode.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = srcLocation.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = newExpression.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = argMap.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = callParentNode.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = block.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = callNode.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = fnNode.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = this.compiler.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = this.safeNameIdSupplier.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = this.allowDecomposition.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = this.knownConstants.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = this.assumeStrictThis.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = this.assumeMinimumCapture.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = NAME_COST_ESTIMATE.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = COMMA_COST.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = PAREN_COST.inject(
          null, safeReturnNode, null, argMap);
04:08:31.634 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:32.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:32.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:33.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:33.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:34.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:34.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:35.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:35.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:35.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:35.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:36.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:36.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:37.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:37.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:38.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:38.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:39.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:39.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:39.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:39.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:40.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:40.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:41.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:41.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:42.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:42.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:43.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:43.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:44.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:44.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:44.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:44.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:45.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:45.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:46.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:46.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:47.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (safeReturnNode != null) {


}

if (argMap != null) {


}

04:08:47.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:48.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:48.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:49.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (safeReturnNode == null) {
    return null;
}

if (safeReturnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + safeReturnNode);
}

if (argMap == null) {
    return null;
}

if (argMap == null) {
    throw new IllegalArgumentException("Empty variable: " + argMap);
}

04:08:49.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:50.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:50.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:50.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:50.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:51.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:51.676 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:52.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(inlineResult);
maybePrepareCall(inlineResult);
	Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
	maybePrepareCall(inlineResult);
04:08:52.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:53.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:53.384 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:54.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:54.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:55.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:08:55.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:55.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:55.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===278
04:08:55.930 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node safeReturnNode = returnNode.cloneTree();
Node safeReturnNode = returnNode.getFirstChild();
Node safeReturnNode = returnNode.getLastChild();
Node safeReturnNode = returnNode.getNext();
Node safeReturnNode = returnNode.getLastSibling();
Node safeReturnNode = returnNode.getParent();
Node safeReturnNode = returnNode.detachFromParent();
Node safeReturnNode = returnNode.removeFirstChild();
Node safeReturnNode = returnNode.removeChildren();
Node safeReturnNode = returnNode.cloneNode();
04:08:55.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:56.793 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:56.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:57.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:57.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:58.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:58.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:08:59.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:08:59.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:00.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:00.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:00.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:00.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:01.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:01.724 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:02.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:02.534 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:03.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node safeReturnNode = returnNode.cloneTree(safeReturnNode);
Node safeReturnNode = returnNode.cloneTree(srcLocation);
Node safeReturnNode = returnNode.cloneTree(newExpression);
Node safeReturnNode = returnNode.cloneTree(argMap);
Node safeReturnNode = returnNode.cloneTree(callParentNode);
Node safeReturnNode = returnNode.cloneTree(block);
Node safeReturnNode = returnNode.cloneTree(callNode);
Node safeReturnNode = returnNode.cloneTree(fnNode);
Node safeReturnNode = returnNode.cloneTree(this.compiler);
Node safeReturnNode = returnNode.cloneTree(this.safeNameIdSupplier);
Node safeReturnNode = returnNode.cloneTree(this.allowDecomposition);
Node safeReturnNode = returnNode.cloneTree(this.knownConstants);
Node safeReturnNode = returnNode.cloneTree(this.assumeStrictThis);
Node safeReturnNode = returnNode.cloneTree(this.assumeMinimumCapture);
Node safeReturnNode = returnNode.cloneTree(NAME_COST_ESTIMATE);
Node safeReturnNode = returnNode.cloneTree(COMMA_COST);
Node safeReturnNode = returnNode.cloneTree(PAREN_COST);
04:09:03.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:04.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:04.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:05.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:05.045 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:05.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:05.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:06.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:06.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:07.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:07.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:08.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:08.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:09.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:09.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:10.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:10.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:11.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:11.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:11.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:11.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:12.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:12.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:13.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:13.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:14.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:14.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:15.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:15.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:16.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:16.094 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:16.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:16.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:17.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node safeReturnNode = safeReturnNode.cloneTree();
Node safeReturnNode = srcLocation.cloneTree();
Node safeReturnNode = newExpression.cloneTree();
Node safeReturnNode = argMap.cloneTree();
Node safeReturnNode = callParentNode.cloneTree();
Node safeReturnNode = block.cloneTree();
Node safeReturnNode = callNode.cloneTree();
Node safeReturnNode = fnNode.cloneTree();
Node safeReturnNode = this.compiler.cloneTree();
Node safeReturnNode = this.safeNameIdSupplier.cloneTree();
Node safeReturnNode = this.allowDecomposition.cloneTree();
Node safeReturnNode = this.knownConstants.cloneTree();
Node safeReturnNode = this.assumeStrictThis.cloneTree();
Node safeReturnNode = this.assumeMinimumCapture.cloneTree();
Node safeReturnNode = NAME_COST_ESTIMATE.cloneTree();
Node safeReturnNode = COMMA_COST.cloneTree();
Node safeReturnNode = PAREN_COST.cloneTree();
04:09:17.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:18.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:18.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:19.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:19.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:20.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:20.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:21.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:21.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:21.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:21.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:22.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:22.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:23.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:23.587 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:24.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:24.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:25.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:25.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:26.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:26.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:26.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:26.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:27.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:27.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:28.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:28.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:29.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:29.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:30.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:30.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:31.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:31.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:32.000 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (returnNode != null) {


}

04:09:32.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:32.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (returnNode == null) {
    return null;
}

if (returnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + returnNode);
}

04:09:32.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:33.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:33.675 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:34.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(safeReturnNode);
maybePrepareCall(safeReturnNode);
	Node safeReturnNode = returnNode.cloneTree();
Node safeReturnNode = returnNode.cloneTree();
	maybePrepareCall(safeReturnNode);
04:09:34.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:35.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:35.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:36.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:36.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:37.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:09:37.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:37.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:37.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===275
04:09:37.861 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkArgument(returnNode.isReturn());
Preconditions.checkArgument(true, returnNode.isReturn());
Preconditions.checkArgument(false, returnNode.isReturn());
Preconditions.checkArgument(returnNode.isReturn(), true);
Preconditions.checkArgument(returnNode.isReturn(), false);
04:09:37.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:38.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:38.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:39.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:39.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:40.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:40.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:41.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkArgument(returnNode, returnNode.isReturn());
Preconditions.checkArgument(srcLocation, returnNode.isReturn());
Preconditions.checkArgument(newExpression, returnNode.isReturn());
Preconditions.checkArgument(argMap, returnNode.isReturn());
Preconditions.checkArgument(callParentNode, returnNode.isReturn());
Preconditions.checkArgument(block, returnNode.isReturn());
Preconditions.checkArgument(callNode, returnNode.isReturn());
Preconditions.checkArgument(fnNode, returnNode.isReturn());
Preconditions.checkArgument(this.compiler, returnNode.isReturn());
Preconditions.checkArgument(this.safeNameIdSupplier, returnNode.isReturn());
Preconditions.checkArgument(this.allowDecomposition, returnNode.isReturn());
Preconditions.checkArgument(this.knownConstants, returnNode.isReturn());
Preconditions.checkArgument(this.assumeStrictThis, returnNode.isReturn());
Preconditions.checkArgument(this.assumeMinimumCapture, returnNode.isReturn());
Preconditions.checkArgument(NAME_COST_ESTIMATE, returnNode.isReturn());
Preconditions.checkArgument(COMMA_COST, returnNode.isReturn());
Preconditions.checkArgument(PAREN_COST, returnNode.isReturn());
Preconditions.checkArgument(returnNode.isReturn(), returnNode);
Preconditions.checkArgument(returnNode.isReturn(), srcLocation);
Preconditions.checkArgument(returnNode.isReturn(), newExpression);
Preconditions.checkArgument(returnNode.isReturn(), argMap);
Preconditions.checkArgument(returnNode.isReturn(), callParentNode);
Preconditions.checkArgument(returnNode.isReturn(), block);
Preconditions.checkArgument(returnNode.isReturn(), callNode);
Preconditions.checkArgument(returnNode.isReturn(), fnNode);
Preconditions.checkArgument(returnNode.isReturn(), this.compiler);
Preconditions.checkArgument(returnNode.isReturn(), this.safeNameIdSupplier);
Preconditions.checkArgument(returnNode.isReturn(), this.allowDecomposition);
Preconditions.checkArgument(returnNode.isReturn(), this.knownConstants);
Preconditions.checkArgument(returnNode.isReturn(), this.assumeStrictThis);
Preconditions.checkArgument(returnNode.isReturn(), this.assumeMinimumCapture);
Preconditions.checkArgument(returnNode.isReturn(), NAME_COST_ESTIMATE);
Preconditions.checkArgument(returnNode.isReturn(), COMMA_COST);
Preconditions.checkArgument(returnNode.isReturn(), PAREN_COST);
04:09:41.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:42.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:42.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:42.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:42.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:43.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:43.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:44.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:44.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:45.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:45.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:46.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:46.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:46.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:46.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:47.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:47.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:48.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:48.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:49.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:49.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:50.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:50.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:51.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:51.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:51.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:51.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:52.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:52.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:53.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:53.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:54.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:54.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:55.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:55.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:56.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:56.075 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:56.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:56.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:57.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:57.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:58.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:58.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:09:59.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:09:59.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:00.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:00.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:01.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:01.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:01.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:01.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:02.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:02.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:03.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:03.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:04.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:04.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:05.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:05.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:05.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:05.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:06.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:06.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:07.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:07.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:08.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:08.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:09.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (returnNode != null) {


}

04:10:09.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:10.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (returnNode == null) {
    return null;
}

if (returnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + returnNode);
}

04:10:10.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:10.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:10.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:11.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkArgument(returnNode.isReturn());
	Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      
null
Preconditions.checkArgument(returnNode.isReturn());
	newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      
null
Preconditions.checkArgument(returnNode.isReturn());
	Node returnNode = block.getFirstChild();
      
null


      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
	Preconditions.checkArgument(returnNode.isReturn());

MOVE-BUGGY-STATEMENT


      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
	Preconditions.checkArgument(returnNode.isReturn());

MOVE-BUGGY-STATEMENT


      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
	Preconditions.checkArgument(returnNode.isReturn());

MOVE-BUGGY-STATEMENT


      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
	Preconditions.checkArgument(returnNode.isReturn());

MOVE-BUGGY-STATEMENT
04:10:11.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:12.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:12.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:13.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:13.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:14.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:14.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:15.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:15.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:15.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:15.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:16.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:16.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:17.709 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:10:17.710 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:18.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:18.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===274
04:10:18.578 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node returnNode = block.getFirstChild();
Node returnNode = block.getLastChild();
Node returnNode = block.getNext();
Node returnNode = block.getLastSibling();
Node returnNode = block.getParent();
Node returnNode = block.detachFromParent();
Node returnNode = block.removeFirstChild();
Node returnNode = block.removeChildren();
Node returnNode = block.cloneNode();
Node returnNode = block.cloneTree();
04:10:18.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:19.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:19.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:20.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:20.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:21.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:21.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:21.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:21.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:22.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:22.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:23.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:23.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:24.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:24.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:25.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:25.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:26.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node returnNode = block.getFirstChild(returnNode);
Node returnNode = block.getFirstChild(srcLocation);
Node returnNode = block.getFirstChild(newExpression);
Node returnNode = block.getFirstChild(argMap);
Node returnNode = block.getFirstChild(callParentNode);
Node returnNode = block.getFirstChild(callNode);
Node returnNode = block.getFirstChild(fnNode);
Node returnNode = block.getFirstChild(this.compiler);
Node returnNode = block.getFirstChild(this.safeNameIdSupplier);
Node returnNode = block.getFirstChild(this.allowDecomposition);
Node returnNode = block.getFirstChild(this.knownConstants);
Node returnNode = block.getFirstChild(this.assumeStrictThis);
Node returnNode = block.getFirstChild(this.assumeMinimumCapture);
Node returnNode = block.getFirstChild(NAME_COST_ESTIMATE);
Node returnNode = block.getFirstChild(COMMA_COST);
Node returnNode = block.getFirstChild(PAREN_COST);
04:10:26.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:27.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:27.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:27.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:27.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:28.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:28.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:29.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:29.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:30.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:30.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:31.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:31.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:32.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:32.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:33.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:33.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:33.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:33.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:34.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:34.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:35.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:35.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:36.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:36.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:37.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:37.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:38.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:38.093 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:38.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:38.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:39.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node returnNode = returnNode.getFirstChild();
Node returnNode = srcLocation.getFirstChild();
Node returnNode = newExpression.getFirstChild();
Node returnNode = argMap.getFirstChild();
Node returnNode = callParentNode.getFirstChild();
Node returnNode = callNode.getFirstChild();
Node returnNode = fnNode.getFirstChild();
Node returnNode = this.compiler.getFirstChild();
Node returnNode = this.safeNameIdSupplier.getFirstChild();
Node returnNode = this.allowDecomposition.getFirstChild();
Node returnNode = this.knownConstants.getFirstChild();
Node returnNode = this.assumeStrictThis.getFirstChild();
Node returnNode = this.assumeMinimumCapture.getFirstChild();
Node returnNode = NAME_COST_ESTIMATE.getFirstChild();
Node returnNode = COMMA_COST.getFirstChild();
Node returnNode = PAREN_COST.getFirstChild();
04:10:39.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:40.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:40.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:41.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:41.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:42.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:42.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:43.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:43.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:43.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:43.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:44.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:44.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:45.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:45.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:46.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:46.379 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:47.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:47.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:48.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:48.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:48.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:48.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:49.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:49.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:50.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:50.508 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:51.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:51.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:52.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:52.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:52.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block != null) {


}

04:10:52.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:53.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block == null) {
    return null;
}

if (block == null) {
    throw new IllegalArgumentException("Empty variable: " + block);
}

04:10:53.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:54.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:54.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:55.462 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(returnNode);
maybePrepareCall(returnNode);
	Node returnNode = block.getFirstChild();
Node returnNode = block.getFirstChild();
	maybePrepareCall(returnNode);
04:10:55.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:56.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:56.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:57.145 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:57.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:57.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:10:57.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:58.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:10:58.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===499
04:10:58.828 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (Node n : NodeUtil.getFunctionParameters(fnNode).children()) {
      set.add(n.getString());
    }
if (fnNode != null) {


}

04:10:58.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:10:59.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:10:59.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:00.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:00.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:01.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
for (Node n : NodeUtil.getFunctionParameters(fnNode).children()) {
      set.add(n.getString());
    }
	Set<String> set = Sets.newHashSet();
    
null

    return set;
	for (Node n : NodeUtil.getFunctionParameters(fnNode).children()) {
      set.add(n.getString());
    }

MOVE-BUGGY-STATEMENT
04:11:01.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:02.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:02.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:02.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:11:02.823 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:03.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:03.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===498
04:11:03.615 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
set.add(n.getString());
set.add(true, n.getString());
set.add(false, n.getString());
set.add(n.getString(), true);
set.add(n.getString(), false);
04:11:03.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:04.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:04.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:05.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:05.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:05.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:05.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:06.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
set.add(n, n.getString());
set.add(fnNode, n.getString());
set.add(THIS_MARKER, n.getString());
set.add(n.getString(), n);
set.add(n.getString(), fnNode);
set.add(n.getString(), THIS_MARKER);
04:11:06.773 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:07.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:07.548 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:08.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:08.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:09.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:09.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:09.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:09.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:10.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:10.691 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:11.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (set != null) {


}

if (n != null) {


}

04:11:11.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:12.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:12.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:13.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (set == null) {
    return null;
}

if (set == null) {
    throw new IllegalArgumentException("Empty variable: " + set);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

04:11:13.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:13.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:13.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:14.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:14.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:15.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:15.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:16.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:11:16.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:17.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:17.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===286
04:11:17.154 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return newExpression;
if (newExpression != null) {


}

04:11:17.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:17.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (newExpression == null) {
    return null;
}

if (newExpression == null) {
    throw new IllegalArgumentException("Empty variable: " + newExpression);
}

04:11:17.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:18.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:18.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:19.668 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(newExpression);
maybePrepareCall(newExpression);
	return newExpression;
return newExpression;
	maybePrepareCall(newExpression);
04:11:19.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:20.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:20.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:21.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:21.335 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:22.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:11:22.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:23.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:23.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===285
04:11:23.051 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
callParentNode.replaceChild(callNode, newExpression);
callParentNode.replaceChild(true, callNode, newExpression);
callParentNode.replaceChild(false, callNode, newExpression);
callParentNode.replaceChild(callNode, true, newExpression);
callParentNode.replaceChild(callNode, false, newExpression);
callParentNode.replaceChild(callNode, newExpression, true);
callParentNode.replaceChild(callNode, newExpression, false);
04:11:23.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:23.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:23.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:24.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:24.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:25.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:25.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:26.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:26.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:27.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:27.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:28.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
callParentNode.replaceChild(argMap, newExpression);
callParentNode.replaceChild(block, newExpression);
callParentNode.replaceChild(fnNode, newExpression);
callParentNode.replaceChild(this.compiler, newExpression);
callParentNode.replaceChild(this.safeNameIdSupplier, newExpression);
callParentNode.replaceChild(this.allowDecomposition, newExpression);
callParentNode.replaceChild(this.knownConstants, newExpression);
callParentNode.replaceChild(this.assumeStrictThis, newExpression);
callParentNode.replaceChild(this.assumeMinimumCapture, newExpression);
callParentNode.replaceChild(NAME_COST_ESTIMATE, newExpression);
callParentNode.replaceChild(COMMA_COST, newExpression);
callParentNode.replaceChild(PAREN_COST, newExpression);
callParentNode.replaceChild( newExpression);
callParentNode.replaceChild(argMap, callNode, newExpression);
callParentNode.replaceChild(block, callNode, newExpression);
callParentNode.replaceChild(fnNode, callNode, newExpression);
callParentNode.replaceChild(this.compiler, callNode, newExpression);
callParentNode.replaceChild(this.safeNameIdSupplier, callNode, newExpression);
callParentNode.replaceChild(this.allowDecomposition, callNode, newExpression);
callParentNode.replaceChild(this.knownConstants, callNode, newExpression);
callParentNode.replaceChild(this.assumeStrictThis, callNode, newExpression);
callParentNode.replaceChild(this.assumeMinimumCapture, callNode, newExpression);
callParentNode.replaceChild(NAME_COST_ESTIMATE, callNode, newExpression);
callParentNode.replaceChild(COMMA_COST, callNode, newExpression);
callParentNode.replaceChild(PAREN_COST, callNode, newExpression);
callParentNode.replaceChild(callNode, argMap);
callParentNode.replaceChild(callNode, block);
callParentNode.replaceChild(callNode, fnNode);
callParentNode.replaceChild(callNode, this.compiler);
callParentNode.replaceChild(callNode, this.safeNameIdSupplier);
callParentNode.replaceChild(callNode, this.allowDecomposition);
callParentNode.replaceChild(callNode, this.knownConstants);
callParentNode.replaceChild(callNode, this.assumeStrictThis);
callParentNode.replaceChild(callNode, this.assumeMinimumCapture);
callParentNode.replaceChild(callNode, NAME_COST_ESTIMATE);
callParentNode.replaceChild(callNode, COMMA_COST);
callParentNode.replaceChild(callNode, PAREN_COST);
callParentNode.replaceChild(callNode, );
callParentNode.replaceChild(callNode, argMap, newExpression);
callParentNode.replaceChild(callNode, block, newExpression);
callParentNode.replaceChild(callNode, fnNode, newExpression);
callParentNode.replaceChild(callNode, this.compiler, newExpression);
callParentNode.replaceChild(callNode, this.safeNameIdSupplier, newExpression);
callParentNode.replaceChild(callNode, this.allowDecomposition, newExpression);
callParentNode.replaceChild(callNode, this.knownConstants, newExpression);
callParentNode.replaceChild(callNode, this.assumeStrictThis, newExpression);
callParentNode.replaceChild(callNode, this.assumeMinimumCapture, newExpression);
callParentNode.replaceChild(callNode, NAME_COST_ESTIMATE, newExpression);
callParentNode.replaceChild(callNode, COMMA_COST, newExpression);
callParentNode.replaceChild(callNode, PAREN_COST, newExpression);
callParentNode.replaceChild(callNode, newExpression, argMap);
callParentNode.replaceChild(callNode, newExpression, block);
callParentNode.replaceChild(callNode, newExpression, fnNode);
callParentNode.replaceChild(callNode, newExpression, this.compiler);
callParentNode.replaceChild(callNode, newExpression, this.safeNameIdSupplier);
callParentNode.replaceChild(callNode, newExpression, this.allowDecomposition);
callParentNode.replaceChild(callNode, newExpression, this.knownConstants);
callParentNode.replaceChild(callNode, newExpression, this.assumeStrictThis);
callParentNode.replaceChild(callNode, newExpression, this.assumeMinimumCapture);
callParentNode.replaceChild(callNode, newExpression, NAME_COST_ESTIMATE);
callParentNode.replaceChild(callNode, newExpression, COMMA_COST);
callParentNode.replaceChild(callNode, newExpression, PAREN_COST);
04:11:28.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:28.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:28.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:29.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:29.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:30.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:30.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:31.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:31.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:32.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:32.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:33.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:33.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:34.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:34.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:34.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:34.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:35.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:35.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:36.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:36.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:37.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:37.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:38.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:38.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:39.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:39.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:39.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:39.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:40.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:40.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:41.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:41.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:42.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:42.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:43.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:43.279 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:44.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:44.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:44.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:44.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:45.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:45.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:46.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:46.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:47.402 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:47.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:48.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:48.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:49.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:49.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:49.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:49.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:50.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:50.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:51.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:51.533 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:52.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:52.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:53.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:53.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:54.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:54.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:54.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:54.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:55.682 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:55.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:56.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:56.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:57.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:57.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:58.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:58.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:59.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:59.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:11:59.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:11:59.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:00.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:00.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:01.115 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:01.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:01.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:01.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:02.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:02.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:03.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:03.584 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:04.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:04.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:05.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:05.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:06.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:06.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:07.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:07.017 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:07.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:07.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:08.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:08.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:09.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:09.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:10.427 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:10.428 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:11.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:11.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:12.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:12.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:13.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:13.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:13.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:13.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:14.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:14.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:15.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:15.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:16.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:16.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:17.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:17.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:18.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:18.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:18.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:18.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:19.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
callParentNode.addChildBefore(callNode, newExpression);
callParentNode.addChildAfter(callNode, newExpression);
callParentNode.addChildrenAfter(callNode, newExpression);
callParentNode.replaceChildAfter(callNode, newExpression);
04:12:19.847 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:20.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:20.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:21.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:21.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:22.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:22.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:23.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callParentNode != null) {


}

if (callNode != null) {


}

if (newExpression != null) {


}

04:12:23.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:24.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:24.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:24.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:24.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:25.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callParentNode == null) {
    return null;
}

if (callParentNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callParentNode);
}

if (callNode == null) {
    return null;
}

if (callNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callNode);
}

if (newExpression == null) {
    return null;
}

if (newExpression == null) {
    throw new IllegalArgumentException("Empty variable: " + newExpression);
}

04:12:25.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:26.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:26.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:27.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:27.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:28.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:28.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:29.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:29.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:29.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:29.945 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:30.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
callParentNode.replaceChild(callNode, newExpression);
	Node block = fnNode.getLastChild();
    Node callParentNode = callNode.getParent();

    // NOTE: As the normalize pass guarantees globals aren't being
    // shadowed and an expression can't introduce new names, there is
    // no need to check for conflicts.

    // Create an argName -> expression map, checking for side effects.
    Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);

    Node newExpression;
    if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }

    
null
callParentNode.replaceChild(callNode, newExpression);
	Node callParentNode = callNode.getParent();

    // NOTE: As the normalize pass guarantees globals aren't being
    // shadowed and an expression can't introduce new names, there is
    // no need to check for conflicts.

    // Create an argName -> expression map, checking for side effects.
    Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);

    Node newExpression;
    if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }

    
null
callParentNode.replaceChild(callNode, newExpression);
	Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);

    Node newExpression;
    if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }

    
null
callParentNode.replaceChild(callNode, newExpression);
	Node newExpression;
    if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }

    
null
callParentNode.replaceChild(callNode, newExpression);
	if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }

    
null

    return newExpression;
	callParentNode.replaceChild(callNode, newExpression);

MOVE-BUGGY-STATEMENT
04:12:30.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:31.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:31.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:32.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:32.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:33.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:33.332 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:34.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:34.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:35.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:35.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:35.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:12:35.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:36.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:36.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===270
04:12:36.668 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }
if (block != null) {


}

04:12:36.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:37.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block == null) {
    return null;
}

if (block == null) {
    throw new IllegalArgumentException("Empty variable: " + block);
}

04:12:37.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:38.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:38.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:39.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }
	Node block = fnNode.getLastChild();
    Node callParentNode = callNode.getParent();

    // NOTE: As the normalize pass guarantees globals aren't being
    // shadowed and an expression can't introduce new names, there is
    // no need to check for conflicts.

    // Create an argName -> expression map, checking for side effects.
    Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);

    Node newExpression;
    
null
if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }
	Node callParentNode = callNode.getParent();

    // NOTE: As the normalize pass guarantees globals aren't being
    // shadowed and an expression can't introduce new names, there is
    // no need to check for conflicts.

    // Create an argName -> expression map, checking for side effects.
    Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);

    Node newExpression;
    
null
if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }
	Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);

    Node newExpression;
    
null
if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }
	Node newExpression;
    
null


    callParentNode.replaceChild(callNode, newExpression);
	if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }

MOVE-BUGGY-STATEMENT


    callParentNode.replaceChild(callNode, newExpression);
    return newExpression;
	if (!block.hasChildren()) {
      Node srcLocation = block;
      newExpression = NodeUtil.newUndefinedNode(srcLocation);
    } else {
      Node returnNode = block.getFirstChild();
      Preconditions.checkArgument(returnNode.isReturn());

      // Clone the return node first.
      Node safeReturnNode = returnNode.cloneTree();
      Node inlineResult = FunctionArgumentInjector.inject(
          null, safeReturnNode, null, argMap);
      Preconditions.checkArgument(safeReturnNode == inlineResult);
      newExpression = safeReturnNode.removeFirstChild();
    }

MOVE-BUGGY-STATEMENT
04:12:39.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:39.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:39.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:40.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:40.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:41.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:41.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:42.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:42.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:43.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:43.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:44.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:12:44.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:44.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:44.946 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===265
04:12:44.982 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            argMap, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            callParentNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            block, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.compiler, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.safeNameIdSupplier, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.allowDecomposition, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.knownConstants, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.assumeStrictThis, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.assumeMinimumCapture, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            NAME_COST_ESTIMATE, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            COMMA_COST, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            PAREN_COST, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
             callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            argMap, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            callParentNode, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            block, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.compiler, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.safeNameIdSupplier, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.allowDecomposition, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.knownConstants, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.assumeStrictThis, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            this.assumeMinimumCapture, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            NAME_COST_ESTIMATE, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            COMMA_COST, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            PAREN_COST, fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, argMap, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callParentNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, block, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.compiler, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.safeNameIdSupplier, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.allowDecomposition, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.knownConstants, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.assumeStrictThis, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.assumeMinimumCapture, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, NAME_COST_ESTIMATE, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, COMMA_COST, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, PAREN_COST, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode,  this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, argMap, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callParentNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, block, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.compiler, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.safeNameIdSupplier, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.allowDecomposition, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.knownConstants, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.assumeStrictThis, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, this.assumeMinimumCapture, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, NAME_COST_ESTIMATE, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, COMMA_COST, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, PAREN_COST, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, argMap, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, callParentNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, block, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.compiler, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.allowDecomposition, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.knownConstants, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.assumeStrictThis, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.assumeMinimumCapture, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, NAME_COST_ESTIMATE, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, COMMA_COST, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, PAREN_COST, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, argMap);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, callParentNode);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, block);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, this.compiler);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, this.safeNameIdSupplier);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, this.allowDecomposition);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, this.knownConstants);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, this.assumeStrictThis);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, this.assumeMinimumCapture);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, NAME_COST_ESTIMATE);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, COMMA_COST);
Map<String, Node> argMap =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier, PAREN_COST);
04:12:44.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:45.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:45.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:46.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:46.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:47.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:47.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:48.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:48.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:49.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:49.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:49.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:49.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:50.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:50.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:51.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:51.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:52.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:52.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:53.270 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:53.271 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:54.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:54.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:54.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:54.904 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:55.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:55.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:56.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:56.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:57.442 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:57.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:58.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:58.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:59.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:59.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:12:59.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:12:59.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:00.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:00.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:01.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:01.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:02.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:02.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:03.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:03.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:04.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:04.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:04.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:04.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:05.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:05.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:06.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:06.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:07.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:07.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:08.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:08.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:09.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:09.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:09.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:09.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:10.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:10.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:11.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:11.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:12.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:12.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:13.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:13.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:14.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:14.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:15.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:15.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:15.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:15.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:16.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:16.726 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:17.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:17.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:18.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:18.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:19.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:19.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:20.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:20.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:20.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:20.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:21.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:21.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:22.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:22.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:23.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:23.537 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:24.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:24.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:25.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:25.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:26.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:26.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:26.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:26.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:27.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:27.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:28.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:28.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:29.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:29.510 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:30.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:30.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:31.208 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:31.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:32.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:32.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:32.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:32.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:33.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:33.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:34.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:34.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:35.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:35.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:36.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:36.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:37.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:37.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:37.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:37.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:38.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:38.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:39.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:39.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:40.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:40.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:41.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:41.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:41.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:41.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:42.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:42.756 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:43.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:43.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:44.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:44.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:45.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:45.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:46.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:46.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:46.820 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Map<String, Node> argMap =
        argMap.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        callParentNode.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        block.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        callNode.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        fnNode.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        this.compiler.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        this.safeNameIdSupplier.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        this.allowDecomposition.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        this.knownConstants.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        this.assumeStrictThis.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        this.assumeMinimumCapture.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        NAME_COST_ESTIMATE.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        COMMA_COST.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
Map<String, Node> argMap =
        PAREN_COST.getFunctionCallParameterMap(
            fnNode, callNode, this.safeNameIdSupplier);
04:13:46.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:47.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:47.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:48.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:48.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:49.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:49.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:50.088 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:50.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:50.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:50.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:51.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:51.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:52.556 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:52.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:53.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:53.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:54.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:54.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:55.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:55.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:55.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:55.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:56.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:56.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:57.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:57.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:58.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode != null) {


}

if (callNode != null) {


}

if (this.safeNameIdSupplier != null) {


}

04:13:58.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:13:59.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:13:59.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:00.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:00.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:00.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

if (callNode == null) {
    return null;
}

if (callNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callNode);
}

if (this.safeNameIdSupplier == null) {
    return null;
}

if (this.safeNameIdSupplier == null) {
    throw new IllegalArgumentException("Empty variable: " + this.safeNameIdSupplier);
}

04:14:00.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:01.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:01.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:02.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:02.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:03.453 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:03.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:04.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:04.316 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:05.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:05.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:06.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:14:06.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:06.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:06.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===258
04:14:06.886 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node callParentNode = callNode.getParent();
Node callParentNode = callNode.getFirstChild();
Node callParentNode = callNode.getLastChild();
Node callParentNode = callNode.getNext();
Node callParentNode = callNode.getLastSibling();
Node callParentNode = callNode.detachFromParent();
Node callParentNode = callNode.removeFirstChild();
Node callParentNode = callNode.removeChildren();
Node callParentNode = callNode.cloneNode();
Node callParentNode = callNode.cloneTree();
04:14:06.919 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:07.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:07.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:08.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:08.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:09.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:09.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:10.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:10.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:11.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:11.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:11.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:11.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:12.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:12.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:13.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:13.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:14.495 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node callParentNode = callNode.getParent(callParentNode);
Node callParentNode = callNode.getParent(block);
Node callParentNode = callNode.getParent(fnNode);
Node callParentNode = callNode.getParent(this.compiler);
Node callParentNode = callNode.getParent(this.safeNameIdSupplier);
Node callParentNode = callNode.getParent(this.allowDecomposition);
Node callParentNode = callNode.getParent(this.knownConstants);
Node callParentNode = callNode.getParent(this.assumeStrictThis);
Node callParentNode = callNode.getParent(this.assumeMinimumCapture);
Node callParentNode = callNode.getParent(NAME_COST_ESTIMATE);
Node callParentNode = callNode.getParent(COMMA_COST);
Node callParentNode = callNode.getParent(PAREN_COST);
04:14:14.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:15.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:15.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:16.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:16.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:17.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:17.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:17.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:17.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:18.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:18.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:19.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:19.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:20.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:20.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:21.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:21.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:22.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:22.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:22.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:22.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:23.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:23.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:24.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node callParentNode = callParentNode.getParent();
Node callParentNode = block.getParent();
Node callParentNode = fnNode.getParent();
Node callParentNode = this.compiler.getParent();
Node callParentNode = this.safeNameIdSupplier.getParent();
Node callParentNode = this.allowDecomposition.getParent();
Node callParentNode = this.knownConstants.getParent();
Node callParentNode = this.assumeStrictThis.getParent();
Node callParentNode = this.assumeMinimumCapture.getParent();
Node callParentNode = NAME_COST_ESTIMATE.getParent();
Node callParentNode = COMMA_COST.getParent();
Node callParentNode = PAREN_COST.getParent();
04:14:24.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:25.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:25.524 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:26.376 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:26.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:27.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:27.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:28.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:28.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:28.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:28.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:29.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:29.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:30.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:30.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:31.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:31.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:32.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:32.325 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:33.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:33.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:34.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:34.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:34.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode != null) {


}

04:14:34.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:35.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode == null) {
    return null;
}

if (callNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callNode);
}

04:14:35.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:36.522 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:36.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:37.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(callParentNode);
maybePrepareCall(callParentNode);
	Node callParentNode = callNode.getParent();
Node callParentNode = callNode.getParent();
	maybePrepareCall(callParentNode);
04:14:37.360 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:38.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:38.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:39.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:39.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:39.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:14:39.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:40.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:40.774 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===257
04:14:40.801 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node block = fnNode.getLastChild();
Node block = fnNode.getFirstChild();
Node block = fnNode.getNext();
Node block = fnNode.getLastSibling();
Node block = fnNode.getParent();
Node block = fnNode.detachFromParent();
Node block = fnNode.removeFirstChild();
Node block = fnNode.removeChildren();
Node block = fnNode.cloneNode();
Node block = fnNode.cloneTree();
04:14:40.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:41.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:41.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:42.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:42.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:43.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:43.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:44.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:44.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:44.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:44.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:45.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:45.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:46.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:46.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:47.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:47.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:48.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node block = fnNode.getLastChild(block);
Node block = fnNode.getLastChild(callNode);
Node block = fnNode.getLastChild(this.compiler);
Node block = fnNode.getLastChild(this.safeNameIdSupplier);
Node block = fnNode.getLastChild(this.allowDecomposition);
Node block = fnNode.getLastChild(this.knownConstants);
Node block = fnNode.getLastChild(this.assumeStrictThis);
Node block = fnNode.getLastChild(this.assumeMinimumCapture);
Node block = fnNode.getLastChild(NAME_COST_ESTIMATE);
Node block = fnNode.getLastChild(COMMA_COST);
Node block = fnNode.getLastChild(PAREN_COST);
04:14:48.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:49.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:49.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:49.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:49.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:50.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:50.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:51.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:51.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:52.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:52.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:53.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:53.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:54.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:54.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:55.084 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:55.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:55.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:55.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:56.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:56.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:57.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node block = block.getLastChild();
Node block = callNode.getLastChild();
Node block = this.compiler.getLastChild();
Node block = this.safeNameIdSupplier.getLastChild();
Node block = this.allowDecomposition.getLastChild();
Node block = this.knownConstants.getLastChild();
Node block = this.assumeStrictThis.getLastChild();
Node block = this.assumeMinimumCapture.getLastChild();
Node block = NAME_COST_ESTIMATE.getLastChild();
Node block = COMMA_COST.getLastChild();
Node block = PAREN_COST.getLastChild();
04:14:57.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:58.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:58.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:14:59.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:14:59.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:00.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:00.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:00.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:00.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:01.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:01.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:02.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:02.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:03.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:03.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:04.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:04.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:05.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:05.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:05.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:05.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:06.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode != null) {


}

04:15:06.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:07.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:15:07.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:08.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:08.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:09.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(block);
maybePrepareCall(block);
	Node block = fnNode.getLastChild();
Node block = fnNode.getLastChild();
	maybePrepareCall(block);
04:15:09.138 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:09.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:09.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:10.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:10.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:11.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:15:11.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:12.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:12.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===245
04:15:12.495 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return inlineReturnValue(callNode, fnNode);
return inlineReturnValue(fnName, fnNode);
return inlineReturnValue(mode, fnNode);
return inlineReturnValue(this.compiler, fnNode);
return inlineReturnValue(this.safeNameIdSupplier, fnNode);
return inlineReturnValue(this.allowDecomposition, fnNode);
return inlineReturnValue(this.knownConstants, fnNode);
return inlineReturnValue(this.assumeStrictThis, fnNode);
return inlineReturnValue(this.assumeMinimumCapture, fnNode);
return inlineReturnValue(NAME_COST_ESTIMATE, fnNode);
return inlineReturnValue(COMMA_COST, fnNode);
return inlineReturnValue(PAREN_COST, fnNode);
return inlineReturnValue( fnNode);
return inlineReturnValue(fnName, callNode, fnNode);
return inlineReturnValue(mode, callNode, fnNode);
return inlineReturnValue(this.compiler, callNode, fnNode);
return inlineReturnValue(this.safeNameIdSupplier, callNode, fnNode);
return inlineReturnValue(this.allowDecomposition, callNode, fnNode);
return inlineReturnValue(this.knownConstants, callNode, fnNode);
return inlineReturnValue(this.assumeStrictThis, callNode, fnNode);
return inlineReturnValue(this.assumeMinimumCapture, callNode, fnNode);
return inlineReturnValue(NAME_COST_ESTIMATE, callNode, fnNode);
return inlineReturnValue(COMMA_COST, callNode, fnNode);
return inlineReturnValue(PAREN_COST, callNode, fnNode);
return inlineReturnValue(callNode, fnName);
return inlineReturnValue(callNode, mode);
return inlineReturnValue(callNode, this.compiler);
return inlineReturnValue(callNode, this.safeNameIdSupplier);
return inlineReturnValue(callNode, this.allowDecomposition);
return inlineReturnValue(callNode, this.knownConstants);
return inlineReturnValue(callNode, this.assumeStrictThis);
return inlineReturnValue(callNode, this.assumeMinimumCapture);
return inlineReturnValue(callNode, NAME_COST_ESTIMATE);
return inlineReturnValue(callNode, COMMA_COST);
return inlineReturnValue(callNode, PAREN_COST);
return inlineReturnValue(callNode, );
return inlineReturnValue(callNode, fnName, fnNode);
return inlineReturnValue(callNode, mode, fnNode);
return inlineReturnValue(callNode, this.compiler, fnNode);
return inlineReturnValue(callNode, this.safeNameIdSupplier, fnNode);
return inlineReturnValue(callNode, this.allowDecomposition, fnNode);
return inlineReturnValue(callNode, this.knownConstants, fnNode);
return inlineReturnValue(callNode, this.assumeStrictThis, fnNode);
return inlineReturnValue(callNode, this.assumeMinimumCapture, fnNode);
return inlineReturnValue(callNode, NAME_COST_ESTIMATE, fnNode);
return inlineReturnValue(callNode, COMMA_COST, fnNode);
return inlineReturnValue(callNode, PAREN_COST, fnNode);
return inlineReturnValue(callNode, fnNode, fnName);
return inlineReturnValue(callNode, fnNode, mode);
return inlineReturnValue(callNode, fnNode, this.compiler);
return inlineReturnValue(callNode, fnNode, this.safeNameIdSupplier);
return inlineReturnValue(callNode, fnNode, this.allowDecomposition);
return inlineReturnValue(callNode, fnNode, this.knownConstants);
return inlineReturnValue(callNode, fnNode, this.assumeStrictThis);
return inlineReturnValue(callNode, fnNode, this.assumeMinimumCapture);
return inlineReturnValue(callNode, fnNode, NAME_COST_ESTIMATE);
return inlineReturnValue(callNode, fnNode, COMMA_COST);
return inlineReturnValue(callNode, fnNode, PAREN_COST);
04:15:12.496 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:13.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:13.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:14.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:14.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:15.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:15.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:15.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:15.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:16.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:16.734 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:17.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:17.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:18.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:18.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:19.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:19.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:20.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:20.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:21.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:21.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:21.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:21.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:22.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:22.757 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:23.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:23.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:24.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:24.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:25.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:25.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:26.209 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:26.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:27.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:27.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:27.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:27.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:28.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:28.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:29.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:29.681 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:30.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:30.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:31.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:31.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:32.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:32.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:33.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:33.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:33.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:33.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:34.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:34.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:35.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:35.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:36.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:36.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:37.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:37.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:38.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:38.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:38.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:38.862 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:39.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:39.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:40.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:40.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:41.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:41.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:41.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:41.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:42.603 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:42.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:43.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:43.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:44.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:44.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:45.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:45.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:45.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:45.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:46.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:46.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:47.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:47.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:48.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:48.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:49.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:49.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:50.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:50.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:50.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:50.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:51.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:51.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:52.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:52.635 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:53.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:53.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:54.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:54.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:55.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:55.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:55.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:55.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:56.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:56.839 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:57.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:57.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:58.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:58.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:15:59.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:15:59.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:00.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
return canInlineReferenceDirectly(callNode, fnNode);
04:16:00.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:01.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
return getDecomposer();
04:16:01.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:01.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
return inlineReturnValue(true, callNode, fnNode);
return inlineReturnValue(false, callNode, fnNode);
return inlineReturnValue(callNode, true, fnNode);
return inlineReturnValue(callNode, false, fnNode);
return inlineReturnValue(callNode, fnNode, true);
return inlineReturnValue(callNode, fnNode, false);
04:16:01.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:02.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:02.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:03.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:03.601 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:04.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:04.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:05.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:05.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:06.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:06.171 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:07.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode != null) {


}

if (fnNode != null) {


}

04:16:07.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:07.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:07.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:08.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (callNode == null) {
    return null;
}

if (callNode == null) {
    throw new IllegalArgumentException("Empty variable: " + callNode);
}

if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:16:08.700 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:09.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:09.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:10.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:10.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:11.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:11.284 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:12.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:16:12.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:13.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:13.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.PureFunctionIdentifier ===329
04:16:13.035 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
flags.setMutatesArguments();
flags.setMutatesArguments(true);
flags.setMutatesArguments(false);
04:16:13.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:14.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:14.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:15.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
flags.setMutatesArguments(functionInfo);
flags.setMutatesArguments(def);
flags.setMutatesArguments(defs);
flags.setMutatesArguments(name);
flags.setMutatesArguments(callNode);
flags.setMutatesArguments(INVALID_NO_SIDE_EFFECT_ANNOTATION);
flags.setMutatesArguments(INVALID_MODIFIES_ANNOTATION);
flags.setMutatesArguments(this.compiler);
flags.setMutatesArguments(this.definitionProvider);
flags.setMutatesArguments(this.functionSideEffectMap);
flags.setMutatesArguments(this.allFunctionCalls);
flags.setMutatesArguments(this.externs);
flags.setMutatesArguments(this.root);
04:16:15.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:16.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:16.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:17.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:17.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:17.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:17.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:18.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:18.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:19.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:19.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:21.015 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:21.016 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:22.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:22.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:23.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:23.005 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:24.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:24.001 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:24.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:24.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:25.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:25.914 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:26.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:26.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:27.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (flags != null) {


}

04:16:27.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:28.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (flags == null) {
    return;
}

if (flags == null) {
    throw new IllegalArgumentException("Empty variable: " + flags);
}

04:16:28.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:29.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:29.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:30.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:16:30.889 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:31.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:31.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===553
04:16:31.934 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
if (block.getFirstChild().isReturn() || block.getFirstChild().getFirstChild() != null) {
        return true;
      }
if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() == null) {
        return true;
      }
04:16:31.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:32.775 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:32.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:33.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block != null) {


}

if (block != null) {


}

04:16:33.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:34.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:34.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:35.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block == null) {
    return true;
}

if (block == null) {
    return false;
}

if (block == null) {
    throw new IllegalArgumentException("Empty variable: " + block);
}

if (block == null) {
    return true;
}

if (block == null) {
    return false;
}

if (block == null) {
    throw new IllegalArgumentException("Empty variable: " + block);
}

04:16:35.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:36.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:36.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:36.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:36.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:37.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:37.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:38.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:38.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:39.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:39.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:40.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:16:40.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:41.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:41.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===199
04:16:41.161 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (names.contains(n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(n, n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(parent, n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(unsafe, n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(inInnerFunction, n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(THIS_MARKER, n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(n.getString(), n)) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(n.getString(), parent)) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(n.getString(), unsafe)) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(n.getString(), inInnerFunction)) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names.contains(n.getString(), THIS_MARKER)) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
04:16:41.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:41.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:41.932 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:42.715 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:42.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:43.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:43.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:44.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:44.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:45.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:45.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:45.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:45.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:46.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:46.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:47.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:47.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:48.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:48.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:48.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (names != null && names.contains(n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
if (names != null || names.contains(n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }
04:16:48.865 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:49.642 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:49.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:50.423 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (names != null) {


}

if (n != null) {


}

04:16:50.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:51.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:51.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:51.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (names == null) {
    return null;
}

if (names == null) {
    throw new IllegalArgumentException("Empty variable: " + names);
}

if (n == null) {
    return null;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

04:16:51.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:52.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:52.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:53.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:53.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:54.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:54.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:55.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

    } else if (n.isFunction()) {
      // A function parameter can not be replaced with a direct inlined value
      // if it is referred to by an inner function. The inner function
      // can out live the call we are replacing, so inner function must
      // capture a unique name.  This approach does not work within loop
      // bodies so those are forbidden elsewhere.
      inInnerFunction = true;
    }
	if (names.contains(n.getString())) {
        if (inInnerFunction || canNameValueChange(n, parent)) {
          unsafe.add(n.getString());
        }
      }

MOVE-BUGGY-STATEMENT
04:16:55.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:55.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:16:55.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:56.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:56.777 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.NodeUtil ===770
04:16:56.832 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return checkForStateChangeHelper(n, true, compiler);
return checkForStateChangeHelper(MAX_POSITIVE_INTEGER_NUMBER, true, compiler);
return checkForStateChangeHelper(JSC_PROPERTY_NAME_FN, true, compiler);
return checkForStateChangeHelper(LARGEST_BASIC_LATIN, true, compiler);
return checkForStateChangeHelper(CONSTRUCTORS_WITHOUT_SIDE_EFFECTS, true, compiler);
return checkForStateChangeHelper(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS, true, compiler);
return checkForStateChangeHelper(OBJECT_METHODS_WITHOUT_SIDEEFFECTS, true, compiler);
return checkForStateChangeHelper(REGEXP_METHODS, true, compiler);
return checkForStateChangeHelper(STRING_REGEXP_METHODS, true, compiler);
return checkForStateChangeHelper(IMMUTABLE_PREDICATE, true, compiler);
return checkForStateChangeHelper(NUMBERIC_RESULT_PREDICATE, true, compiler);
return checkForStateChangeHelper(BOOLEAN_RESULT_PREDICATE, true, compiler);
return checkForStateChangeHelper(MAY_BE_STRING_PREDICATE, true, compiler);
return checkForStateChangeHelper(MATCH_NOT_FUNCTION, true, compiler);
return checkForStateChangeHelper( true, compiler);
return checkForStateChangeHelper(MAX_POSITIVE_INTEGER_NUMBER, n, true, compiler);
return checkForStateChangeHelper(JSC_PROPERTY_NAME_FN, n, true, compiler);
return checkForStateChangeHelper(LARGEST_BASIC_LATIN, n, true, compiler);
return checkForStateChangeHelper(CONSTRUCTORS_WITHOUT_SIDE_EFFECTS, n, true, compiler);
return checkForStateChangeHelper(BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS, n, true, compiler);
return checkForStateChangeHelper(OBJECT_METHODS_WITHOUT_SIDEEFFECTS, n, true, compiler);
return checkForStateChangeHelper(REGEXP_METHODS, n, true, compiler);
return checkForStateChangeHelper(STRING_REGEXP_METHODS, n, true, compiler);
return checkForStateChangeHelper(IMMUTABLE_PREDICATE, n, true, compiler);
return checkForStateChangeHelper(NUMBERIC_RESULT_PREDICATE, n, true, compiler);
return checkForStateChangeHelper(BOOLEAN_RESULT_PREDICATE, n, true, compiler);
return checkForStateChangeHelper(MAY_BE_STRING_PREDICATE, n, true, compiler);
return checkForStateChangeHelper(MATCH_NOT_FUNCTION, n, true, compiler);
return checkForStateChangeHelper(n, MAX_POSITIVE_INTEGER_NUMBER, true, compiler);
return checkForStateChangeHelper(n, JSC_PROPERTY_NAME_FN, true, compiler);
return checkForStateChangeHelper(n, LARGEST_BASIC_LATIN, true, compiler);
return checkForStateChangeHelper(n, CONSTRUCTORS_WITHOUT_SIDE_EFFECTS, true, compiler);
return checkForStateChangeHelper(n, BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS, true, compiler);
return checkForStateChangeHelper(n, OBJECT_METHODS_WITHOUT_SIDEEFFECTS, true, compiler);
return checkForStateChangeHelper(n, REGEXP_METHODS, true, compiler);
return checkForStateChangeHelper(n, STRING_REGEXP_METHODS, true, compiler);
return checkForStateChangeHelper(n, IMMUTABLE_PREDICATE, true, compiler);
return checkForStateChangeHelper(n, NUMBERIC_RESULT_PREDICATE, true, compiler);
return checkForStateChangeHelper(n, BOOLEAN_RESULT_PREDICATE, true, compiler);
return checkForStateChangeHelper(n, MAY_BE_STRING_PREDICATE, true, compiler);
return checkForStateChangeHelper(n, MATCH_NOT_FUNCTION, true, compiler);
return checkForStateChangeHelper(n, true, MAX_POSITIVE_INTEGER_NUMBER);
return checkForStateChangeHelper(n, true, JSC_PROPERTY_NAME_FN);
return checkForStateChangeHelper(n, true, LARGEST_BASIC_LATIN);
return checkForStateChangeHelper(n, true, CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);
return checkForStateChangeHelper(n, true, BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);
return checkForStateChangeHelper(n, true, OBJECT_METHODS_WITHOUT_SIDEEFFECTS);
return checkForStateChangeHelper(n, true, REGEXP_METHODS);
return checkForStateChangeHelper(n, true, STRING_REGEXP_METHODS);
return checkForStateChangeHelper(n, true, IMMUTABLE_PREDICATE);
return checkForStateChangeHelper(n, true, NUMBERIC_RESULT_PREDICATE);
return checkForStateChangeHelper(n, true, BOOLEAN_RESULT_PREDICATE);
return checkForStateChangeHelper(n, true, MAY_BE_STRING_PREDICATE);
return checkForStateChangeHelper(n, true, MATCH_NOT_FUNCTION);
return checkForStateChangeHelper(n, true, );
return checkForStateChangeHelper(n, true, MAX_POSITIVE_INTEGER_NUMBER, compiler);
return checkForStateChangeHelper(n, true, JSC_PROPERTY_NAME_FN, compiler);
return checkForStateChangeHelper(n, true, LARGEST_BASIC_LATIN, compiler);
return checkForStateChangeHelper(n, true, CONSTRUCTORS_WITHOUT_SIDE_EFFECTS, compiler);
return checkForStateChangeHelper(n, true, BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS, compiler);
return checkForStateChangeHelper(n, true, OBJECT_METHODS_WITHOUT_SIDEEFFECTS, compiler);
return checkForStateChangeHelper(n, true, REGEXP_METHODS, compiler);
return checkForStateChangeHelper(n, true, STRING_REGEXP_METHODS, compiler);
return checkForStateChangeHelper(n, true, IMMUTABLE_PREDICATE, compiler);
return checkForStateChangeHelper(n, true, NUMBERIC_RESULT_PREDICATE, compiler);
return checkForStateChangeHelper(n, true, BOOLEAN_RESULT_PREDICATE, compiler);
return checkForStateChangeHelper(n, true, MAY_BE_STRING_PREDICATE, compiler);
return checkForStateChangeHelper(n, true, MATCH_NOT_FUNCTION, compiler);
return checkForStateChangeHelper(n, true, compiler, MAX_POSITIVE_INTEGER_NUMBER);
return checkForStateChangeHelper(n, true, compiler, JSC_PROPERTY_NAME_FN);
return checkForStateChangeHelper(n, true, compiler, LARGEST_BASIC_LATIN);
return checkForStateChangeHelper(n, true, compiler, CONSTRUCTORS_WITHOUT_SIDE_EFFECTS);
return checkForStateChangeHelper(n, true, compiler, BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS);
return checkForStateChangeHelper(n, true, compiler, OBJECT_METHODS_WITHOUT_SIDEEFFECTS);
return checkForStateChangeHelper(n, true, compiler, REGEXP_METHODS);
return checkForStateChangeHelper(n, true, compiler, STRING_REGEXP_METHODS);
return checkForStateChangeHelper(n, true, compiler, IMMUTABLE_PREDICATE);
return checkForStateChangeHelper(n, true, compiler, NUMBERIC_RESULT_PREDICATE);
return checkForStateChangeHelper(n, true, compiler, BOOLEAN_RESULT_PREDICATE);
return checkForStateChangeHelper(n, true, compiler, MAY_BE_STRING_PREDICATE);
return checkForStateChangeHelper(n, true, compiler, MATCH_NOT_FUNCTION);
04:16:56.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:57.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:57.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:16:58.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:16:58.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:00.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:00.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:01.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:01.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:02.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:02.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:03.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:03.233 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:04.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:04.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:05.345 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:05.346 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:06.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:06.409 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:07.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:07.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:08.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:08.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:09.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:09.650 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:10.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:10.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:11.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:11.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:12.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:12.885 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:13.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:13.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:15.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:15.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:16.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:16.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:17.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:17.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:18.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:18.287 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:19.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:19.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:20.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:20.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:21.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:21.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:22.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:22.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:23.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:23.788 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:24.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:24.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:26.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:26.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:27.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:27.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:28.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:28.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:29.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:29.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:30.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:30.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:31.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:31.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:32.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:32.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:33.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:33.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:34.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:34.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:35.900 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:35.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:36.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:36.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:38.038 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:38.039 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:39.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:39.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:40.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:40.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:41.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:41.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:42.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:42.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:43.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:43.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:44.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:44.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:45.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:45.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:46.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:46.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:47.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:47.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:48.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:48.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:49.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:49.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:51.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:51.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:52.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:52.120 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:53.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:53.214 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:54.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:54.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:54.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:54.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:55.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:55.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:56.781 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:56.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:57.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:57.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:58.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:58.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:17:59.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:17:59.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:01.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:01.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:02.085 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:02.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:03.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:03.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:04.216 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:04.217 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:05.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:05.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:06.343 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:06.344 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:07.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:07.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:08.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:08.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:09.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:09.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:10.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:10.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:11.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:11.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:12.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:12.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:13.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:13.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:15.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:15.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:16.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:16.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:17.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:17.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:18.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:18.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:19.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:19.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:20.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:20.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:21.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:21.553 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:22.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
return checkForStateChangeHelper(true, n, true, compiler);
return checkForStateChangeHelper(false, n, true, compiler);
return checkForStateChangeHelper(n, false, compiler);
return checkForStateChangeHelper(n, compiler);
return checkForStateChangeHelper(n, true, true, compiler);
return checkForStateChangeHelper(n, false, true, compiler);
return checkForStateChangeHelper(n, true, true, compiler);
return checkForStateChangeHelper(n, true, false, compiler);
return checkForStateChangeHelper(n, true, compiler, true);
return checkForStateChangeHelper(n, true, compiler, false);
04:18:22.716 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:23.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:23.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:24.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:24.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:25.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:25.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:27.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:27.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:28.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:28.119 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:29.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:29.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:30.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:30.317 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:31.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:31.408 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:32.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:32.514 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:33.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (n != null) {


}

if (compiler != null) {


}

04:18:33.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:34.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:34.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:35.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (n == null) {
    return true;
}

if (n == null) {
    return false;
}

if (n == null) {
    throw new IllegalArgumentException("Empty variable: " + n);
}

if (compiler == null) {
    return true;
}

if (compiler == null) {
    return false;
}

if (compiler == null) {
    throw new IllegalArgumentException("Empty variable: " + compiler);
}

04:18:35.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:36.880 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:36.881 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:37.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:37.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:39.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:39.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:40.125 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:40.126 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:41.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:41.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:42.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:18:42.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:43.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:43.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===551
04:18:43.389 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (block.hasOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasChildren()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isFromExterns()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasMoreThanOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isQualifiedName()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isUnscopedQualifiedName()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isVarArgs()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isOptionalArg()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isSyntheticBlock()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.wasEmptyNode()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isOnlyModifiesThisCall()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isOnlyModifiesArgumentsCall()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isNoSideEffectsCall()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isLocalResultCall()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.mayMutateArguments()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.mayMutateGlobalStateOrThrow()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isQuotedString()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isAdd()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isAnd()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isArrayLit()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isAssign()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isAssignAdd()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isBlock()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isBreak()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isCall()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isCase()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isCast()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isCatch()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isComma()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isContinue()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isDebugger()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isDec()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isDefaultCase()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isDelProp()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isDo()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isEmpty()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isExprResult()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isFalse()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isFor()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isFunction()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isGetterDef()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isGetElem()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isGetProp()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isHook()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isIf()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isIn()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isInc()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isInstanceOf()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isLabel()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isLabelName()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isName()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isNE()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isNew()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isNot()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isNull()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isNumber()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isObjectLit()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isOr()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isParamList()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isRegExp()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isReturn()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isScript()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isSetterDef()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isString()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isStringKey()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isSwitch()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isThis()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isThrow()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isTrue()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isTry()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isTypeOf()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isVar()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isVoid()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isWhile()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.isWith()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
04:18:43.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:44.242 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:44.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:45.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:45.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:45.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:45.870 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:46.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:46.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:47.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:47.490 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:48.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:48.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:49.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:49.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:49.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:49.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:50.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:50.760 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:51.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:51.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:52.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:52.463 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:53.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:53.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:54.110 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:54.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:54.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:54.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:55.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:55.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:56.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:56.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:57.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:57.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:58.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:58.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:59.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:59.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:18:59.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:18:59.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:00.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:00.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:01.660 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:01.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:02.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:02.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:03.311 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:03.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:04.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:04.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:04.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:04.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:05.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:05.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:06.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:06.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:07.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:07.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:08.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:08.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:09.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:09.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:10.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:10.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:10.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:10.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:11.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:11.720 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:12.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:12.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:13.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:13.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:14.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:14.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:15.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:15.129 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:15.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:15.993 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:16.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:16.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:17.678 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:17.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:18.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:18.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:19.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:19.389 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:20.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:20.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:21.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:21.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:21.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:21.886 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:22.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:22.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:23.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:23.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:24.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:24.386 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:25.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:25.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:26.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:26.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:26.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:26.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:27.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:27.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:28.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:28.580 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:29.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:29.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:30.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:30.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:31.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:31.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:31.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:31.936 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:32.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:32.755 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:33.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:33.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:34.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:34.426 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:35.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:35.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:36.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:36.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:36.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:36.925 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:37.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:37.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:38.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:38.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:39.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:39.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:40.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:40.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:41.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:41.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:41.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:41.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:42.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:42.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:43.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:43.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:44.446 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:44.447 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:45.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block.hasOneChild(fnNode)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(this.compiler)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(this.safeNameIdSupplier)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(this.allowDecomposition)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(this.knownConstants)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(this.assumeStrictThis)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(this.assumeMinimumCapture)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(NAME_COST_ESTIMATE)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(COMMA_COST)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block.hasOneChild(PAREN_COST)) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
04:19:45.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:46.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:46.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:46.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:46.944 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:47.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:47.766 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:48.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:48.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:49.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:49.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:50.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:50.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:51.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:51.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:52.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:52.018 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:52.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:52.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:53.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block != null && block.hasOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block != null || block.hasOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
04:19:53.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:54.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:54.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:55.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block != null) {


}

04:19:55.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:56.226 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block == null) {
    return true;
}

if (block == null) {
    return false;
}

if (block == null) {
    throw new IllegalArgumentException("Empty variable: " + block);
}

04:19:56.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:57.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:57.068 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:57.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:19:57.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:58.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block.hasOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
	return true;
    } else 
null
04:19:58.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:19:59.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:19:59.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:00.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:00.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===132
04:20:00.461 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
cArg = cArg.getNext();
cArg = cArg.getNext(true);
cArg = cArg.getNext(false);
04:20:00.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:01.246 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:01.247 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:02.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
cArg = cArg.getFirstChild();
cArg = cArg.getLastChild();
cArg = cArg.getLastSibling();
cArg = cArg.getParent();
cArg = cArg.detachFromParent();
cArg = cArg.removeFirstChild();
cArg = cArg.removeChildren();
cArg = cArg.cloneNode();
cArg = cArg.cloneTree();
04:20:02.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:02.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:02.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:03.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:03.637 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:04.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:04.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:05.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:05.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:05.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:05.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:06.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:06.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:07.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:07.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:08.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:08.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:09.080 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {


}

04:20:09.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:09.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

04:20:09.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:10.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:10.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:11.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
cArg = cArg.getNext();
	argMap.put(fnArg.getString(), cArg);
        
null

      } else {
        Node srcLocation = callNode;
	cArg = cArg.getNext();

MOVE-BUGGY-STATEMENT

      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
	cArg = cArg.getNext();

MOVE-BUGGY-STATEMENT
04:20:11.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:12.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:12.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:13.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:13.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:13.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:20:13.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:14.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:14.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===131
04:20:14.722 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
argMap.put(fnArg.getString(), cArg);
argMap.put(true, fnArg.getString(), cArg);
argMap.put(false, fnArg.getString(), cArg);
argMap.put(fnArg.getString(), true, cArg);
argMap.put(fnArg.getString(), false, cArg);
argMap.put(fnArg.getString(), cArg, true);
argMap.put(fnArg.getString(), cArg, false);
04:20:14.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:15.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:15.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:16.302 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:16.303 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:17.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:17.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:17.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:17.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:18.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:18.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:19.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
argMap.put(fnArg, fnArg.getString(), cArg);
argMap.put(fnNode, fnArg.getString(), cArg);
argMap.put(callNode, fnArg.getString(), cArg);
argMap.put(safeNameIdSupplier, fnArg.getString(), cArg);
argMap.put(THIS_MARKER, fnArg.getString(), cArg);
argMap.put(fnArg.getString(), fnArg);
argMap.put(fnArg.getString(), fnNode);
argMap.put(fnArg.getString(), callNode);
argMap.put(fnArg.getString(), safeNameIdSupplier);
argMap.put(fnArg.getString(), THIS_MARKER);
argMap.put(fnArg.getString(), );
argMap.put(fnArg.getString(), fnArg, cArg);
argMap.put(fnArg.getString(), fnNode, cArg);
argMap.put(fnArg.getString(), callNode, cArg);
argMap.put(fnArg.getString(), safeNameIdSupplier, cArg);
argMap.put(fnArg.getString(), THIS_MARKER, cArg);
argMap.put(fnArg.getString(), cArg, fnArg);
argMap.put(fnArg.getString(), cArg, fnNode);
argMap.put(fnArg.getString(), cArg, callNode);
argMap.put(fnArg.getString(), cArg, safeNameIdSupplier);
argMap.put(fnArg.getString(), cArg, THIS_MARKER);
04:20:19.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:20.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:20.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:21.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:21.062 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:21.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:21.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:22.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:22.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:23.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:23.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:24.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:24.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:25.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:25.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:25.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:25.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:26.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:26.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:27.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:27.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:27.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:27.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:28.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:28.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:29.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:29.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:30.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:30.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:31.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:31.158 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:31.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:31.968 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:32.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:32.772 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:33.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:33.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:34.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:34.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:35.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:35.179 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:35.954 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (argMap != null) {


}

if (fnArg != null) {


}

if (cArg != null) {


}

04:20:35.955 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:36.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:36.730 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:37.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:37.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:38.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (argMap == null) {
    return null;
}

if (argMap == null) {
    throw new IllegalArgumentException("Empty variable: " + argMap);
}

if (fnArg == null) {
    return null;
}

if (fnArg == null) {
    throw new IllegalArgumentException("Empty variable: " + fnArg);
}

if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

04:20:38.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:39.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:39.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:39.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:39.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:40.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:40.714 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:41.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:41.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:42.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:42.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:43.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

        cArg = cArg.getNext();
	argMap.put(fnArg.getString(), cArg);

MOVE-BUGGY-STATEMENT

        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
	argMap.put(fnArg.getString(), cArg);

MOVE-BUGGY-STATEMENT

        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
	argMap.put(fnArg.getString(), cArg);

MOVE-BUGGY-STATEMENT
04:20:43.142 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:43.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:43.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:44.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:44.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:45.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:20:45.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:46.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:46.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===137
04:20:46.272 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {
      if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
    }
if (fnNode != null) {


}

04:20:46.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:47.055 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return null;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:20:47.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:47.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:47.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:48.651 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {
      if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
    }
	LinkedHashMap<String, Node> argMap = Maps.newLinkedHashMap();

    // CALL NODE: [ NAME, ARG1, ARG2, ... ]
    Node cArg = callNode.getFirstChild().getNext();
    if (cArg != null && NodeUtil.isFunctionObjectCall(callNode)) {
      argMap.put(THIS_MARKER, cArg);
      cArg = cArg.getNext();
    } else {
      // 'apply' isn't supported yet.
      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));
    }

    
null
for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {
      if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
    }
	Node cArg = callNode.getFirstChild().getNext();
    if (cArg != null && NodeUtil.isFunctionObjectCall(callNode)) {
      argMap.put(THIS_MARKER, cArg);
      cArg = cArg.getNext();
    } else {
      // 'apply' isn't supported yet.
      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));
    }

    
null
for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {
      if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
    }
	if (cArg != null && NodeUtil.isFunctionObjectCall(callNode)) {
      argMap.put(THIS_MARKER, cArg);
      cArg = cArg.getNext();
    } else {
      // 'apply' isn't supported yet.
      Preconditions.checkState(!NodeUtil.isFunctionObjectApply(callNode));
      argMap.put(THIS_MARKER, NodeUtil.newUndefinedNode(callNode));
    }

    
null


    // Add temp names for arguments that don't have named parameters in the
    // called function.
    while (cArg != null) {
      String uniquePlaceholder =
        getUniqueAnonymousParameterName(safeNameIdSupplier);
      argMap.put(uniquePlaceholder, cArg);
      cArg = cArg.getNext();
    }
	for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {
      if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
    }

MOVE-BUGGY-STATEMENT


    // Add temp names for arguments that don't have named parameters in the
    // called function.
    while (cArg != null) {
      String uniquePlaceholder =
        getUniqueAnonymousParameterName(safeNameIdSupplier);
      argMap.put(uniquePlaceholder, cArg);
      cArg = cArg.getNext();
    }

    return argMap;
	for (Node fnArg : NodeUtil.getFunctionParameters(fnNode).children()) {
      if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
    }

MOVE-BUGGY-STATEMENT
04:20:48.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:49.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:49.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:50.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:50.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:51.031 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:51.032 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:51.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:51.821 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:52.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:20:52.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:53.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:53.422 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionArgumentInjector ===130
04:20:53.437 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (cArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
if (cArg == null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
04:20:53.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:54.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnArg != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
if (fnNode != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
if (callNode != null) {
        argMap.put(fnArg.getString(), cArg);
        cArg = cArg.getNext();
      } else {
        Node srcLocation = callNode;
        argMap.put(fnArg.getString(), NodeUtil.newUndefinedNode(srcLocation));
      }
04:20:54.224 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:55.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:55.010 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:55.802 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:55.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:56.585 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg != null) {


}

04:20:56.586 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:57.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (cArg == null) {
    return null;
}

if (cArg == null) {
    throw new IllegalArgumentException("Empty variable: " + cArg);
}

04:20:57.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:58.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:58.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:59.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:20:59.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:20:59.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:20:59.815 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.InlineFunctions ===787
04:20:59.836 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (isCandidateUsage(node)) {
        changed.add(node.getString());
      }
if (hasLocalNames(node)) {
        changed.add(node.getString());
      }
04:20:59.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:00.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (isCandidateUsage(changed)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.fns)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.anonFns)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.compiler)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.injector)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.blockFunctionInliningEnabled)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.inlineGlobalFunctions)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.inlineLocalFunctions)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.assumeMinimumCapture)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.specializationState)) {
        changed.add(node.getString());
      }
if (isCandidateUsage()) {
        changed.add(node.getString());
      }
if (isCandidateUsage(changed, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.fns, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.anonFns, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.compiler, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.injector, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.blockFunctionInliningEnabled, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.inlineGlobalFunctions, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.inlineLocalFunctions, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.assumeMinimumCapture, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(this.specializationState, node)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, changed)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.fns)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.anonFns)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.compiler)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.injector)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.blockFunctionInliningEnabled)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.inlineGlobalFunctions)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.inlineLocalFunctions)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.assumeMinimumCapture)) {
        changed.add(node.getString());
      }
if (isCandidateUsage(node, this.specializationState)) {
        changed.add(node.getString());
      }
04:21:00.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:01.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:01.605 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:02.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:02.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:03.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:03.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:04.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:04.297 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:05.182 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:05.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:06.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:06.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:06.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:06.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:07.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:07.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:08.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:08.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:09.717 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:09.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:10.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:10.616 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:11.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:11.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:12.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:12.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:13.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:13.368 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:14.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:14.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:15.167 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:15.168 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:16.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:16.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:17.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:17.046 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:17.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:17.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:18.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:18.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:19.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:19.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:20.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:20.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:21.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:21.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:22.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:22.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:23.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:23.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:24.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:24.243 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:25.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:25.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:26.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:26.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:26.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:26.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:27.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:27.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:28.728 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (node != null) {


}

04:21:28.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:29.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (node == null) {
    return;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

04:21:29.615 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:30.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:30.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:31.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:21:31.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:32.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:32.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===548
04:21:32.354 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!block.hasChildren()) {
      // special case empty functions.
      return true;
    } else if (block.hasOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
if (block != null) {


}

04:21:32.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:33.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (block == null) {
    return true;
}

if (block == null) {
    return false;
}

if (block == null) {
    throw new IllegalArgumentException("Empty variable: " + block);
}

04:21:33.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:34.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:34.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:34.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:34.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:35.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (!block.hasChildren()) {
      // special case empty functions.
      return true;
    } else if (block.hasOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }
	Node block = NodeUtil.getFunctionBody(fnNode);

    // Check if this function is suitable for direct replacement of a CALL node:
    // a function that consists of single return that returns an expression.
    
null


    return false;
	if (!block.hasChildren()) {
      // special case empty functions.
      return true;
    } else if (block.hasOneChild()) {
      // Only inline functions that return something.
      if (block.getFirstChild().isReturn()
          && block.getFirstChild().getFirstChild() != null) {
        return true;
      }
    }

MOVE-BUGGY-STATEMENT
04:21:35.722 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:36.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:36.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:37.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:21:37.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:38.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:38.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.FunctionInjector ===544
04:21:38.236 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node block = NodeUtil.getFunctionBody(fnNode);
Node block = NodeUtil.newExpr(fnNode);
Node block = NodeUtil.getAssignedValue(fnNode);
Node block = NodeUtil.getLoopCodeBlock(fnNode);
Node block = NodeUtil.getConditionExpression(fnNode);
Node block = NodeUtil.getAddingRoot(fnNode);
Node block = NodeUtil.getRootOfQualifiedName(fnNode);
Node block = NodeUtil.getPrototypeClassName(fnNode);
Node block = NodeUtil.newUndefinedNode(fnNode);
Node block = NodeUtil.getCatchBlock(fnNode);
Node block = NodeUtil.getFunctionParameters(fnNode);
Node block = NodeUtil.getBestLValue(fnNode);
Node block = NodeUtil.getRValueOfLValue(fnNode);
Node block = NodeUtil.getBestLValueOwner(fnNode);
04:21:38.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:39.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:39.124 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:39.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:39.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:40.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:40.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:41.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:41.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:42.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:42.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:43.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:43.298 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:44.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:44.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:44.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:44.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:45.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:45.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:46.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:46.550 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:47.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:47.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:48.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:48.192 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:49.024 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node block = NodeUtil.getFunctionBody(block);
Node block = NodeUtil.getFunctionBody(this.compiler);
Node block = NodeUtil.getFunctionBody(this.safeNameIdSupplier);
Node block = NodeUtil.getFunctionBody(this.allowDecomposition);
Node block = NodeUtil.getFunctionBody(this.knownConstants);
Node block = NodeUtil.getFunctionBody(this.assumeStrictThis);
Node block = NodeUtil.getFunctionBody(this.assumeMinimumCapture);
Node block = NodeUtil.getFunctionBody(NAME_COST_ESTIMATE);
Node block = NodeUtil.getFunctionBody(COMMA_COST);
Node block = NodeUtil.getFunctionBody(PAREN_COST);
Node block = NodeUtil.getFunctionBody();
Node block = NodeUtil.getFunctionBody(block, fnNode);
Node block = NodeUtil.getFunctionBody(this.compiler, fnNode);
Node block = NodeUtil.getFunctionBody(this.safeNameIdSupplier, fnNode);
Node block = NodeUtil.getFunctionBody(this.allowDecomposition, fnNode);
Node block = NodeUtil.getFunctionBody(this.knownConstants, fnNode);
Node block = NodeUtil.getFunctionBody(this.assumeStrictThis, fnNode);
Node block = NodeUtil.getFunctionBody(this.assumeMinimumCapture, fnNode);
Node block = NodeUtil.getFunctionBody(NAME_COST_ESTIMATE, fnNode);
Node block = NodeUtil.getFunctionBody(COMMA_COST, fnNode);
Node block = NodeUtil.getFunctionBody(PAREN_COST, fnNode);
Node block = NodeUtil.getFunctionBody(fnNode, block);
Node block = NodeUtil.getFunctionBody(fnNode, this.compiler);
Node block = NodeUtil.getFunctionBody(fnNode, this.safeNameIdSupplier);
Node block = NodeUtil.getFunctionBody(fnNode, this.allowDecomposition);
Node block = NodeUtil.getFunctionBody(fnNode, this.knownConstants);
Node block = NodeUtil.getFunctionBody(fnNode, this.assumeStrictThis);
Node block = NodeUtil.getFunctionBody(fnNode, this.assumeMinimumCapture);
Node block = NodeUtil.getFunctionBody(fnNode, NAME_COST_ESTIMATE);
Node block = NodeUtil.getFunctionBody(fnNode, COMMA_COST);
Node block = NodeUtil.getFunctionBody(fnNode, PAREN_COST);
04:21:49.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:49.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:49.840 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:50.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:50.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:51.477 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:51.478 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:52.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:52.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:53.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:53.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:54.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:54.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:54.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:54.876 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:55.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:55.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:56.630 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:56.631 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:57.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:57.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:58.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:58.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:21:59.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:21:59.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:00.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:00.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:00.916 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:00.917 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:01.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:01.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:02.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:02.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:03.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:03.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:04.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:04.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:05.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:05.054 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:05.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:05.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:06.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:06.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:07.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:07.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:08.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:08.405 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:09.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:09.244 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:10.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:10.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:10.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:10.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:11.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:11.806 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:12.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:12.652 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:13.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:13.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:14.352 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:14.353 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:15.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
Node block = block.getFunctionBody(fnNode);
Node block = fnNode.getFunctionBody(fnNode);
Node block = this.compiler.getFunctionBody(fnNode);
Node block = this.safeNameIdSupplier.getFunctionBody(fnNode);
Node block = this.allowDecomposition.getFunctionBody(fnNode);
Node block = this.knownConstants.getFunctionBody(fnNode);
Node block = this.assumeStrictThis.getFunctionBody(fnNode);
Node block = this.assumeMinimumCapture.getFunctionBody(fnNode);
Node block = NAME_COST_ESTIMATE.getFunctionBody(fnNode);
Node block = COMMA_COST.getFunctionBody(fnNode);
Node block = PAREN_COST.getFunctionBody(fnNode);
04:22:15.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:16.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:16.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:16.908 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:16.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:17.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:17.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:18.625 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:18.626 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:19.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:19.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:20.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:20.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:21.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:21.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:21.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:21.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:22.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:22.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:23.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:23.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:24.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode != null) {


}

04:22:24.486 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:25.322 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fnNode == null) {
    return true;
}

if (fnNode == null) {
    return false;
}

if (fnNode == null) {
    throw new IllegalArgumentException("Empty variable: " + fnNode);
}

04:22:25.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:26.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:26.166 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:27.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:27.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:27.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
maybePrepareCall(block);
maybePrepareCall(block);
	Node block = NodeUtil.getFunctionBody(fnNode);
Node block = NodeUtil.getFunctionBody(fnNode);
	maybePrepareCall(block);
04:22:27.837 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:28.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:28.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:29.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:29.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:30.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:22:30.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:31.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:31.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.InlineFunctions ===257
04:22:31.257 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
fs.inlineDirectly(true);
fs.inlineDirectly(false);
fs.inlineDirectly();
fs.inlineDirectly(true, true);
fs.inlineDirectly(false, true);
fs.inlineDirectly(true, true);
fs.inlineDirectly(true, false);
04:22:31.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:32.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:32.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:33.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:33.049 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:33.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:33.950 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:34.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:34.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:35.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:35.765 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:36.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
fs.inlineDirectly(name, true);
fs.inlineDirectly(fn, true);
fs.inlineDirectly(module, true);
fs.inlineDirectly(this.fns, true);
fs.inlineDirectly(this.anonFns, true);
fs.inlineDirectly(this.compiler, true);
fs.inlineDirectly(this.injector, true);
fs.inlineDirectly(this.blockFunctionInliningEnabled, true);
fs.inlineDirectly(this.inlineGlobalFunctions, true);
fs.inlineDirectly(this.inlineLocalFunctions, true);
fs.inlineDirectly(this.assumeMinimumCapture, true);
fs.inlineDirectly(this.specializationState, true);
fs.inlineDirectly(true, name);
fs.inlineDirectly(true, fn);
fs.inlineDirectly(true, module);
fs.inlineDirectly(true, this.fns);
fs.inlineDirectly(true, this.anonFns);
fs.inlineDirectly(true, this.compiler);
fs.inlineDirectly(true, this.injector);
fs.inlineDirectly(true, this.blockFunctionInliningEnabled);
fs.inlineDirectly(true, this.inlineGlobalFunctions);
fs.inlineDirectly(true, this.inlineLocalFunctions);
fs.inlineDirectly(true, this.assumeMinimumCapture);
fs.inlineDirectly(true, this.specializationState);
04:22:36.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:37.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:37.523 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:38.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:38.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:39.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:39.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:40.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:40.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:41.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:41.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:41.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:41.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:42.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:42.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:43.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:43.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:44.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:44.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:45.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:45.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:46.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:46.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:47.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:47.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:48.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:48.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:49.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:49.162 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:50.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:50.072 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:50.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:50.957 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:51.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:51.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:52.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:52.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:53.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:53.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:54.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:54.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:55.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:55.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:56.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:56.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:57.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:57.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:58.086 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fs != null) {


}

04:22:58.087 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:58.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
if (fs == null) {
    return;
}

if (fs == null) {
    throw new IllegalArgumentException("Empty variable: " + fs);
}

04:22:58.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:22:59.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:22:59.866 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:23:00.744 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:23:00.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:23:01.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:23:01.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.InlineFunctions ===458
04:23:01.623 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return false;
return true;
04:23:01.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:23:02.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 

04:23:02.502 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
04:23:03.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-116 ---Fixer: fix fail because of failed compiling! 
04:23:03.434 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.InlineFunctions ===53
04:23:03.453 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
InlineFunctions implements SpecializationAwareCompilerPass {

  // TODO(nicksantos): This needs to be completely rewritten to use scopes
  // to do variable lookups. Right now, it assumes that all functions are
  // uniquely named variables. There's currently a stopgap scope-check
  // to ensure that this doesn't produce invalid code. But in the long run,
  // this needs a major refactor.
  private final Map<String, FunctionState> fns = Maps.newHashMap();
  private final Map<Node, String> anonFns = Maps.newHashMap();

  private final AbstractCompiler compiler;

  private final FunctionInjector injector;

  private final boolean blockFunctionInliningEnabled;
  private final boolean inlineGlobalFunctions;
  private final boolean inlineLocalFunctions;
  private final boolean assumeMinimumCapture;

  private SpecializeModule.SpecializationState specializationState;

  InlineFunctions(AbstractCompiler compiler,
      Supplier<String> safeNameIdSupplier,
      boolean inlineGlobalFunctions,
      boolean inlineLocalFunctions,
      boolean blockFunctionInliningEnabled,
      boolean assumeStrictThis,
      boolean assumeMinimumCapture) {
    Preconditions.checkArgument(compiler != null);
    Preconditions.checkArgument(safeNameIdSupplier != null);
    this.compiler = compiler;

    this.inlineGlobalFunctions = inlineGlobalFunctions;
    this.inlineLocalFunctions = inlineLocalFunctions;
    this.blockFunctionInliningEnabled = blockFunctionInliningEnabled;
    this.assumeMinimumCapture = assumeMinimumCapture;

    this.injector = new FunctionInjector(
        compiler, safeNameIdSupplier,
        true, assumeStrictThis, assumeMinimumCapture);
  }

  FunctionState getOrCreateFunctionState(String fnName) {
    FunctionState fs = fns.get(fnName);
    if (fs == null) {
      fs = new FunctionState();
      fns.put(fnName, fs);
    }
    return fs;
  }

  @Override
  public void enableSpecialization(SpecializeModule.SpecializationState
      specializationState) {
    this.specializationState = specializationState;
  }

  @Override
  public void process(Node externs, Node root) {
    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());

    NodeTraversal.traverse(compiler, root, new FindCandidateFunctions());
    if (fns.isEmpty()) {
      return;  // Nothing left to do.
    }
    NodeTraversal.traverse(compiler, root,
       new FindCandidatesReferences(fns, anonFns));
    trimCanidatesNotMeetingMinimumRequirements();
    if (fns.isEmpty()) {
      return;  // Nothing left to do.
    }

    // Store the set of function names eligible for inlining and use this to
    // prevent function names from being moved into temporaries during
    // expression decomposition. If this movement were allowed it would prevent
    // the Inline callback from finding the function calls.
    //
    // This pass already assumes these are constants, so this is safe for anyone
    // using function inlining.
    //
    Set<String> fnNames = Sets.newHashSet(fns.keySet());
    injector.setKnownConstants(fnNames);

    trimCanidatesUsingOnCost();
    if (fns.isEmpty()) {
      return;  // Nothing left to do.
    }
    resolveInlineConflicts();
    decomposeExpressions();
    NodeTraversal.traverse(compiler, root,
        new CallVisitor(
            fns, anonFns, new Inline(injector, specializationState)));

    removeInlinedFunctions();
  }

  /**
   * Find functions that might be inlined.
   */
  private class FindCandidateFunctions implements Callback {
    private int callsSeen = 0;

    @Override
    public boolean shouldTraverse(
        NodeTraversal nodeTraversal, Node n, Node parent) {
      // Don't traverse into function bodies
      // if we aren't inlining local functions.
      return inlineLocalFunctions || nodeTraversal.inGlobalScope();
    }

    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      if ((t.inGlobalScope() && inlineGlobalFunctions)
          || (!t.inGlobalScope() && inlineLocalFunctions)) {
        findNamedFunctions(t, n, parent);

        findFunctionExpressions(t, n);
      }
    }

    public void findNamedFunctions(NodeTraversal t, Node n, Node parent) {
      if (!NodeUtil.isStatement(n)) {
        // There aren't any interesting functions here.
        return;
      }

      switch (n.getType()) {
        // Functions expressions in the form of:
        //   var fooFn = function(x) { return ... }
        case Token.VAR:
          Preconditions.checkState(n.hasOneChild());
          Node nameNode = n.getFirstChild();
          if (nameNode.isName() && nameNode.hasChildren()
              && nameNode.getFirstChild().isFunction()) {
            maybeAddFunction(new FunctionVar(n), t.getModule());
          }
          break;

        // Named functions
        // function Foo(x) { return ... }
        case Token.FUNCTION:
          Preconditions.checkState(NodeUtil.isStatementBlock(parent)
              || parent.isLabel());
          if (!NodeUtil.isFunctionExpression(n)) {
            Function fn = new NamedFunction(n);
            maybeAddFunction(fn, t.getModule());
          }
          break;
      }
    }

    /**
     * Find function expressions that are called directly in the form of
     *   (function(a,b,...){...})(a,b,...)
     * or
     *   (function(a,b,...){...}).call(this,a,b, ...)
     */
    public void findFunctionExpressions(NodeTraversal t, Node n) {
      switch (n.getType()) {
        // Functions expressions in the form of:
        //   (function(){})();
        case Token.CALL:
          Node fnNode = null;
          if (n.getFirstChild().isFunction()) {
            fnNode = n.getFirstChild();
          } else if (NodeUtil.isFunctionObjectCall(n)) {
            Node fnIdentifingNode = n.getFirstChild().getFirstChild();
            if (fnIdentifingNode.isFunction()) {
              fnNode = fnIdentifingNode;
            }
          }

          // If a interesting function was discovered, add it.
          if (fnNode != null) {
            Function fn = new FunctionExpression(fnNode, callsSeen++);
            maybeAddFunction(fn, t.getModule());
            anonFns.put(fnNode, fn.getName());
          }
          break;
      }
    }
  }

  /**
   * Updates the FunctionState object for the given function. Checks if the
   * given function matches the criteria for an inlinable function.
   */
  private void maybeAddFunction(Function fn, JSModule module) {
    String name = fn.getName();
    FunctionState fs = getOrCreateFunctionState(name);

    // TODO(johnlenz): Maybe "smarten" FunctionState by adding this logic
    // to it?

    // If the function has multiple definitions, don't inline it.
    if (fs.hasExistingFunctionDefinition()) {
      fs.setInline(false);
    } else {
      // verify the function hasn't already been marked as "don't inline"
      if (fs.canInline()) {
        // store it for use when inlining.
        fs.setFn(fn);
        if (injector.isDirectCallNodeReplacementPossible(
            fn.getFunctionNode())) {
          fs.inlineDirectly(true);
        }

        // verify the function meets all the requirements.
        // TODO(johnlenz): Minimum requirement checks are about 5% of the
        // run-time cost of this pass.
        if (!isCandidateFunction(fn)) {
          // It doesn't meet the requirements.
          fs.setInline(false);
        }

        // Set the module and gather names that need temporaries.
        if (fs.canInline()) {
          fs.setModule(module);

          Node fnNode = fn.getFunctionNode();
          Set<String> namesToAlias =
              FunctionArgumentInjector.findModifiedParameters(fnNode);
          if (!namesToAlias.isEmpty()) {
            fs.inlineDirectly(false);
            fs.setNamesToAlias(namesToAlias);
          }

          Node block = NodeUtil.getFunctionBody(fnNode);
          if (NodeUtil.referencesThis(block)) {
            fs.setReferencesThis(true);
          }

          if (NodeUtil.containsFunction(block)) {
            fs.setHasInnerFunctions(true);
            // If there are inner functions, we can inline into global scope
            // if there are no local vars or named functions.
            // TODO(johnlenz): this can be improved by looking at the possible
            // values for locals.  If there are simple values, or constants
            // we could still inline.
            if (!assumeMinimumCapture && hasLocalNames(fnNode)) {
              fs.setInline(false);
            }
          }
        }

        // Check if block inlining is allowed.
        if (fs.canInline() && !fs.canInlineDirectly()) {
          if (!blockFunctionInliningEnabled) {
            fs.setInline(false);
          }
        }
      }
    }
  }

  /**
   * @param fnNode The function to inspect.
   * @return Whether the function has parameters, var, or function declarations.
   */
  private boolean hasLocalNames(Node fnNode) {
    Node block = NodeUtil.getFunctionBody(fnNode);
    return NodeUtil.getFunctionParameters(fnNode).hasChildren()
        || NodeUtil.has(
             block,
             new NodeUtil.MatchDeclaration(),
             new NodeUtil.MatchShallowStatement());
  }

  /**
   * Returns the function the traversal is currently traversing, or null
   * if in the global scope.
   */
  private static Node getContainingFunction(NodeTraversal t) {
    return (t.inGlobalScope()) ? null : t.getScopeRoot();
  }

  /**
   * Checks if the given function matches the criteria for an inlinable
   * function.
   */
  private boolean isCandidateFunction(Function fn) {
    // Don't inline exported functions.
    String fnName = fn.getName();
    if (compiler.getCodingConvention().isExported(fnName)) {
      // TODO(johnlenz): Should we allow internal references to be inlined?
      // An exported name can be replaced externally, any inlined instance
      // would not reflect this change.
      // To allow inlining we need to be able to distinguish between exports
      // that are used in a read-only fashion and those that can be replaced
      // by external definitions.
      return false;
    }

    // Don't inline this special function
    if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {
      return false;
    }

    // Don't inline if we are specializing and the function can't be fixed up
    if (specializationState != null &&
        !specializationState.canFixupFunction(fn.getFunctionNode())) {
      return false;
    }

    Node fnNode = fn.getFunctionNode();
    return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode);
  }

  /**
   * @see CallVisitor
   */
  private interface CallVisitorCallback {
    public void visitCallSite(
        NodeTraversal t, Node callNode, Node parent, FunctionState fs);
  }

  /**
   * Visit call sites for functions in functionMap.
   */
  private static class CallVisitor extends AbstractPostOrderCallback {

    protected CallVisitorCallback callback;
    private Map<String, FunctionState> functionMap;
    private Map<Node, String> anonFunctionMap;

    CallVisitor(Map<String, FunctionState> fns,
                Map<Node, String> anonFns,
                CallVisitorCallback callback) {
      this.functionMap = fns;
      this.anonFunctionMap = anonFns;
      this.callback = callback;
    }

    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      switch (n.getType()) {
        // Function calls
        case Token.CALL:
          Node child = n.getFirstChild();
          String name = null;
          // NOTE: The normalization pass insures that local names do not
          // collide with global names.
          if (child.isName()) {
            name = child.getString();
          } else if (child.isFunction()) {
            name = anonFunctionMap.get(child);
          } else if (NodeUtil.isFunctionObjectCall(n)) {
            Preconditions.checkState(NodeUtil.isGet(child));
            Node fnIdentifingNode = child.getFirstChild();
            if (fnIdentifingNode.isName()) {
              name = fnIdentifingNode.getString();
            } else if (fnIdentifingNode.isFunction()) {
              name = anonFunctionMap.get(fnIdentifingNode);
            }
          }

          if (name != null) {
            FunctionState fs = functionMap.get(name);
            // Only visit call-sites for functions that can be inlined.
            if (fs != null) {
              callback.visitCallSite(t, n, parent, fs);
            }
          }
          break;
      }
    }
  }

  /**
   * @return Whether the name is used in a way that might be a candidate
   *   for inlining.
   */
  static boolean isCandidateUsage(Node name) {
    Node parent = name.getParent();
    Preconditions.checkState(name.isName());
    if (parent.isVar() || parent.isFunction()) {
      // This is a declaration.  Duplicate declarations are handle during
      // function candidate gathering.
      return true;
    }

    if (parent.isCall() && parent.getFirstChild() == name) {
      // This is a normal reference to the function.
      return true;
    }

    // Check for a ".call" to the named function:
    //   CALL
    //     GETPROP/GETELEM
    //       NAME
    //       STRING == "call"
    //     This-Value
    //     Function-parameter-1
    //     ...
    if (NodeUtil.isGet(parent)
         && name == parent.getFirstChild()
         && name.getNext().isString()
         && name.getNext().getString().equals("call")) {
      Node gramps = name.getAncestor(2);
      if (gramps.isCall()
          && gramps.getFirstChild() == parent) {
        // Yep, a ".call".
        return true;
      }
    }
    return false;
  }

  /**
   * Find references to functions that are inlinable.
   */
  private class FindCandidatesReferences
      extends CallVisitor
      implements CallVisitorCallback {
    FindCandidatesReferences(
        Map<String, FunctionState> fns,
        Map<Node, String> anonFns) {
      super(fns, anonFns, null);
      this.callback = this;
    }

    @Override
    public void visit(NodeTraversal t, Node n, Node parent) {
      super.visit(t, n, parent);
      if (n.isName()) {
        checkNameUsage(n, parent);
      }
    }

    @Override
    public void visitCallSite(
        NodeTraversal t, Node callNode, Node parent, FunctionState fs) {
      maybeAddReference(t, fs, callNode, t.getModule());
    }

    void maybeAddReference(NodeTraversal t, FunctionState fs,
        Node callNode, JSModule module) {
      if (!fs.canInline()) {
        return;
      }

      boolean referenceAdded = false;
      InliningMode mode = fs.canInlineDirectly()
           ? InliningMode.DIRECT : InliningMode.BLOCK;
      referenceAdded = maybeAddReferenceUsingMode(
          t, fs, callNode, module, mode);
      if (!referenceAdded &&
          mode == InliningMode.DIRECT && blockFunctionInliningEnabled) {
        // This reference can not be directly inlined, see if
        // block replacement inlining is possible.
        mode = InliningMode.BLOCK;
        referenceAdded = maybeAddReferenceUsingMode(
            t, fs, callNode, module, mode);
      }

      if (!referenceAdded) {
        // Don't try to remove a function if we can't inline all
        // the references.
        fs.setRemove(false);
      }
    }

    private boolean maybeAddReferenceUsingMode(
        NodeTraversal t, FunctionState fs, Node callNode,
        JSModule module, InliningMode mode) {

      if (specializationState != null) {
        // If we're specializing, make sure we can fixup
        // the containing function before inlining
        Node containingFunction = getContainingFunction(t);
        if (containingFunction != null && !specializationState.canFixupFunction(
            containingFunction)) {
            return false;
        }
      }

      CanInlineResult result = injector.canInlineReferenceToFunction(
          t, callNode, fs.getFn().getFunctionNode(),
          fs.getNamesToAlias(), mode, fs.getReferencesThis(),
          fs.hasInnerFunctions());
      if (result != CanInlineResult.NO) {
        // Yeah!
        boolean decompose =
          (result == CanInlineResult.AFTER_PREPARATION);
        fs.addReference(new Reference(callNode, module, mode, decompose));
        return true;
      }

      return false;
    }

    /**
     * Find functions that can be inlined.
     */
    private void checkNameUsage(Node n, Node parent) {
      Preconditions.checkState(n.isName());

      if (isCandidateUsage(n)) {
        return;
      }

      // Other refs to a function name remove its candidacy for inlining
      String name = n.getString();
      FunctionState fs = fns.get(name);
      if (fs == null) {
        return;
      }

      // Unlike normal call/new parameters, references passed to
      // JSCompiler_ObjectPropertyString are not aliases of a value, but
      // a reference to the name itself, as such the value of the name is
      // unknown and can not be inlined.
      if (parent.isNew()) {
        Node target = parent.getFirstChild();
        if (target.isName() && target.getString().equals(
            ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) {
          // This method is going to be replaced so don't inline it anywhere.
          fs.setInline(false);
        }
      }

      // If the name is being assigned to it can not be inlined.
      if (parent.isAssign() && parent.getFirstChild() == n) {
        // e.g. bar = something; <== we can't inline "bar"
        // so mark the function as uninlinable.
        // TODO(johnlenz): Should we just remove it from fns here?
        fs.setInline(false);
      } else {
        // e.g. var fn = bar; <== we can't inline "bar"
        // As this reference can't be inlined mark the function as
        // unremovable.
        fs.setRemove(false);
      }
    }
  }

  /**
   * Inline functions at the call sites.
   */
  private static class Inline implements CallVisitorCallback {
    private final FunctionInjector injector;
    private final SpecializeModule.SpecializationState specializationState;

    Inline(FunctionInjector injector,
        SpecializeModule.SpecializationState specializationState) {
      this.injector = injector;
      this.specializationState = specializationState;
    }

    @Override
    public void visitCallSite(
        NodeTraversal t, Node callNode, Node parent, FunctionState fs) {
      Preconditions.checkState(fs.hasExistingFunctionDefinition());
      if (fs.canInline()) {
        Reference ref = fs.getReference(callNode);
        // There are two cases ref can be null: if the call site was introduce
        // because it was part of a function that was inlined during this pass
        // or if the call site was trimmed from the list of references because
        // the function couldn't be inlined at this location.
        if (ref != null) {
          if (specializationState != null) {
            Node containingFunction = getContainingFunction(t);

            if (containingFunction != null) {
              // Report that the function was specialized so that
              // {@link SpecializeModule} can fix it up.
              specializationState.reportSpecializedFunction(containingFunction);
            }
          }

          inlineFunction(t, callNode, fs, ref.mode);
          // Keep track of references that have been inlined so that
          // we can verify that none have been missed.
          ref.inlined = true;
        }
      }
    }

    /**
     * Inline a function into the call site.
     */
    private void inlineFunction(
        NodeTraversal t, Node callNode, FunctionState fs, InliningMode mode) {
      Function fn = fs.getFn();
      String fnName = fn.getName();
      Node fnNode = fs.getSafeFnNode();

      t.getCompiler().reportChangeToEnclosingScope(callNode);
      injector.inline(callNode, fnName, fnNode, mode);
      t.getCompiler().addToDebugLog("Inlined function: " + fn.getName());
    }
  }

  /**
   * Remove entries that aren't a valid inline candidates, from the list of
   * encountered names.
   */
  private void trimCanidatesNotMeetingMinimumRequirements() {
   Iterator<Entry<String, FunctionState>> i;
   for (i = fns.entrySet().iterator(); i.hasNext();) {
     FunctionState fs = i.next().getValue();
     if (!fs.hasExistingFunctionDefinition() || !fs.canInline()) {
       i.remove();
     }
   }
  }

  /**
   * Remove entries from the list of candidates that can't be inlined.
   */
  void trimCanidatesUsingOnCost() {
    Iterator<Entry<String, FunctionState>> i;
    for (i = fns.entrySet().iterator(); i.hasNext();) {
      FunctionState fs = i.next().getValue();
      if (fs.hasReferences()) {
        // Only inline function if it decreases the code size.
        boolean lowersCost = mimimizeCost(fs);
        if (!lowersCost) {
          // It shouldn't be inlined; remove it from the list.
          i.remove();
        }
      } else if (!fs.canRemove()) {
        // Don't bother tracking functions without references that can't be
        // removed.
        i.remove();
      }
    }
  }

  /**
   * Determines if the function is worth inlining and potentially
   * trims references that increase the cost.
   * @return Whether inlining the references lowers the overall cost.
   */
  private boolean mimimizeCost(FunctionState fs) {
    if (!inliningLowersCost(fs)) {
      // Try again without Block inlining references
      if (fs.hasBlockInliningReferences()) {
        fs.setRemove(false);
        fs.removeBlockInliningReferences();
        if (!fs.hasReferences() || !inliningLowersCost(fs)) {
          return false;
        }
      } else {
        return false;
      }
    }
    return true;
  }

  /**
   * @return Whether inlining the function reduces code size.
   */
  private boolean inliningLowersCost(FunctionState fs) {
    return injector.inliningLowersCost(
        fs.getModule(),
        fs.getFn().getFunctionNode(),
        fs.getReferences(),
        fs.getNamesToAlias(),
        fs.canRemove(),
        fs.getReferencesThis());
  }


  /**
   * Size base inlining calculations are thrown off when a function that is
   * being inlined also contains calls to functions that are slated for
   * inlining.
   *
   * Specifically, a clone of the FUNCTION node tree is used when the function
   * is inlined. Calls in this new tree are not included in the list of function
   * references so they won't be inlined (which is what we want). Here we mark
   * those functions as non-removable (as they will have new references in the
   * cloned node trees).
   *
   * This prevents a function that would only be inlined because it is
   * referenced once from being inlined into multiple call sites because
   * the calling function has been inlined in multiple locations or the
   * function being removed while there are still references.
   */
  private void resolveInlineConflicts() {
    for (FunctionState fs : fns.values()) {
      resolveInlineConflictsForFunction(fs);
    }
  }

  /**
   * @see #resolveInlineConflicts
   */
  private void resolveInlineConflictsForFunction(FunctionState fs) {
    // Functions that aren't referenced don't cause conflicts.
    if (!fs.hasReferences() || !fs.canInline()) {
      return;
    }

    Node fnNode = fs.getFn().getFunctionNode();
    Set<String> names = findCalledFunctions(fnNode);
    if (!names.isEmpty()) {
      // Prevent the removal of the referenced functions.
      for (String name : names) {
        FunctionState fsCalled = fns.get(name);
        if (fsCalled != null && fsCalled.canRemove()) {
          fsCalled.setRemove(false);
          // For functions that can no longer be removed, check if they should
          // still be inlined.
          if (!mimimizeCost(fsCalled)) {
            // It can't be inlined remove it from the list.
            fsCalled.setInline(false);
          }
        }
      }

      // Make a copy of the Node, so it isn't changed by other inlines.
      fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree());
    }
  }

  /**
   * This functions that may be called directly.
   */
  private Set<String> findCalledFunctions(Node node) {
    Set<String> changed = Sets.newHashSet();
    findCalledFunctions(NodeUtil.getFunctionBody(node), changed);
    return changed;
  }

  /**
   * @see #findCalledFunctions(Node)
   */
  private void findCalledFunctions(
      Node node, Set<String> changed) {
    Preconditions.checkArgument(changed != null);
    // For each referenced function, add a new reference
    if (node.isName()) {
      if (isCandidateUsage(node)) {
        changed.add(node.getString());
      }
    }

    for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {
      findCalledFunctions(c, changed);
    }
  }

  /**
   * For any call-site that needs it, prepare the call-site for inlining
   * by rewriting the containing expression.
   */
  private void decomposeExpressions() {
    for (FunctionState fs : fns.values()) {
      if (fs.canInline()) {
        for (Reference ref : fs.getReferences()) {
          if (ref.requiresDecomposition) {
            injector.maybePrepareCall(ref.callNode);
          }
        }
      }
    }
  }

  /**
   * Removed inlined functions that no longer have any references.
   */
  void removeInlinedFunctions() {
    for (FunctionState fs : fns.values()) {
      if (fs.canRemove()) {
        Function fn = fs.getFn();
        Preconditions.checkState(fs.canInline());
        Preconditions.checkState(fn != null);
        verifyAllReferencesInlined(fs);

        if (specializationState != null) {
          specializationState.reportRemovedFunction(
              fn.getFunctionNode(), fn.getDeclaringBlock());
        }

        fn.remove();
      }
    }
  }

  /**
   * Sanity check to verify, that expression rewriting didn't
   * make a call inaccessible.
   */
  void verifyAllReferencesInlined(FunctionState fs) {
    for (Reference ref : fs.getReferences()) {
      if (!ref.inlined) {
        throw new IllegalStateException("Call site missed.\n call: "
            + ref.callNode.toStringTree() + "\n parent:  "
            + ref.callNode.getParent().toStringTree());
      }
    }
  }

  /**
   * Use to track the decisions that have been make about a function.
   */
  private static class FunctionState {
    private Function fn = null;
    private Node safeFnNode = null;
    private boolean inline = true;
    private boolean remove = true;
    private boolean inlineDirectly = false;
    private boolean referencesThis = false;
    private boolean hasInnerFunctions = false;
    private Map<Node, Reference> references = null;
    private JSModule module = null;
    private Set<String> namesToAlias = null;

    boolean hasExistingFunctionDefinition() {
      return (fn != null);
    }

    public void setReferencesThis(boolean referencesThis) {
      this.referencesThis = referencesThis;
    }

    public boolean getReferencesThis() {
      return this.referencesThis;
    }

    public void setHasInnerFunctions(boolean hasInnerFunctions) {
      this.hasInnerFunctions = hasInnerFunctions;
    }


    public boolean hasInnerFunctions() {
      return hasInnerFunctions;
    }

    void removeBlockInliningReferences() {
      Iterator<Entry<Node, Reference>> i;
      for (i = getReferencesInternal().entrySet().iterator(); i.hasNext();) {
        Entry<Node, Reference> entry = i.next();
        if (entry.getValue().mode == InliningMode.BLOCK) {
          i.remove();
        }
      }
    }

    public boolean hasBlockInliningReferences() {
      for (Reference r : getReferencesInternal().values()) {
        if (r.mode == InliningMode.BLOCK) {
          return true;
        }
      }
      return false;
    }

    public Function getFn() {
      return fn;
    }

    public void setFn(Function fn) {
      Preconditions.checkState(this.fn == null);
      this.fn = fn;
    }

    public Node getSafeFnNode() {
      return (safeFnNode != null) ? safeFnNode : fn.getFunctionNode();
    }

    public void setSafeFnNode(Node safeFnNode) {
      this.safeFnNode = safeFnNode;
    }

    public boolean canInline() {
      return inline;
    }

    public void setInline(boolean inline) {
      this.inline = inline;
      if (inline == false) {
        // No need to keep references to function that can't be inlined.
        references = null;
        // Don't remove functions that we aren't inlining.
        remove = false;
      }
    }

    public boolean canRemove() {
      return remove;
    }

    public void setRemove(boolean remove) {
      this.remove = remove;
    }

    public boolean canInlineDirectly() {
      return inlineDirectly;
    }

    public void inlineDirectly(boolean directReplacement) {
      this.inlineDirectly = directReplacement;
    }

    public boolean hasReferences() {
      return (references != null && !references.isEmpty());
    }

    private Map<Node, Reference> getReferencesInternal() {
      if (references == null) {
        return Collections.emptyMap();
      }
      return references;
    }

    public void addReference(Reference ref) {
      if (references == null) {
        references = Maps.newLinkedHashMap();
      }
      references.put(ref.callNode, ref);
    }

    public Collection<Reference> getReferences() {
      return getReferencesInternal().values();
    }

    public Reference getReference(Node n) {
      return getReferencesInternal().get(n);
    }

    public Set<String> getNamesToAlias() {
      if (namesToAlias == null) {
        return Collections.emptySet();
      }
      return Collections.unmodifiableSet(namesToAlias);
    }

    public void setNamesToAlias(Set<String> names) {
      namesToAlias = names;
    }

    public void setModule(JSModule module) {
      this.module = module;
    }

    public JSModule getModule() {
      return module;
    }
  }

  /**
   * Interface for dealing with function declarations and function
   * expressions equally
   */
  private static interface Function {
    /** Gets the name of the function */
    public String getName();

    /** Gets the function node */
    public Node getFunctionNode();

    /** Removes itself from the JavaScript */
    public void remove();

    public Node getDeclaringBlock();
  }

  /** NamedFunction implementation of the Function interface */
  private class NamedFunction implements Function {
    private final Node fn;

    public NamedFunction(Node fn) {
      this.fn = fn;
    }

    @Override
    public String getName() {
      return fn.getFirstChild().getString();
    }

    @Override
    public Node getFunctionNode() {
      return fn;
    }

    @Override
    public void remove() {
      compiler.reportChangeToEnclosingScope(fn);
      NodeUtil.removeChild(fn.getParent(), fn);
    }

    @Override
    public Node getDeclaringBlock() {
      return fn.getParent();
    }
  }

  /** FunctionVar implementation of the Function interface */
  private class FunctionVar implements Function {
    private final Node var;

    public FunctionVar(Node var) {
      this.var = var;
    }

    @Override
    public String getName() {
      return var.getFirstChild().getString();
    }

    @Override
    public Node getFunctionNode() {
      return var.getFirstChild().getFirstChild();
    }

    @Override
    public void remove() {
      compiler.reportChangeToEnclosingScope(var);
      NodeUtil.removeChild(var.getParent(), var);
    }

    @Override
    public Node getDeclaringBlock() {
      return var.getParent();
    }
  }

  /** FunctionExpression implementation of the Function interface */
  private class FunctionExpression implements Function {
    private final Node fn;
    private final String fakeName;

    public FunctionExpression(Node fn, int index) {
      this.fn = fn;
      // A number is not a valid function JavaScript identifier
      // so we don't need to worry about collisions.
      this.fakeName = String.valueOf(index);
    }

    @Override
    public String getName() {
      return fakeName;
    }

    @Override
    public Node getFunctionNode() {
      return fn;
    }

    @Override
    public void remove() {
      // Nothing to do. The function is removed with the call.
    }

    @Override
    public Node getDeclaringBlock() {
      return null;
    }

  }

  class Reference extends FunctionInjector.Reference {
    final boolean requiresDecomposition;
    boolean inlined = false;
    Reference(
        Node callNode, JSModule module, InliningMode mode, boolean decompose) {
      super(callNode, module, mode);
      this.requiresDecomposition = decompose;
    }
  }
}
Exception in thread "main" java.lang.NullPointerException
	at edu.lu.uni.serval.fixminer.insertTemplate.InsertIfNullCheck.readReturnType(InsertIfNullCheck.java:69)
	at edu.lu.uni.serval.fixminer.insertTemplate.InsertIfNullCheck.generatePatches(InsertIfNullCheck.java:32)
	at edu.lu.uni.serval.bug.fixer.FixMinerFixer.generatePatches(FixMinerFixer.java:266)
	at edu.lu.uni.serval.bug.fixer.FixMinerFixer.fixWithMatchedFixTemplates(FixMinerFixer.java:229)
	at edu.lu.uni.serval.bug.fixer.FixMinerFixer.fixProcess(FixMinerFixer.java:87)
	at edu.lu.uni.serval.fixminer.main.Main.fixBug(Main.java:56)
	at edu.lu.uni.serval.fixminer.main.Main.main(Main.java:21)
