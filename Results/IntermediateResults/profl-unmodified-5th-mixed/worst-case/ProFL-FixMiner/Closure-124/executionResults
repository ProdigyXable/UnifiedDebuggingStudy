Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable

java version "1.7.0_80"
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)

Java 7 environment setup completed
Closure-124
03:24:31.158 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Closure/124.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Closure/124.txt
03:29:35.185 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
03:29:35.246 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-124/generalSusInfo.profl
03:29:35.310 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/fixminer/ProFL-FixMiner/Closure-124/aggregatedSusInfo.profl
03:29:35.313 [main] INFO edu.lu.uni.serval.bug.fixer.FixMinerFixer - =======Fixing Beginning======
03:29:35.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===219
03:29:35.983 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return true;
return false;
03:29:35.998 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:36.727 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:29:36.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:37.468 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:37.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===214
03:29:37.516 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
if (node.isName() || isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
03:29:37.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:38.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node != null) {


}

if (node != null) {


}

if (replacement != null) {


}

03:29:38.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:38.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:38.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:39.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:39.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:40.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node == null) {
    return true;
}

if (node == null) {
    return false;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

if (node == null) {
    return true;
}

if (node == null) {
    return false;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

if (replacement == null) {
    return true;
}

if (replacement == null) {
    return false;
}

if (replacement == null) {
    throw new IllegalArgumentException("Empty variable: " + replacement);
}

03:29:40.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:41.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:41.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:41.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:41.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:42.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:42.479 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:43.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:43.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:43.871 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:43.872 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:44.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:44.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:45.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:45.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:45.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:45.986 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:46.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
	if (node.isName()) {
      return true;
    }
    Preconditions.checkArgument(node.isGetProp());

      node = node.getFirstChild();
    
null
if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
	Preconditions.checkArgument(node.isGetProp());

      node = node.getFirstChild();
    
null
if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
	node = node.getFirstChild();
    
null


    return true;
	if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }

MOVE-BUGGY-STATEMENT
03:29:46.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:47.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:47.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:48.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:48.099 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:48.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:48.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:49.487 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:29:49.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:50.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:50.173 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===213
03:29:50.223 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
node = node.getFirstChild();
node = node.getFirstChild(true);
node = node.getFirstChild(false);
03:29:50.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:50.976 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:50.977 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:51.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
node = node.getLastChild();
node = node.getNext();
node = node.getLastSibling();
node = node.getParent();
node = node.detachFromParent();
node = node.removeFirstChild();
node = node.removeChildren();
node = node.cloneNode();
node = node.cloneTree();
03:29:52.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:52.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:52.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:53.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:53.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:54.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:54.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:54.966 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:54.967 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:55.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:55.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:56.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:56.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:57.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:57.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:57.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:57.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:58.450 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node != null) {


}

03:29:58.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:59.146 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node == null) {
    return true;
}

if (node == null) {
    return false;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

03:29:59.147 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:29:59.830 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:29:59.831 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:00.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:00.532 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:01.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
node = node.getFirstChild();
	if (node.isName()) {
      return true;
    }
    Preconditions.checkArgument(node.isGetProp());

      
null
node = node.getFirstChild();
	Preconditions.checkArgument(node.isGetProp());

      
null

    if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
	node = node.getFirstChild();

MOVE-BUGGY-STATEMENT

    if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }

    return true;
	node = node.getFirstChild();

MOVE-BUGGY-STATEMENT
03:30:01.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:01.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:01.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:02.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:02.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:03.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:03.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:04.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:30:04.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:04.758 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:04.759 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===211
03:30:04.783 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Preconditions.checkArgument(node.isGetProp());
Preconditions.checkArgument(true, node.isGetProp());
Preconditions.checkArgument(false, node.isGetProp());
Preconditions.checkArgument(node.isGetProp(), true);
Preconditions.checkArgument(node.isGetProp(), false);
03:30:04.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:05.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:05.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:06.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:06.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:06.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:06.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:07.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkArgument(node, node.isGetProp());
Preconditions.checkArgument(replacement, node.isGetProp());
Preconditions.checkArgument(node.isGetProp(), node);
Preconditions.checkArgument(node.isGetProp(), replacement);
03:30:07.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:08.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:08.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:08.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:08.962 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:09.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:09.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:10.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node != null) {


}

03:30:10.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:11.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node == null) {
    return true;
}

if (node == null) {
    return false;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

03:30:11.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:11.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:11.740 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:12.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:12.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:13.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Preconditions.checkArgument(node.isGetProp());
	if (node.isName()) {
      return true;
    }
    
null


      node = node.getFirstChild();
	Preconditions.checkArgument(node.isGetProp());

MOVE-BUGGY-STATEMENT


      node = node.getFirstChild();
    if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
	Preconditions.checkArgument(node.isGetProp());

MOVE-BUGGY-STATEMENT


      node = node.getFirstChild();
    if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }

    return true;
	Preconditions.checkArgument(node.isGetProp());

MOVE-BUGGY-STATEMENT
03:30:13.122 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:13.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:13.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:14.498 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:14.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:15.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:15.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:15.887 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:30:15.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:16.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:16.599 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===155
03:30:16.610 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return false;
return true;
03:30:16.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:17.314 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:30:17.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:18.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:18.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===208
03:30:18.036 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (node.isName()) {
      return true;
    }
if (node.hasChildren()) {
      return true;
    }
if (node.isFromExterns()) {
      return true;
    }
if (node.hasOneChild()) {
      return true;
    }
if (node.hasMoreThanOneChild()) {
      return true;
    }
if (node.isQualifiedName()) {
      return true;
    }
if (node.isUnscopedQualifiedName()) {
      return true;
    }
if (node.isVarArgs()) {
      return true;
    }
if (node.isOptionalArg()) {
      return true;
    }
if (node.isSyntheticBlock()) {
      return true;
    }
if (node.wasEmptyNode()) {
      return true;
    }
if (node.isOnlyModifiesThisCall()) {
      return true;
    }
if (node.isOnlyModifiesArgumentsCall()) {
      return true;
    }
if (node.isNoSideEffectsCall()) {
      return true;
    }
if (node.isLocalResultCall()) {
      return true;
    }
if (node.mayMutateArguments()) {
      return true;
    }
if (node.mayMutateGlobalStateOrThrow()) {
      return true;
    }
if (node.isQuotedString()) {
      return true;
    }
if (node.isAdd()) {
      return true;
    }
if (node.isAnd()) {
      return true;
    }
if (node.isArrayLit()) {
      return true;
    }
if (node.isAssign()) {
      return true;
    }
if (node.isAssignAdd()) {
      return true;
    }
if (node.isBlock()) {
      return true;
    }
if (node.isBreak()) {
      return true;
    }
if (node.isCall()) {
      return true;
    }
if (node.isCase()) {
      return true;
    }
if (node.isCast()) {
      return true;
    }
if (node.isCatch()) {
      return true;
    }
if (node.isComma()) {
      return true;
    }
if (node.isContinue()) {
      return true;
    }
if (node.isDebugger()) {
      return true;
    }
if (node.isDec()) {
      return true;
    }
if (node.isDefaultCase()) {
      return true;
    }
if (node.isDelProp()) {
      return true;
    }
if (node.isDo()) {
      return true;
    }
if (node.isEmpty()) {
      return true;
    }
if (node.isExprResult()) {
      return true;
    }
if (node.isFalse()) {
      return true;
    }
if (node.isFor()) {
      return true;
    }
if (node.isFunction()) {
      return true;
    }
if (node.isGetterDef()) {
      return true;
    }
if (node.isGetElem()) {
      return true;
    }
if (node.isGetProp()) {
      return true;
    }
if (node.isHook()) {
      return true;
    }
if (node.isIf()) {
      return true;
    }
if (node.isIn()) {
      return true;
    }
if (node.isInc()) {
      return true;
    }
if (node.isInstanceOf()) {
      return true;
    }
if (node.isLabel()) {
      return true;
    }
if (node.isLabelName()) {
      return true;
    }
if (node.isNE()) {
      return true;
    }
if (node.isNew()) {
      return true;
    }
if (node.isNot()) {
      return true;
    }
if (node.isNull()) {
      return true;
    }
if (node.isNumber()) {
      return true;
    }
if (node.isObjectLit()) {
      return true;
    }
if (node.isOr()) {
      return true;
    }
if (node.isParamList()) {
      return true;
    }
if (node.isRegExp()) {
      return true;
    }
if (node.isReturn()) {
      return true;
    }
if (node.isScript()) {
      return true;
    }
if (node.isSetterDef()) {
      return true;
    }
if (node.isString()) {
      return true;
    }
if (node.isStringKey()) {
      return true;
    }
if (node.isSwitch()) {
      return true;
    }
if (node.isThis()) {
      return true;
    }
if (node.isThrow()) {
      return true;
    }
if (node.isTrue()) {
      return true;
    }
if (node.isTry()) {
      return true;
    }
if (node.isTypeOf()) {
      return true;
    }
if (node.isVar()) {
      return true;
    }
if (node.isVoid()) {
      return true;
    }
if (node.isWhile()) {
      return true;
    }
if (node.isWith()) {
      return true;
    }
03:30:18.151 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:18.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:18.838 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:19.564 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:19.565 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:20.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:20.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:21.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:21.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:21.702 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:21.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:22.392 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:22.393 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:23.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:23.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:23.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:23.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:24.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:24.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:25.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:25.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:25.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:25.899 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:26.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:26.636 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:27.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:27.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:28.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:28.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:28.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:28.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:29.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:29.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:30.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:30.263 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:30.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:30.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:31.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:31.680 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:32.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:32.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:33.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:33.109 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:33.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:33.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:34.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:34.536 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:35.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:35.286 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:36.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:36.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:36.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:36.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:37.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:37.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:38.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:38.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:38.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:38.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:39.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:39.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:40.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:40.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:40.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:40.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:41.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:41.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:42.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:42.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:43.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:43.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:43.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:43.721 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:44.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:44.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:45.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:45.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:45.799 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:45.800 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:46.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:46.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:47.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:47.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:47.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:47.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:48.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:48.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:49.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:49.276 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:49.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:49.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:50.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:50.690 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:51.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:51.369 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:52.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:52.065 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:52.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:52.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:53.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:53.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:54.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:54.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:54.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:54.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:55.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:55.598 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:56.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:56.306 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:56.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:56.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:57.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:57.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:58.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:58.378 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:59.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:59.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:30:59.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:30:59.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:00.557 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:00.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:01.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:01.249 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:01.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:01.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:02.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:02.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:03.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:03.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:04.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:04.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:04.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:04.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:05.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:05.491 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:06.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:06.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:06.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:06.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:07.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:07.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:08.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:08.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:09.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:09.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:09.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:09.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:10.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node.isName(replacement)) {
      return true;
    }
03:31:10.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:11.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node != null && node.isName()) {
      return true;
    }
if (node != null || node.isName()) {
      return true;
    }
03:31:11.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:11.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:11.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:12.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node != null) {


}

03:31:12.535 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:13.254 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node == null) {
    return true;
}

if (node == null) {
    return false;
}

if (node == null) {
    throw new IllegalArgumentException("Empty variable: " + node);
}

03:31:13.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:13.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:13.947 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:14.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:14.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:15.424 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

    Preconditions.checkArgument(node.isGetProp());
	if (node.isName()) {
      return true;
    }

MOVE-BUGGY-STATEMENT

    Preconditions.checkArgument(node.isGetProp());

      node = node.getFirstChild();
	if (node.isName()) {
      return true;
    }

MOVE-BUGGY-STATEMENT

    Preconditions.checkArgument(node.isGetProp());

      node = node.getFirstChild();
    if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }
	if (node.isName()) {
      return true;
    }

MOVE-BUGGY-STATEMENT

    Preconditions.checkArgument(node.isGetProp());

      node = node.getFirstChild();
    if (node.isName()
        && isNameAssignedTo(node.getString(), replacement)) {
      return false;
    }

    return true;
	if (node.isName()) {
      return true;
    }

MOVE-BUGGY-STATEMENT
03:31:15.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:16.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:16.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:16.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:16.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:17.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:17.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:18.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:31:18.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:19.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:19.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===152
03:31:19.070 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return true;
return false;
03:31:19.071 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:19.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:31:19.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:20.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:20.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===151
03:31:20.496 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
parent.replaceChild(next, assign);
parent.replaceChild(true, next, assign);
parent.replaceChild(false, next, assign);
parent.replaceChild(next, true, assign);
parent.replaceChild(next, false, assign);
parent.replaceChild(next, assign, true);
parent.replaceChild(next, assign, false);
03:31:20.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:21.229 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:21.230 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:21.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:21.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:22.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:22.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:23.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:23.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:24.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:24.103 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:24.843 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
parent.replaceChild(nextName, assign);
parent.replaceChild(expr, assign);
parent.replaceChild(exprParent, assign);
parent.replaceChild(value, assign);
parent.replaceChild( assign);
parent.replaceChild(nextName, next, assign);
parent.replaceChild(expr, next, assign);
parent.replaceChild(exprParent, next, assign);
parent.replaceChild(value, next, assign);
parent.replaceChild(next, nextName);
parent.replaceChild(next, expr);
parent.replaceChild(next, exprParent);
parent.replaceChild(next, value);
parent.replaceChild(next, );
parent.replaceChild(next, nextName, assign);
parent.replaceChild(next, expr, assign);
parent.replaceChild(next, exprParent, assign);
parent.replaceChild(next, value, assign);
parent.replaceChild(next, assign, nextName);
parent.replaceChild(next, assign, expr);
parent.replaceChild(next, assign, exprParent);
parent.replaceChild(next, assign, value);
03:31:24.844 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:25.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:25.563 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:26.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:26.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:26.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:26.958 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:27.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:27.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:28.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:28.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:29.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:29.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:29.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:29.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:30.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:30.518 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:31.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:31.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:32.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:32.021 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:32.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:32.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:33.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:33.431 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:34.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:34.114 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:34.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:34.464 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:35.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:35.193 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:35.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:35.928 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:36.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:36.670 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:37.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:37.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:38.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:38.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:38.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:38.822 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:39.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:39.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:40.228 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
parent.addChildBefore(next, assign);
parent.addChildAfter(next, assign);
parent.addChildrenAfter(next, assign);
parent.replaceChildAfter(next, assign);
03:31:40.283 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:41.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:41.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:41.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:41.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:42.398 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:42.399 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:43.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (parent != null) {


}

if (next != null) {


}

if (assign != null) {


}

03:31:43.118 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:43.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:43.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:44.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:44.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:45.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (parent == null) {
    return true;
}

if (parent == null) {
    return false;
}

if (parent == null) {
    throw new IllegalArgumentException("Empty variable: " + parent);
}

if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

if (assign == null) {
    return true;
}

if (assign == null) {
    return false;
}

if (assign == null) {
    throw new IllegalArgumentException("Empty variable: " + assign);
}

03:31:45.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:45.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:45.892 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:46.677 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:46.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:47.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:47.383 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:48.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:48.123 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:48.832 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:48.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:49.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:49.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:50.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:50.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:50.942 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:50.943 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:51.661 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
parent.replaceChild(next, assign);
	if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              
null
parent.replaceChild(next, assign);
	exprParent.removeChild(expr);
              expr.removeChild(assign);
              
null
parent.replaceChild(next, assign);
	expr.removeChild(assign);
              
null

              return true;
	parent.replaceChild(next, assign);

MOVE-BUGGY-STATEMENT
03:31:51.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:52.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:52.377 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:53.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:53.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:53.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:53.771 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:54.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:31:54.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:55.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:55.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===150
03:31:55.205 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
expr.removeChild(assign);
expr.removeChild(true, assign);
expr.removeChild(false, assign);
expr.removeChild(assign, true);
expr.removeChild(assign, false);
03:31:55.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:55.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:55.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:56.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:56.606 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:57.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:57.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:58.008 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
expr.removeChild(nextName);
expr.removeChild(next);
expr.removeChild(parent);
expr.removeChild(exprParent);
expr.removeChild(value);
expr.removeChild();
expr.removeChild(nextName, assign);
expr.removeChild(next, assign);
expr.removeChild(parent, assign);
expr.removeChild(exprParent, assign);
expr.removeChild(value, assign);
expr.removeChild(assign, nextName);
expr.removeChild(assign, next);
expr.removeChild(assign, parent);
expr.removeChild(assign, exprParent);
expr.removeChild(assign, value);
03:31:58.009 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:58.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:58.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:31:59.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:31:59.484 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:00.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:00.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:00.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:00.918 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:01.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:01.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:02.336 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:02.337 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:03.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:03.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:03.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:03.736 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:04.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:04.449 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:05.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:05.148 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:05.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:05.877 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:06.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:06.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:07.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:07.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:08.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:08.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:08.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:08.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:09.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
expr.getChildBefore(assign);
expr.clonePropsFrom(assign);
expr.removeChildAfter(assign);
expr.copyInformationFrom(assign);
expr.copyInformationFromForTree(assign);
expr.useSourceInfoFrom(assign);
expr.srcref(assign);
expr.useSourceInfoFromForTree(assign);
expr.srcrefTree(assign);
expr.useSourceInfoIfMissingFrom(assign);
expr.useSourceInfoIfMissingFromForTree(assign);
expr.checkTreeEquals(assign);
expr.getIndexOfChild(assign);
expr.addChildToFront(assign);
expr.addChildToBack(assign);
expr.addChildrenToFront(assign);
expr.addChildrenToBack(assign);
expr.hasChild(assign);
expr.isEquivalentTo(assign);
expr.isEquivalentToShallow(assign);
expr.isEquivalentToTyped(assign);
expr.checkTreeEqualsImpl(assign);
expr.checkTreeTypeAwareEqualsImpl(assign);
03:32:09.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:10.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:10.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:11.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:11.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:11.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:11.712 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:12.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:12.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:13.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:13.139 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:13.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:13.842 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:14.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:14.569 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:15.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:15.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:16.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:16.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:16.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:16.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:17.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:17.441 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:18.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:18.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:18.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:18.813 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:19.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:19.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:20.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:20.234 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:20.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:20.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:21.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:21.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:22.381 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:22.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:23.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:23.111 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:23.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:23.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:24.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:24.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:25.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:25.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:26.002 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (expr != null) {


}

if (assign != null) {


}

03:32:26.003 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:26.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:26.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:27.465 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (expr == null) {
    return true;
}

if (expr == null) {
    return false;
}

if (expr == null) {
    throw new IllegalArgumentException("Empty variable: " + expr);
}

if (assign == null) {
    return true;
}

if (assign == null) {
    return false;
}

if (assign == null) {
    throw new IllegalArgumentException("Empty variable: " + assign);
}

03:32:27.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:28.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:28.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:28.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:28.875 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:29.627 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:29.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:30.328 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:30.329 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:31.063 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:31.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:31.778 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
expr.removeChild(assign);
	if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              
null
expr.removeChild(assign);
	exprParent.removeChild(expr);
              
null

              parent.replaceChild(next, assign);
	expr.removeChild(assign);

MOVE-BUGGY-STATEMENT

              parent.replaceChild(next, assign);
              return true;
	expr.removeChild(assign);

MOVE-BUGGY-STATEMENT
03:32:31.779 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:32.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:32.497 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:33.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:33.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:33.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:33.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:34.620 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:32:34.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:35.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:35.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===149
03:32:35.381 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
exprParent.removeChild(expr);
exprParent.removeChild(true, expr);
exprParent.removeChild(false, expr);
exprParent.removeChild(expr, true);
exprParent.removeChild(expr, false);
03:32:35.382 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:36.078 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:36.079 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:36.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:36.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:37.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:37.456 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:38.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
exprParent.removeChild(nextName);
exprParent.removeChild(next);
exprParent.removeChild(parent);
exprParent.removeChild(assign);
exprParent.removeChild(value);
exprParent.removeChild();
exprParent.removeChild(nextName, expr);
exprParent.removeChild(next, expr);
exprParent.removeChild(parent, expr);
exprParent.removeChild(assign, expr);
exprParent.removeChild(value, expr);
exprParent.removeChild(expr, nextName);
exprParent.removeChild(expr, next);
exprParent.removeChild(expr, parent);
exprParent.removeChild(expr, assign);
exprParent.removeChild(expr, value);
03:32:38.156 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:38.849 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:38.850 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:39.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:39.572 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:40.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:40.262 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:40.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:40.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:41.706 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:41.707 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:42.418 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:42.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:43.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:43.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:43.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:43.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:44.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:44.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:45.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:45.232 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:45.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:45.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:46.662 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:46.663 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:47.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:47.417 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:48.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:48.132 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:48.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:48.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:49.695 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
exprParent.getChildBefore(expr);
exprParent.clonePropsFrom(expr);
exprParent.removeChildAfter(expr);
exprParent.copyInformationFrom(expr);
exprParent.copyInformationFromForTree(expr);
exprParent.useSourceInfoFrom(expr);
exprParent.srcref(expr);
exprParent.useSourceInfoFromForTree(expr);
exprParent.srcrefTree(expr);
exprParent.useSourceInfoIfMissingFrom(expr);
exprParent.useSourceInfoIfMissingFromForTree(expr);
exprParent.checkTreeEquals(expr);
exprParent.getIndexOfChild(expr);
exprParent.addChildToFront(expr);
exprParent.addChildToBack(expr);
exprParent.addChildrenToFront(expr);
exprParent.addChildrenToBack(expr);
exprParent.hasChild(expr);
exprParent.isEquivalentTo(expr);
exprParent.isEquivalentToShallow(expr);
exprParent.isEquivalentToTyped(expr);
exprParent.checkTreeEqualsImpl(expr);
exprParent.checkTreeTypeAwareEqualsImpl(expr);
03:32:49.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:50.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:50.466 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:51.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:51.212 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:51.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:51.926 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:52.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:52.633 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:53.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:53.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:54.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:54.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:54.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:54.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:55.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:55.575 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:56.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:56.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:57.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:57.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:57.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:57.701 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:58.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:58.461 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:59.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:59.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:32:59.845 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:32:59.846 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:00.560 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:00.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:01.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:01.285 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:01.984 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:01.985 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:02.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:02.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:03.444 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:03.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:04.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:04.161 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:04.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:04.898 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:05.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:05.624 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:06.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (exprParent != null) {


}

if (expr != null) {


}

03:33:06.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:07.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:07.073 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:07.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (exprParent == null) {
    return true;
}

if (exprParent == null) {
    return false;
}

if (exprParent == null) {
    throw new IllegalArgumentException("Empty variable: " + exprParent);
}

if (expr == null) {
    return true;
}

if (expr == null) {
    return false;
}

if (expr == null) {
    throw new IllegalArgumentException("Empty variable: " + expr);
}

03:33:07.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:08.470 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:08.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:09.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:09.186 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:09.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:09.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:10.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:10.604 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:11.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:11.304 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:12.041 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
exprParent.removeChild(expr);
	if (!isSafeReplacement(next, assign)) {
                return false;
              }

              
null

              expr.removeChild(assign);
	exprParent.removeChild(expr);

MOVE-BUGGY-STATEMENT

              expr.removeChild(assign);
              parent.replaceChild(next, assign);
	exprParent.removeChild(expr);

MOVE-BUGGY-STATEMENT

              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
	exprParent.removeChild(expr);

MOVE-BUGGY-STATEMENT
03:33:12.042 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:12.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:12.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:13.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:13.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:14.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:14.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:14.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:33:14.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:15.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:15.671 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===145
03:33:15.678 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (!isSafeReplacement(next, assign)) {
                return false;
              }
if (next != null) {


}

if (assign != null) {


}

03:33:15.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:16.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:16.388 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:17.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

if (assign == null) {
    return true;
}

if (assign == null) {
    return false;
}

if (assign == null) {
    throw new IllegalArgumentException("Empty variable: " + assign);
}

03:33:17.091 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:17.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:17.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:18.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:18.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:19.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:19.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:19.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:19.961 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:20.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:20.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:21.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 


              exprParent.removeChild(expr);
	if (!isSafeReplacement(next, assign)) {
                return false;
              }

MOVE-BUGGY-STATEMENT


              exprParent.removeChild(expr);
              expr.removeChild(assign);
	if (!isSafeReplacement(next, assign)) {
                return false;
              }

MOVE-BUGGY-STATEMENT


              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
	if (!isSafeReplacement(next, assign)) {
                return false;
              }

MOVE-BUGGY-STATEMENT


              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
	if (!isSafeReplacement(next, assign)) {
                return false;
              }

MOVE-BUGGY-STATEMENT
03:33:21.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:22.076 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:22.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:22.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:22.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:23.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:23.492 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:24.180 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:33:24.181 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:24.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:24.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===138
03:33:24.930 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
if (value.isQualifiedName() || nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
03:33:24.931 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:25.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (value != null) {


}

if (nextName != null) {


}

if (value != null) {


}

03:33:25.648 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:26.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:26.331 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:27.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:27.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:27.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (value == null) {
    return true;
}

if (value == null) {
    return false;
}

if (value == null) {
    throw new IllegalArgumentException("Empty variable: " + value);
}

if (nextName == null) {
    return true;
}

if (nextName == null) {
    return false;
}

if (nextName == null) {
    throw new IllegalArgumentException("Empty variable: " + nextName);
}

if (value == null) {
    return true;
}

if (value == null) {
    return false;
}

if (value == null) {
    throw new IllegalArgumentException("Empty variable: " + value);
}

03:33:27.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:28.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:28.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:29.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:29.200 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:29.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:29.920 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:30.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:30.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:31.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:31.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:32.066 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:32.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:32.769 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:32.770 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:33.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:33.473 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:34.190 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
	String nextName = next.getQualifiedName();
            
null
03:33:34.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:34.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:33:34.893 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:35.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:35.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===137
03:33:35.616 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
String nextName = next.getQualifiedName();
String nextName = next.getString();
String nextName = next.toString();
String nextName = next.toStringTree();
String nextName = next.toStringTreeImpl();
String nextName = next.getSourceFileName();
03:33:35.664 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:36.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:36.420 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:37.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:37.121 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:37.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:37.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:38.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:38.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:39.210 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
String nextName = next.getQualifiedName(nextName);
String nextName = next.getQualifiedName(parent);
String nextName = next.getQualifiedName(assign);
String nextName = next.getQualifiedName(expr);
String nextName = next.getQualifiedName(exprParent);
String nextName = next.getQualifiedName(value);
03:33:39.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:39.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:39.911 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:40.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:40.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:41.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:41.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:42.026 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:42.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:42.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:42.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:43.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
String nextName = nextName.getQualifiedName();
String nextName = parent.getQualifiedName();
String nextName = assign.getQualifiedName();
String nextName = expr.getQualifiedName();
String nextName = exprParent.getQualifiedName();
String nextName = value.getQualifiedName();
03:33:43.531 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:44.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:44.227 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:44.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:44.924 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:45.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:45.614 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:46.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:46.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:47.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:47.056 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:47.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next != null) {


}

03:33:47.763 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:48.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:33:48.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:49.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:49.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:49.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:49.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:50.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:33:50.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:51.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:51.272 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===136
03:33:51.278 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.hasChildren()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isFromExterns()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.hasOneChild()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.hasMoreThanOneChild()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isUnscopedQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isVarArgs()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isOptionalArg()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isSyntheticBlock()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.wasEmptyNode()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isOnlyModifiesThisCall()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isOnlyModifiesArgumentsCall()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isNoSideEffectsCall()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isLocalResultCall()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.mayMutateArguments()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.mayMutateGlobalStateOrThrow()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isQuotedString()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isAdd()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isAnd()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isArrayLit()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isAssign()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isAssignAdd()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isBlock()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isBreak()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isCall()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isCase()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isCast()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isCatch()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isComma()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isContinue()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isDebugger()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isDec()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isDefaultCase()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isDelProp()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isDo()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isEmpty()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isExprResult()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isFalse()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isFor()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isFunction()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isGetterDef()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isGetElem()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isGetProp()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isHook()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isIf()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isIn()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isInc()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isInstanceOf()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isLabel()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isLabelName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isNE()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isNew()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isNot()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isNull()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isNumber()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isObjectLit()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isOr()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isParamList()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isRegExp()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isReturn()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isScript()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isSetterDef()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isString()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isStringKey()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isSwitch()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isThis()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isThrow()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isTrue()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isTry()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isTypeOf()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isVar()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isVoid()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isWhile()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isWith()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
03:33:51.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:52.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:52.025 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:52.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:52.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:53.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:53.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:54.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:54.172 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:54.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:54.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:55.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:55.549 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:56.259 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:56.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:56.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:56.964 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:57.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:57.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:58.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:58.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:59.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:59.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:33:59.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:33:59.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:00.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:00.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:01.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:01.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:01.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:01.810 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:02.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:02.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:03.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:03.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:03.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:03.867 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:04.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:04.555 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:05.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:05.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:05.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:05.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:06.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:06.743 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:07.471 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:07.472 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:08.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:08.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:08.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:08.888 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:09.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:09.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:10.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:10.347 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:11.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:11.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:11.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:11.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:12.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:12.469 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:13.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:13.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:13.890 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:13.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:14.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:14.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:15.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:15.315 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:16.022 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:16.023 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:16.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:16.732 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:17.410 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:17.411 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:18.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:18.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:18.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:18.816 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:19.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:19.503 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:20.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:20.206 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:20.937 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:20.938 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:21.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:21.658 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:22.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:22.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:23.059 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:23.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:23.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:23.764 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:24.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:24.494 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:25.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:25.191 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:25.894 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:25.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:26.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:26.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:27.361 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:27.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:28.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:28.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:28.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:28.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:29.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:29.530 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:30.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:30.282 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:31.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:31.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:31.826 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:31.827 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:32.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:32.595 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:33.309 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:33.310 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:34.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:34.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:34.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:34.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:35.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:35.460 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:36.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:36.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:36.859 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:36.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:37.590 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:37.591 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:38.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:38.318 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:39.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:39.014 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:39.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:39.742 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:40.451 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:40.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:41.140 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:41.141 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:41.882 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:41.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:42.612 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:42.613 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:43.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:43.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:43.991 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next.isQualifiedName(parent)) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isQualifiedName(assign)) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isQualifiedName(expr)) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isQualifiedName(exprParent)) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next.isQualifiedName(value)) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
03:34:43.992 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:44.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:44.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:45.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:45.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:46.116 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:46.117 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:46.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:46.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:47.551 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next != null && next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
if (next != null || next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
03:34:47.552 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:48.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:48.275 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:48.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next != null) {


}

03:34:48.980 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:49.292 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:34:49.293 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:49.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:49.996 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:50.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:50.711 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:51.415 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

          return false;
	if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }

MOVE-BUGGY-STATEMENT
03:34:51.416 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:52.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:34:52.104 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:52.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:52.794 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===55
03:34:52.800 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
reportCodeChange();
reportCodeChange(true);
reportCodeChange(false);
03:34:52.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:53.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:53.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:54.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
reportCodeChange(rightValue);
reportCodeChange(leftValue);
reportCodeChange(assign);
reportCodeChange(expr);
reportCodeChange(exprParent);
03:34:54.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:54.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:54.927 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:55.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:55.632 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:56.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:56.341 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:57.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:57.028 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:57.723 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
isASTNormalized();
isEcmaScript5OrGreater();
getCodingConvention();
03:34:57.729 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:58.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:58.419 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:59.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:34:59.128 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:34:59.811 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

    } else if (rightValue.isAssign()) {
      // Recursively deal with nested assigns.
      collapseAssign(rightValue, expr, exprParent);
    }
	reportCodeChange();

MOVE-BUGGY-STATEMENT
03:34:59.812 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:00.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:35:00.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:01.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:35:01.261 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1457
03:35:01.328 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return res;
if (res != null) {


}

03:35:01.330 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:02.255 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (res == null) {
    return null;
}

if (res == null) {
    throw new IllegalArgumentException("Empty variable: " + res);
}

03:35:02.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:03.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:35:03.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:04.150 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
detachChildren();
	return res;
return res;
	detachChildren();
setQuotedString();
	return res;
return res;
	setQuotedString();
03:35:04.153 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:05.089 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:35:05.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:06.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:35:06.027 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:35:06.994 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:35:06.995 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:04.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:36:04.669 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:06.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:06.296 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1428
03:36:06.361 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return "Node tree inequality:" +
            "\nTree1:\n" + toStringTree() +
            "\n\nTree2:\n" + node2.toStringTree() +
            "\n\nSubtree1: " + diff.nodeA.toStringTree() +
            "\n\nSubtree2: " + diff.nodeB.toStringTree();
if (node2 != null) {


}

03:36:06.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:07.305 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

03:36:07.307 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:08.288 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:08.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:09.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:36:09.260 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:10.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:10.215 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===58
03:36:10.221 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
collapseAssign(rightValue, expr, exprParent);
collapseAssign(true, rightValue, expr, exprParent);
collapseAssign(false, rightValue, expr, exprParent);
collapseAssign(rightValue, true, expr, exprParent);
collapseAssign(rightValue, false, expr, exprParent);
collapseAssign(rightValue, expr, true, exprParent);
collapseAssign(rightValue, expr, false, exprParent);
collapseAssign(rightValue, expr, exprParent, true);
collapseAssign(rightValue, expr, exprParent, false);
03:36:10.221 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:10.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:10.909 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:11.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:11.639 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:12.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:12.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:13.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:13.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:13.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:13.768 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:14.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:14.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:15.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:15.185 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:15.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
collapseAssign(leftValue, expr, exprParent);
collapseAssign(assign, expr, exprParent);
collapseAssign( expr, exprParent);
collapseAssign(leftValue, rightValue, expr, exprParent);
collapseAssign(assign, rightValue, expr, exprParent);
collapseAssign(rightValue, leftValue, exprParent);
collapseAssign(rightValue, assign, exprParent);
collapseAssign(rightValue,  exprParent);
collapseAssign(rightValue, leftValue, expr, exprParent);
collapseAssign(rightValue, assign, expr, exprParent);
collapseAssign(rightValue, expr, leftValue);
collapseAssign(rightValue, expr, assign);
collapseAssign(rightValue, expr, );
collapseAssign(rightValue, expr, leftValue, exprParent);
collapseAssign(rightValue, expr, assign, exprParent);
collapseAssign(rightValue, expr, exprParent, leftValue);
collapseAssign(rightValue, expr, exprParent, assign);
03:36:15.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:16.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:16.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:17.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:17.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:18.069 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:18.070 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:18.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:18.767 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:19.475 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:19.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:20.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:20.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:20.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:20.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:21.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:21.589 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:22.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:22.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:23.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:23.127 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:23.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:23.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:24.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:24.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:24.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:24.855 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:25.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:25.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:26.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:26.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:26.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:26.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:27.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
collapseAssignEqualTo(rightValue, expr, exprParent);
03:36:27.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:28.673 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (rightValue != null) {


}

if (expr != null) {


}

if (exprParent != null) {


}

03:36:28.674 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:29.646 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:29.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:30.348 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:30.349 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:31.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (rightValue == null) {
    return;
}

if (rightValue == null) {
    throw new IllegalArgumentException("Empty variable: " + rightValue);
}

if (expr == null) {
    return;
}

if (expr == null) {
    throw new IllegalArgumentException("Empty variable: " + expr);
}

if (exprParent == null) {
    return;
}

if (exprParent == null) {
    throw new IllegalArgumentException("Empty variable: " + exprParent);
}

03:36:31.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:32.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:32.107 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:33.169 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:33.170 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:33.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:33.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:34.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:34.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:35.372 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:35.373 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:36.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:36:36.090 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:36.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:36.801 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===177
03:36:36.806 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
break;

03:36:36.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:37.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:37.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===176
03:36:37.498 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
next = leftSide.getNext();
next = leftSide.getNext(true);
next = leftSide.getNext(false);
03:36:37.499 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:38.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:38.205 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:38.923 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
next = leftSide.getFirstChild();
next = leftSide.getLastChild();
next = leftSide.getLastSibling();
next = leftSide.getParent();
next = leftSide.detachFromParent();
next = leftSide.removeFirstChild();
next = leftSide.removeChildren();
next = leftSide.cloneNode();
next = leftSide.cloneTree();
03:36:38.965 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:39.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:39.679 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:40.396 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:40.397 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:41.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:41.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:41.834 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:41.835 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:42.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:42.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:43.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:43.266 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:43.951 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:43.952 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:44.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:44.649 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:45.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (leftSide != null) {


}

03:36:45.333 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:46.047 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (leftSide == null) {
    return true;
}

if (leftSide == null) {
    return false;
}

if (leftSide == null) {
    throw new IllegalArgumentException("Empty variable: " + leftSide);
}

03:36:46.048 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:46.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:46.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:47.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:47.699 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:48.807 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
next = leftSide.getNext();
	parent = next;
            
null

            break;
	next = leftSide.getNext();

MOVE-BUGGY-STATEMENT

            break;
          } else {
            return false;
	next = leftSide.getNext();

MOVE-BUGGY-STATEMENT
03:36:48.808 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:49.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:49.750 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:50.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:50.445 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:51.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:36:51.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:51.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:51.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===175
03:36:51.824 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
parent = next;
if (next != null) {


}

03:36:51.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:52.516 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:36:52.517 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:53.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:53.204 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:53.901 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:53.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:54.609 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

            next = leftSide.getNext();
	parent = next;

MOVE-BUGGY-STATEMENT

            next = leftSide.getNext();
            break;
	parent = next;

MOVE-BUGGY-STATEMENT

            next = leftSide.getNext();
            break;
          } else {
            return false;
	parent = next;

MOVE-BUGGY-STATEMENT
03:36:54.610 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:55.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:55.339 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:56.060 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:56.061 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:56.782 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:36:56.783 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:57.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:57.483 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===171
03:36:57.489 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }
if (leftSide.isName() && leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }
if (leftSide.isName() ||
              leftSide.isGetProp() || leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }
03:36:57.489 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:58.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:58.197 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:58.878 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (leftSide != null) {


}

if (leftSide != null) {


}

if (leftSide != null) {


}

03:36:58.879 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:36:59.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:36:59.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:00.363 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:00.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:01.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (leftSide == null) {
    return true;
}

if (leftSide == null) {
    return false;
}

if (leftSide == null) {
    throw new IllegalArgumentException("Empty variable: " + leftSide);
}

if (leftSide == null) {
    return true;
}

if (leftSide == null) {
    return false;
}

if (leftSide == null) {
    throw new IllegalArgumentException("Empty variable: " + leftSide);
}

if (leftSide == null) {
    return true;
}

if (leftSide == null) {
    return false;
}

if (leftSide == null) {
    throw new IllegalArgumentException("Empty variable: " + leftSide);
}

03:37:01.043 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:01.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:01.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:02.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:02.437 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:03.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:03.160 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:03.860 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:03.861 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:04.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:04.542 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:05.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:05.313 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:06.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:06.064 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:07.202 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:07.203 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:08.622 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }
	Node leftSide = next.getFirstChild();
          
null
03:37:08.623 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:09.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:37:09.747 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:10.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:10.686 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===170
03:37:10.691 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node leftSide = next.getFirstChild();
Node leftSide = next.getLastChild();
Node leftSide = next.getNext();
Node leftSide = next.getLastSibling();
Node leftSide = next.getParent();
Node leftSide = next.detachFromParent();
Node leftSide = next.removeFirstChild();
Node leftSide = next.removeChildren();
Node leftSide = next.cloneNode();
Node leftSide = next.cloneTree();
03:37:10.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:11.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:11.425 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:12.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:12.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:12.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:12.883 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:13.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:13.638 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:14.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:14.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:15.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:15.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:15.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:15.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:16.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:16.493 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:17.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Node leftSide = next.getFirstChild(leftSide);
Node leftSide = next.getFirstChild(parent);
Node leftSide = next.getFirstChild(assign);
Node leftSide = next.getFirstChild(expr);
Node leftSide = next.getFirstChild(exprParent);
Node leftSide = next.getFirstChild(value);
03:37:17.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:17.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:17.895 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:18.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:18.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:19.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:19.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:20.050 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:20.051 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:20.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:20.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:21.558 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Node leftSide = leftSide.getFirstChild();
Node leftSide = parent.getFirstChild();
Node leftSide = assign.getFirstChild();
Node leftSide = expr.getFirstChild();
Node leftSide = exprParent.getFirstChild();
Node leftSide = value.getFirstChild();
03:37:21.559 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:22.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:22.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:22.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:22.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:23.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:23.672 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:24.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:24.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:25.112 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:25.113 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:25.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next != null) {


}

03:37:25.805 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:26.506 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:37:26.507 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:27.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:27.231 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:27.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:27.948 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:28.692 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:37:28.693 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:29.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:29.401 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.rhino.Node ===1444
03:37:29.457 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return new NodeMismatch(this, node2);
if (node2 != null) {


}

03:37:29.459 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:30.404 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (node2 == null) {
    return null;
}

if (node2 == null) {
    throw new IllegalArgumentException("Empty variable: " + node2);
}

03:37:30.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:31.364 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:31.365 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:32.439 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
addChildToFront(node2);
addChildToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToFront(node2);
addChildToBack(node2);
addChildToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildToBack(node2);
addChildrenToFront(node2);
addChildrenToFront(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToFront(node2);
addChildrenToBack(node2);
addChildrenToBack(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	addChildrenToBack(node2);
removeChild(node2);
removeChild(node2);
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	removeChild(node2);
detachChildren();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	detachChildren();
setQuotedString();
	return new NodeMismatch(this, node2);
return new NodeMismatch(this, node2);
	setQuotedString();
03:37:32.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:33.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:33.455 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:34.406 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:34.407 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:35.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:35.367 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:36.374 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:36.375 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:37.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:37.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:38.294 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:38.295 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:39.607 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:39.608 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:40.703 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:40.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:41.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:41.647 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:42.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:42.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:43.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:43.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:44.578 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:44.579 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:45.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:45.913 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:47.029 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:47.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:47.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:47.973 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:48.959 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:48.960 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:49.906 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:49.907 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:50.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:50.891 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:51.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:37:51.935 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:53.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:53.152 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===124
03:37:53.158 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
break;

03:37:53.159 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:54.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:54.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===123
03:37:54.245 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
next = next.getFirstChild();
next = next.getFirstChild(true);
next = next.getFirstChild(false);
03:37:54.245 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:54.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:54.981 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:55.694 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
next = next.getLastChild();
next = next.getNext();
next = next.getLastSibling();
next = next.getParent();
next = next.detachFromParent();
next = next.removeFirstChild();
next = next.removeChildren();
next = next.cloneNode();
next = next.cloneTree();
03:37:55.737 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:56.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:56.440 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:57.176 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:57.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:58.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:58.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:37:59.289 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:37:59.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:00.006 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:00.007 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:00.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:00.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:01.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:01.713 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:02.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:02.667 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:03.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next != null) {


}

03:38:03.359 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:03.665 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:38:03.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:04.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:04.400 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:05.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:05.098 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:05.856 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
next = next.getFirstChild();
	parent = next;
          
null

          break;
	next = next.getFirstChild();

MOVE-BUGGY-STATEMENT
03:38:05.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:06.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:06.588 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:07.300 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:07.301 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:08.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:08.004 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===122
03:38:08.012 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
parent = next;
if (next != null) {


}

03:38:08.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:08.323 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:38:08.324 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:09.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:09.057 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:09.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:09.836 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:10.561 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

          next = next.getFirstChild();
	parent = next;

MOVE-BUGGY-STATEMENT

          next = next.getFirstChild();
          break;
	parent = next;

MOVE-BUGGY-STATEMENT
03:38:10.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:11.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:11.312 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:12.019 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:12.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:12.791 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:12.792 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===114
03:38:12.797 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
switch (next.getType()) {
        case Token.AND:
        case Token.OR:
        case Token.HOOK:
        case Token.IF:
        case Token.RETURN:
        case Token.EXPR_RESULT:
          // Dive down the left side
          parent = next;
          next = next.getFirstChild();
          break;

        case Token.VAR:
          if (next.getFirstChild().hasChildren()) {
            parent = next.getFirstChild();
            next = parent.getFirstChild();
            break;
          }
          return false;

        case Token.GETPROP:
        case Token.NAME:
          if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
          return false;

        case Token.ASSIGN:
          // Assigns are really tricky. In lots of cases, we want to inline
          // into the right side of the assign. But the left side of the
          // assign is evaluated first, and it may have convoluted logic:
          //   a = null;
          //   (a = b).c = null;
          // We don't want to exploit the first assign. Similarly:
          //   a.b = null;
          //   a.b.c = null;
          // We don't want to exploit the first assign either.
          //
          // To protect against this, we simply only inline when the left side
          // is guaranteed to evaluate to the same L-value no matter what.
          Node leftSide = next.getFirstChild();
          if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }

        default:
          if (NodeUtil.isImmutableValue(next)
              && next.isEquivalentTo(value)) {
            // If the r-value of the expr assign is an immutable value,
            // and the value is used again shortly, then we can exploit
            // the assign here.
            exprParent.removeChild(expr);
            expr.removeChild(assign);
            parent.replaceChild(next, assign);
            return true;
          }
          // Return without inlining a thing
          return false;
      }
if (next != null) {


}

03:38:12.798 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:13.540 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:38:13.541 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:14.252 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:14.253 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:14.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:14.990 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:15.718 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:15.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:16.429 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:16.430 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===86
03:38:16.435 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return true;
return false;
03:38:16.436 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:17.154 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:17.155 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:17.852 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:17.853 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===198
03:38:17.858 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return false;
return true;
03:38:17.858 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:18.570 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:18.571 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:19.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:19.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===83
03:38:19.326 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return !isLValue || value.getFirstChild().isThis();
if (value != null) {


}

03:38:19.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:20.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (value == null) {
    return true;
}

if (value == null) {
    return false;
}

if (value == null) {
    throw new IllegalArgumentException("Empty variable: " + value);
}

03:38:20.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:20.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:20.761 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:21.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:21.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:22.257 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:22.258 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:22.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:22.969 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===113
03:38:22.974 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
while (next != null) {
      switch (next.getType()) {
        case Token.AND:
        case Token.OR:
        case Token.HOOK:
        case Token.IF:
        case Token.RETURN:
        case Token.EXPR_RESULT:
          // Dive down the left side
          parent = next;
          next = next.getFirstChild();
          break;

        case Token.VAR:
          if (next.getFirstChild().hasChildren()) {
            parent = next.getFirstChild();
            next = parent.getFirstChild();
            break;
          }
          return false;

        case Token.GETPROP:
        case Token.NAME:
          if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
          return false;

        case Token.ASSIGN:
          // Assigns are really tricky. In lots of cases, we want to inline
          // into the right side of the assign. But the left side of the
          // assign is evaluated first, and it may have convoluted logic:
          //   a = null;
          //   (a = b).c = null;
          // We don't want to exploit the first assign. Similarly:
          //   a.b = null;
          //   a.b.c = null;
          // We don't want to exploit the first assign either.
          //
          // To protect against this, we simply only inline when the left side
          // is guaranteed to evaluate to the same L-value no matter what.
          Node leftSide = next.getFirstChild();
          if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }

        default:
          if (NodeUtil.isImmutableValue(next)
              && next.isEquivalentTo(value)) {
            // If the r-value of the expr assign is an immutable value,
            // and the value is used again shortly, then we can exploit
            // the assign here.
            exprParent.removeChild(expr);
            expr.removeChild(assign);
            parent.replaceChild(next, assign);
            return true;
          }
          // Return without inlining a thing
          return false;
      }
    }
if (next != null) {


}

03:38:22.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:23.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (next == null) {
    return true;
}

if (next == null) {
    return false;
}

if (next == null) {
    throw new IllegalArgumentException("Empty variable: " + next);
}

03:38:23.685 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:24.394 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:24.395 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:25.130 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:25.131 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:25.863 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
while (next != null) {
      switch (next.getType()) {
        case Token.AND:
        case Token.OR:
        case Token.HOOK:
        case Token.IF:
        case Token.RETURN:
        case Token.EXPR_RESULT:
          // Dive down the left side
          parent = next;
          next = next.getFirstChild();
          break;

        case Token.VAR:
          if (next.getFirstChild().hasChildren()) {
            parent = next.getFirstChild();
            next = parent.getFirstChild();
            break;
          }
          return false;

        case Token.GETPROP:
        case Token.NAME:
          if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
          return false;

        case Token.ASSIGN:
          // Assigns are really tricky. In lots of cases, we want to inline
          // into the right side of the assign. But the left side of the
          // assign is evaluated first, and it may have convoluted logic:
          //   a = null;
          //   (a = b).c = null;
          // We don't want to exploit the first assign. Similarly:
          //   a.b = null;
          //   a.b.c = null;
          // We don't want to exploit the first assign either.
          //
          // To protect against this, we simply only inline when the left side
          // is guaranteed to evaluate to the same L-value no matter what.
          Node leftSide = next.getFirstChild();
          if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }

        default:
          if (NodeUtil.isImmutableValue(next)
              && next.isEquivalentTo(value)) {
            // If the r-value of the expr assign is an immutable value,
            // and the value is used again shortly, then we can exploit
            // the assign here.
            exprParent.removeChild(expr);
            expr.removeChild(assign);
            parent.replaceChild(next, assign);
            return true;
          }
          // Return without inlining a thing
          return false;
      }
    }
	Node assign = expr.getFirstChild();
    Node parent = exprParent;
    Node next = expr.getNext();
    
null
while (next != null) {
      switch (next.getType()) {
        case Token.AND:
        case Token.OR:
        case Token.HOOK:
        case Token.IF:
        case Token.RETURN:
        case Token.EXPR_RESULT:
          // Dive down the left side
          parent = next;
          next = next.getFirstChild();
          break;

        case Token.VAR:
          if (next.getFirstChild().hasChildren()) {
            parent = next.getFirstChild();
            next = parent.getFirstChild();
            break;
          }
          return false;

        case Token.GETPROP:
        case Token.NAME:
          if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
          return false;

        case Token.ASSIGN:
          // Assigns are really tricky. In lots of cases, we want to inline
          // into the right side of the assign. But the left side of the
          // assign is evaluated first, and it may have convoluted logic:
          //   a = null;
          //   (a = b).c = null;
          // We don't want to exploit the first assign. Similarly:
          //   a.b = null;
          //   a.b.c = null;
          // We don't want to exploit the first assign either.
          //
          // To protect against this, we simply only inline when the left side
          // is guaranteed to evaluate to the same L-value no matter what.
          Node leftSide = next.getFirstChild();
          if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }

        default:
          if (NodeUtil.isImmutableValue(next)
              && next.isEquivalentTo(value)) {
            // If the r-value of the expr assign is an immutable value,
            // and the value is used again shortly, then we can exploit
            // the assign here.
            exprParent.removeChild(expr);
            expr.removeChild(assign);
            parent.replaceChild(next, assign);
            return true;
          }
          // Return without inlining a thing
          return false;
      }
    }
	Node parent = exprParent;
    Node next = expr.getNext();
    
null
while (next != null) {
      switch (next.getType()) {
        case Token.AND:
        case Token.OR:
        case Token.HOOK:
        case Token.IF:
        case Token.RETURN:
        case Token.EXPR_RESULT:
          // Dive down the left side
          parent = next;
          next = next.getFirstChild();
          break;

        case Token.VAR:
          if (next.getFirstChild().hasChildren()) {
            parent = next.getFirstChild();
            next = parent.getFirstChild();
            break;
          }
          return false;

        case Token.GETPROP:
        case Token.NAME:
          if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
          return false;

        case Token.ASSIGN:
          // Assigns are really tricky. In lots of cases, we want to inline
          // into the right side of the assign. But the left side of the
          // assign is evaluated first, and it may have convoluted logic:
          //   a = null;
          //   (a = b).c = null;
          // We don't want to exploit the first assign. Similarly:
          //   a.b = null;
          //   a.b.c = null;
          // We don't want to exploit the first assign either.
          //
          // To protect against this, we simply only inline when the left side
          // is guaranteed to evaluate to the same L-value no matter what.
          Node leftSide = next.getFirstChild();
          if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }

        default:
          if (NodeUtil.isImmutableValue(next)
              && next.isEquivalentTo(value)) {
            // If the r-value of the expr assign is an immutable value,
            // and the value is used again shortly, then we can exploit
            // the assign here.
            exprParent.removeChild(expr);
            expr.removeChild(assign);
            parent.replaceChild(next, assign);
            return true;
          }
          // Return without inlining a thing
          return false;
      }
    }
	Node next = expr.getNext();
    
null


    return false;
	while (next != null) {
      switch (next.getType()) {
        case Token.AND:
        case Token.OR:
        case Token.HOOK:
        case Token.IF:
        case Token.RETURN:
        case Token.EXPR_RESULT:
          // Dive down the left side
          parent = next;
          next = next.getFirstChild();
          break;

        case Token.VAR:
          if (next.getFirstChild().hasChildren()) {
            parent = next.getFirstChild();
            next = parent.getFirstChild();
            break;
          }
          return false;

        case Token.GETPROP:
        case Token.NAME:
          if (next.isQualifiedName()) {
            String nextName = next.getQualifiedName();
            if (value.isQualifiedName() &&
                nextName.equals(value.getQualifiedName())) {
              // If the previous expression evaluates to value of a
              // qualified name, and that qualified name is used again
              // shortly, then we can exploit the assign here.

              // Verify the assignment doesn't change its own value.
              if (!isSafeReplacement(next, assign)) {
                return false;
              }

              exprParent.removeChild(expr);
              expr.removeChild(assign);
              parent.replaceChild(next, assign);
              return true;
            }
          }
          return false;

        case Token.ASSIGN:
          // Assigns are really tricky. In lots of cases, we want to inline
          // into the right side of the assign. But the left side of the
          // assign is evaluated first, and it may have convoluted logic:
          //   a = null;
          //   (a = b).c = null;
          // We don't want to exploit the first assign. Similarly:
          //   a.b = null;
          //   a.b.c = null;
          // We don't want to exploit the first assign either.
          //
          // To protect against this, we simply only inline when the left side
          // is guaranteed to evaluate to the same L-value no matter what.
          Node leftSide = next.getFirstChild();
          if (leftSide.isName() ||
              leftSide.isGetProp() &&
              leftSide.getFirstChild().isThis()) {
            // Dive down the right side of the assign.
            parent = next;
            next = leftSide.getNext();
            break;
          } else {
            return false;
          }

        default:
          if (NodeUtil.isImmutableValue(next)
              && next.isEquivalentTo(value)) {
            // If the r-value of the expr assign is an immutable value,
            // and the value is used again shortly, then we can exploit
            // the assign here.
            exprParent.removeChild(expr);
            expr.removeChild(assign);
            parent.replaceChild(next, assign);
            return true;
          }
          // Return without inlining a thing
          return false;
      }
    }

MOVE-BUGGY-STATEMENT
03:38:25.864 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:26.582 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:26.583 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:27.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:27.299 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:28.011 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:28.012 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:28.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:28.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:29.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:29.482 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===112
03:38:29.486 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node next = expr.getNext();
Node next = expr.getFirstChild();
Node next = expr.getLastChild();
Node next = expr.getLastSibling();
Node next = expr.getParent();
Node next = expr.detachFromParent();
Node next = expr.removeFirstChild();
Node next = expr.removeChildren();
Node next = expr.cloneNode();
Node next = expr.cloneTree();
03:38:29.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:30.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:30.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:30.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:30.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:31.696 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:31.697 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:32.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:32.391 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:33.100 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:33.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:33.817 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:33.818 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:34.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:34.562 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:35.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:35.269 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:35.988 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Node next = expr.getNext(next);
Node next = expr.getNext(parent);
Node next = expr.getNext(assign);
Node next = expr.getNext(exprParent);
Node next = expr.getNext(value);
03:38:35.989 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:36.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:36.698 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:37.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:37.454 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:38.187 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:38.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:38.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:38.963 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:39.704 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Node next = next.getNext();
Node next = parent.getNext();
Node next = assign.getNext();
Node next = exprParent.getNext();
Node next = value.getNext();
03:38:39.705 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:40.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:40.403 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:41.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:41.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:41.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:41.912 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:42.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:42.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:43.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (expr != null) {


}

03:38:43.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:44.081 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (expr == null) {
    return true;
}

if (expr == null) {
    return false;
}

if (expr == null) {
    throw new IllegalArgumentException("Empty variable: " + expr);
}

03:38:44.082 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:44.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:44.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:45.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:45.505 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:46.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:46.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:46.921 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:46.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===111
03:38:46.929 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node parent = exprParent;
if (exprParent != null) {


}

03:38:46.930 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:47.745 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (exprParent == null) {
    return true;
}

if (exprParent == null) {
    return false;
}

if (exprParent == null) {
    throw new IllegalArgumentException("Empty variable: " + exprParent);
}

03:38:47.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:48.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:48.432 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:49.174 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:49.175 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:49.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:38:49.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:50.592 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:50.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===110
03:38:50.600 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
Node assign = expr.getFirstChild();
Node assign = expr.getLastChild();
Node assign = expr.getNext();
Node assign = expr.getLastSibling();
Node assign = expr.getParent();
Node assign = expr.detachFromParent();
Node assign = expr.removeFirstChild();
Node assign = expr.removeChildren();
Node assign = expr.cloneNode();
Node assign = expr.cloneTree();
03:38:50.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:51.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:51.435 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:52.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:52.137 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:52.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:52.851 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:53.573 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:53.574 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:54.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:54.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:55.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:55.013 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:55.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:55.731 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:56.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:56.457 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:57.177 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Node assign = expr.getFirstChild(assign);
Node assign = expr.getFirstChild(exprParent);
Node assign = expr.getFirstChild(value);
03:38:57.178 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:57.896 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:57.897 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:58.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:38:58.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:38:59.357 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
Node assign = assign.getFirstChild();
Node assign = exprParent.getFirstChild();
Node assign = value.getFirstChild();
03:38:59.358 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:00.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:00.097 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:00.803 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:00.804 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:01.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (expr != null) {


}

03:39:01.529 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:02.277 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (expr == null) {
    return true;
}

if (expr == null) {
    return false;
}

if (expr == null) {
    throw new IllegalArgumentException("Empty variable: " + expr);
}

03:39:02.278 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:02.971 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:02.972 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:03.688 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:03.689 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:04.480 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:39:04.481 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:05.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:05.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===89
03:39:05.194 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
return NodeUtil.isImmutableValue(value);
return NodeUtil.isImmutableValue(isLValue);
return NodeUtil.isImmutableValue();
return NodeUtil.isImmutableValue(isLValue, value);
return NodeUtil.isImmutableValue(value, isLValue);
03:39:05.195 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:05.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:05.987 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:06.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:06.746 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:07.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:07.488 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:08.213 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
return NodeUtil.getNumberValue(value);
return NodeUtil.getInputId(value);
return NodeUtil.getVarsDeclaredInBranch(value);
return NodeUtil.getFunctionJSDocInfo(value);
return NodeUtil.getBestJSDocInfo(value);
return NodeUtil.newExpr(value);
return NodeUtil.getAssignedValue(value);
return NodeUtil.getLoopCodeBlock(value);
return NodeUtil.getConditionExpression(value);
return NodeUtil.getFunctionBody(value);
return NodeUtil.getAddingRoot(value);
return NodeUtil.getRootOfQualifiedName(value);
return NodeUtil.getPrototypeClassName(value);
return NodeUtil.newUndefinedNode(value);
return NodeUtil.getCatchBlock(value);
return NodeUtil.getFunctionParameters(value);
return NodeUtil.getBestLValue(value);
return NodeUtil.getRValueOfLValue(value);
return NodeUtil.getBestLValueOwner(value);
return NodeUtil.getOpFromAssignmentOp(value);
return NodeUtil.getStringValue(value);
return NodeUtil.getArrayElementStringValue(value);
return NodeUtil.arrayToString(value);
return NodeUtil.getFunctionName(value);
return NodeUtil.getNearestFunctionName(value);
return NodeUtil.getObjectLitKeyName(value);
return NodeUtil.getPrototypePropertyName(value);
return NodeUtil.getSourceName(value);
return NodeUtil.getBestLValueName(value);
return NodeUtil.getImpureBooleanValue(value);
return NodeUtil.getPureBooleanValue(value);
return NodeUtil.maybeAddFinally(value);
return NodeUtil.redeclareVarsInsideBranch(value);
return NodeUtil.isSymmetricOperation(value);
return NodeUtil.isRelationalOperation(value);
return NodeUtil.isEmptyBlock(value);
return NodeUtil.isSimpleOperator(value);
return NodeUtil.mayEffectMutableState(value);
return NodeUtil.mayHaveSideEffects(value);
return NodeUtil.constructorCallHasSideEffects(value);
return NodeUtil.functionCallHasSideEffects(value);
return NodeUtil.callHasLocalResult(value);
return NodeUtil.newHasLocalResult(value);
return NodeUtil.nodeTypeMayHaveSideEffects(value);
return NodeUtil.allArgsUnescapedLocal(value);
return NodeUtil.canBeSideEffected(value);
return NodeUtil.isUndefined(value);
return NodeUtil.isNullOrUndefined(value);
return NodeUtil.isImmutableResult(value);
return NodeUtil.isNumericResult(value);
return NodeUtil.isNumericResultHelper(value);
return NodeUtil.isBooleanResult(value);
return NodeUtil.isBooleanResultHelper(value);
return NodeUtil.mayBeString(value);
return NodeUtil.mayBeStringHelper(value);
return NodeUtil.isAssignmentOp(value);
return NodeUtil.containsFunction(value);
return NodeUtil.referencesThis(value);
return NodeUtil.isGet(value);
return NodeUtil.isVarDeclaration(value);
return NodeUtil.isExprAssign(value);
return NodeUtil.isExprCall(value);
return NodeUtil.isForIn(value);
return NodeUtil.isLoopStructure(value);
return NodeUtil.isWithinLoop(value);
return NodeUtil.isControlStructure(value);
return NodeUtil.isStatementBlock(value);
return NodeUtil.isStatement(value);
return NodeUtil.isStatementParent(value);
return NodeUtil.isSwitchCase(value);
return NodeUtil.isReferenceName(value);
return NodeUtil.isTryCatchNodeContainer(value);
return NodeUtil.tryMergeBlock(value);
return NodeUtil.isCallOrNew(value);
return NodeUtil.isFunctionDeclaration(value);
return NodeUtil.isHoistedFunctionDeclaration(value);
return NodeUtil.isFunctionExpression(value);
return NodeUtil.isBleedingFunctionName(value);
return NodeUtil.isEmptyFunctionExpression(value);
return NodeUtil.isVarArgsFunction(value);
return NodeUtil.isFunctionObjectCall(value);
return NodeUtil.isFunctionObjectApply(value);
return NodeUtil.isLValue(value);
return NodeUtil.isObjectLitKey(value);
return NodeUtil.isGetOrSetKey(value);
return NodeUtil.isPrototypePropertyDeclaration(value);
return NodeUtil.isPrototypeProperty(value);
return NodeUtil.hasFinally(value);
return NodeUtil.hasCatchHandler(value);
return NodeUtil.isConstantName(value);
return NodeUtil.evaluatesToLocalValue(value);
return NodeUtil.isCallOrNewTarget(value);
return NodeUtil.isToStringMethodCall(value);
return NodeUtil.isExpressionResultUsed(value);
return NodeUtil.isExecutedExactlyOnce(value);
return NodeUtil.isNaN(value);
return NodeUtil.getSourceFile(value);
03:39:08.319 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:09.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:09.096 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:09.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:09.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:10.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:10.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:11.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:11.385 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:12.164 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:12.165 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:12.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:12.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:13.738 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:13.739 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:14.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:14.528 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:15.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:15.291 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:16.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:16.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:16.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:16.825 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:17.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:17.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:18.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:18.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:19.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:19.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:19.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:19.873 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:20.655 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:20.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:21.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:21.438 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:22.240 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:22.241 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:23.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:23.037 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:23.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:23.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:24.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:24.539 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:25.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:25.290 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:26.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:26.074 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:26.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:26.857 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:27.640 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:27.641 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:28.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:28.448 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:29.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:29.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:29.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:29.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:30.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:30.725 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:31.566 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:31.567 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:32.320 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:32.321 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:33.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:33.036 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:33.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:33.762 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:34.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:34.474 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:35.188 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:35.189 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:35.940 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:35.941 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:36.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:36.654 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:37.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:37.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:38.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:38.077 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:38.784 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:38.785 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:39.500 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:39.501 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:40.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:40.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:40.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:40.910 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:41.618 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:41.619 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:42.354 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:42.355 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:43.101 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:43.102 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:43.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:43.795 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:44.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:44.554 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:45.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:45.268 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:45.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:45.970 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:46.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:46.656 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:47.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:47.380 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:48.105 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:48.106 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:48.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:48.841 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:49.543 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:49.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:50.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:50.235 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:50.933 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:50.934 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:51.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:51.645 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:52.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:52.350 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:53.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:53.058 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:53.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:53.776 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:54.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:54.509 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:55.198 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:55.199 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:55.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:55.949 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:56.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:56.643 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:57.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:57.356 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:58.052 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:58.053 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:58.753 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:58.754 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:39:59.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:39:59.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:00.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:00.196 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:00.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:00.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:01.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:01.600 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:02.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:02.273 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:02.978 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:02.979 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:03.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:03.735 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:04.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:04.452 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:05.135 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:05.136 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:05.828 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:05.829 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:06.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:06.515 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:07.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:07.201 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:07.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:07.922 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:08.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:08.621 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:09.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:09.366 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:10.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:10.067 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:10.748 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:10.749 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:11.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:11.467 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:12.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:12.143 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:12.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:12.833 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:13.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:13.513 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:14.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:14.218 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:14.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:14.905 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:15.596 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:15.597 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:16.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:16.327 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:17.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:17.030 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:17.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:17.719 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:18.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:18.443 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:19.183 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
return NodeUtil.isImmutableValue(true, value);
return NodeUtil.isImmutableValue(false, value);
return NodeUtil.isImmutableValue(value, true);
return NodeUtil.isImmutableValue(value, false);
03:40:19.184 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:19.902 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:19.903 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:20.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:20.617 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:21.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:21.340 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:22.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
return NodeUtil != null && NodeUtil.isImmutableValue(value);
return NodeUtil != null || NodeUtil.isImmutableValue(value);
03:40:22.033 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:22.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:22.751 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:23.476 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (value != null) {


}

03:40:23.485 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:24.219 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (value == null) {
    return true;
}

if (value == null) {
    return false;
}

if (value == null) {
    throw new IllegalArgumentException("Empty variable: " + value);
}

03:40:24.220 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:24.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:24.929 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:25.628 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:25.629 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:26.370 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:40:26.371 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:27.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:27.083 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===77
03:40:27.094 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
switch (value.getType()) {
      case Token.GETPROP:
        // Do not collapse GETPROPs on arbitrary objects, because
        // they may be implemented setter functions, and oftentimes
        // setter functions fail on native objects. This is OK for "THIS"
        // objects, because we assume that they are non-native.
        return !isLValue || value.getFirstChild().isThis();

      case Token.NAME:
        return true;

      default:
        return NodeUtil.isImmutableValue(value);
    }
if (value != null) {


}

03:40:27.095 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:27.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
if (value == null) {
    return true;
}

if (value == null) {
    return false;
}

if (value == null) {
    throw new IllegalArgumentException("Empty variable: " + value);
}

03:40:27.814 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:28.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:28.512 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:29.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:29.225 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:29.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 

03:40:29.953 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:40:30.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Closure-124 ---Fixer: fix fail because of failed compiling! 
03:40:30.659 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - com.google.javascript.jscomp.ExploitAssigns ===60
03:40:30.668 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
/**
   * Try to collapse the given assign into subsequent expressions.
   */
  private void collapseAssign(Node assign, Node expr,
      Node exprParent) {
    Node leftValue = assign.getFirstChild();
    Node rightValue = leftValue.getNext();
    if (isCollapsibleValue(leftValue, true) &&
        collapseAssignEqualTo(expr, exprParent, leftValue)) {
      reportCodeChange();
    } else if (isCollapsibleValue(rightValue, false) &&
        collapseAssignEqualTo(expr, exprParent, rightValue)) {
      reportCodeChange();
    } else if (rightValue.isAssign()) {
      // Recursively deal with nested assigns.
      collapseAssign(rightValue, expr, exprParent);
    }
  }
Exception in thread "main" java.lang.NullPointerException
	at edu.lu.uni.serval.fixminer.insertTemplate.InsertIfNullCheck.readReturnType(InsertIfNullCheck.java:69)
	at edu.lu.uni.serval.fixminer.insertTemplate.InsertIfNullCheck.generatePatches(InsertIfNullCheck.java:32)
	at edu.lu.uni.serval.bug.fixer.FixMinerFixer.generatePatches(FixMinerFixer.java:266)
	at edu.lu.uni.serval.bug.fixer.FixMinerFixer.fixWithMatchedFixTemplates(FixMinerFixer.java:229)
	at edu.lu.uni.serval.bug.fixer.FixMinerFixer.fixProcess(FixMinerFixer.java:87)
	at edu.lu.uni.serval.fixminer.main.Main.fixBug(Main.java:56)
	at edu.lu.uni.serval.fixminer.main.Main.main(Main.java:21)
