Setting JAVA_HOME to /mnt/efs/fs1/jdk1.7.0_80

Adding /mnt/efs/fs1/jdk1.7.0_80/bin: to PATH environmental variable


Java 7 environment setup completed
Math-78
03:06:13.608 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 Failed Tests: 1
Reading method line coverage from /mnt/efs/fs1/XiaInformation/AllMethods/Math/78.txt
Reading test line coverage from /mnt/efs/fs1/XiaInformation/LineCoverage/Math/78.txt
03:06:17.958 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - ProFL successfully initialized
03:06:17.981 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/generalSusInfo.profl
03:06:17.983 [main] INFO edu.lu.uni.serval.bug.fixer.kParFixer - =======kPARFixer: Start to fix suspicious code======
03:06:17.983 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - org.apache.commons.math.MathRuntimeException ===37
03:06:19.194 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
public class MathRuntimeException extends RuntimeException {

    /** Serializable version identifier. */
    private static final long serialVersionUID = -5128983364075381060L;

    /**
     * Pattern used to build the message.
     */
    private final String pattern;

    /**
     * Arguments used to build the message.
     */
    private final Object[] arguments;

    /**
     * Constructs a new <code>MathRuntimeException</code> with specified
     * formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     */
    public MathRuntimeException(final String pattern, final Object ... arguments) {
        this.pattern   = pattern;
        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
    }

    /**
     * Constructs a new <code>MathRuntimeException</code> with specified
     * nested <code>Throwable</code> root cause.
     *
     * @param rootCause  the exception or error that caused this exception
     *                   to be thrown.
     */
    public MathRuntimeException(final Throwable rootCause) {
        super(rootCause);
        this.pattern   = getMessage();
        this.arguments = new Object[0];
    }

    /**
     * Constructs a new <code>MathRuntimeException</code> with specified
     * formatted detail message and nested <code>Throwable</code> root cause.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param rootCause the exception or error that caused this exception
     * to be thrown.
     * @param pattern format specifier
     * @param arguments format arguments
     */
    public MathRuntimeException(final Throwable rootCause,
                                final String pattern, final Object ... arguments) {
        super(rootCause);
        this.pattern   = pattern;
        this.arguments = (arguments == null) ? new Object[0] : arguments.clone();
    }

    /**
     * Translate a string to a given locale.
     * @param s string to translate
     * @param locale locale into which to translate the string
     * @return translated string or original string
     * for unsupported locales or unknown strings
     */
    private static String translate(final String s, final Locale locale) {
        try {
            ResourceBundle bundle =
                    ResourceBundle.getBundle("org.apache.commons.math.MessagesResources", locale);
            if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {
                // the value of the resource is the translated string
                return bundle.getString(s);
            }

        } catch (MissingResourceException mre) {
            // do nothing here
        }

        // the locale is not supported or the resource is unknown
        // don't translate and fall back to using the string as is
        return s;

    }

    /**
     * Builds a message string by from a pattern and its arguments.
     * @param locale Locale in which the message should be translated
     * @param pattern format specifier
     * @param arguments format arguments
     * @return a message string
     */
    private static String buildMessage(final Locale locale, final String pattern,
                                       final Object ... arguments) {
        return (pattern == null) ? "" : new MessageFormat(translate(pattern, locale), locale).format(arguments);
    }

    /** Gets the pattern used to build the message of this throwable.
     *
     * @return the pattern used to build the message of this throwable
     */
    public String getPattern() {
        return pattern;
    }

    /** Gets the arguments used to build the message of this throwable.
     *
     * @return the arguments used to build the message of this throwable
     */
    public Object[] getArguments() {
        return arguments.clone();
    }

    /** Gets the message in a specified locale.
     *
     * @param locale Locale in which the message should be translated
     *
     * @return localized message
     */
    public String getMessage(final Locale locale) {
        return buildMessage(locale, pattern, arguments);
    }

    /** {@inheritDoc} */
    @Override
    public String getMessage() {
        return getMessage(Locale.US);
    }

    /** {@inheritDoc} */
    @Override
    public String getLocalizedMessage() {
        return getMessage(Locale.getDefault());
    }

    /**
     * Prints the stack trace of this exception to the standard error stream.
     */
    @Override
    public void printStackTrace() {
        printStackTrace(System.err);
    }

    /**
     * Prints the stack trace of this exception to the specified stream.
     *
     * @param out  the <code>PrintStream</code> to use for output
     */
    @Override
    public void printStackTrace(final PrintStream out) {
        synchronized (out) {
            PrintWriter pw = new PrintWriter(out, false);
            printStackTrace(pw);
            // Flush the PrintWriter before it's GC'ed.
            pw.flush();
        }
    }

    /**
     * Constructs a new <code>ArithmeticException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ArithmeticException createArithmeticException(final String pattern,
                                                                final Object ... arguments) {
        return new ArithmeticException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 7705628723242533939L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>ArrayIndexOutOfBoundsException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ArrayIndexOutOfBoundsException createArrayIndexOutOfBoundsException(final String pattern,
                                                                                      final Object ... arguments) {
        return new ArrayIndexOutOfBoundsException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -3394748305449283486L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>EOFException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static EOFException createEOFException(final String pattern,
                                                  final Object ... arguments) {
        return new EOFException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 279461544586092584L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>IOException</code> with specified nested
     * <code>Throwable</code> root cause.
     * <p>This factory method allows chaining of other exceptions within an
     * <code>IOException</code> even for Java 5. The constructor for
     * <code>IOException</code> with a cause parameter was introduced only
     * with Java 6.</p>
     * @param rootCause the exception or error that caused this exception
     * to be thrown.
     * @return built exception
     */
    public static IOException createIOException(final Throwable rootCause) {
        IOException ioe = new IOException(rootCause.getLocalizedMessage());
        ioe.initCause(rootCause);
        return ioe;
    }

    /**
     * Constructs a new <code>IllegalArgumentException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static IllegalArgumentException createIllegalArgumentException(final String pattern,
                                                                          final Object ... arguments) {
        return new IllegalArgumentException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -6555453980658317913L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>IllegalArgumentException</code> with specified nested
     * <code>Throwable</code> root cause.
     * @param rootCause the exception or error that caused this exception
     * to be thrown.
     * @return built exception
     */
    public static IllegalArgumentException createIllegalArgumentException(final Throwable rootCause) {
        IllegalArgumentException iae = new IllegalArgumentException(rootCause.getLocalizedMessage());
        iae.initCause(rootCause);
        return iae;
    }

    /**
     * Constructs a new <code>IllegalStateException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static IllegalStateException createIllegalStateException(final String pattern,
                                                                    final Object ... arguments) {
        return new IllegalStateException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -95247648156277208L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>ConcurrentModificationException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ConcurrentModificationException createConcurrentModificationException(final String pattern,
                                                                                        final Object ... arguments) {
        return new ConcurrentModificationException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 6134247282754009421L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>NoSuchElementException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static NoSuchElementException createNoSuchElementException(final String pattern,
                                                                      final Object ... arguments) {
        return new NoSuchElementException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = 7304273322489425799L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /**
     * Constructs a new <code>NullPointerException</code> with specified formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static NullPointerException createNullPointerException(final String pattern,
                                                                  final Object ... arguments) {
        return new NullPointerException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -3075660477939965216L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

   /**
     * Constructs a new <code>ParseException</code> with specified
     * formatted detail message.
     * Message formatting is delegated to {@link java.text.MessageFormat}.
     * @param offset offset at which error occurred
     * @param pattern format specifier
     * @param arguments format arguments
     * @return built exception
     */
    public static ParseException createParseException(final int offset,
                                                      final String pattern,
                                                      final Object ... arguments) {
        return new ParseException(null, offset) {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -1103502177342465975L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, arguments);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, arguments);
            }

        };
    }

    /** Create an {@link java.lang.RuntimeException} for an internal error.
     * @param cause underlying cause
     * @return an {@link java.lang.RuntimeException} for an internal error
     */
    public static RuntimeException createInternalError(final Throwable cause) {

        final String pattern  = "internal error, please fill a bug report at {0}";
        final String argument = "https://issues.apache.org/jira/browse/MATH";

        return new RuntimeException() {

            /** Serializable version identifier. */
            private static final long serialVersionUID = -201865440834027016L;

            /** {@inheritDoc} */
            @Override
            public String getMessage() {
                return buildMessage(Locale.US, pattern, argument);
            }

            /** {@inheritDoc} */
            @Override
            public String getLocalizedMessage() {
                return buildMessage(Locale.getDefault(), pattern, argument);
            }

        };

    }

}
03:06:19.211 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - org.apache.commons.math.analysis.solvers.BrentSolver ===178
03:06:19.362 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Suspicious Code: 
throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, yMax);
03:06:19.705 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        sign,
                        min, max, yMin, yMax);
03:06:19.705 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        yMax,
                        min, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        yMin,
                        min, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        ret,
                        min, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        f,
                        min, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        min,
                        min, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        max,
                        min, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        serialVersionUID,
                        min, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        serialVersionUID, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        sign, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        yMax, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        yMin, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        ret, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        max, max, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, serialVersionUID, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, sign, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, yMax, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, yMin, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, ret, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, min, yMin, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, serialVersionUID, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, sign, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMax, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, ret, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, min, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, max, yMax);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, serialVersionUID);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, sign);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, yMin);
03:06:19.706 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, ret);
03:06:19.707 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, min);
03:06:19.707 [main] DEBUG edu.lu.uni.serval.par.templates.FixTemplate - Patch Candiate: throw MathRuntimeException.createIllegalArgumentException(
                        "function values at endpoints do not have different signs.  " +
                        "Endpoints: [{0}, {1}], Values: [{2}, {3}]",
                        min, max, yMin, max);
03:06:19.708 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:20.974 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:20.975 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:22.222 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:22.223 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:23.546 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:23.547 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:25.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:25.020 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:26.280 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:26.281 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:27.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:27.741 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:29.034 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:29.035 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:30.412 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Math-78 ---Fixer: fix fail because of failed compiling! 
03:06:30.413 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:31.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:06:31.752 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:06:51.221 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:06:51.222 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:06:51.222 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:06:51.222 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:06:51.223 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
03:06:51.232 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/aggregatedSusInfo.profl
03:06:51.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
03:06:51.238 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Math-78
03:06:51.239 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:06:52.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:06:52.915 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:07:12.048 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:07:12.048 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:07:12.048 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:07:12.049 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:07:12.049 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
03:07:12.133 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/aggregatedSusInfo.profl
03:07:12.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
03:07:12.133 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Math-78
03:07:12.134 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:07:13.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:07:13.666 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:07:32.495 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:07:32.496 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:07:32.496 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:07:32.496 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:07:32.496 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
03:07:32.544 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/aggregatedSusInfo.profl
03:07:32.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
03:07:32.544 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Math-78
03:07:32.545 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:07:33.786 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:07:33.787 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:07:51.250 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:07:51.250 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:07:51.250 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:07:51.250 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:07:51.251 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
03:07:51.683 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/aggregatedSusInfo.profl
03:07:51.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
03:07:51.683 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Math-78
03:07:51.684 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:07:52.796 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:07:52.797 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:08:09.363 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:08:09.364 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:08:09.364 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:08:09.364 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:08:09.364 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
03:08:13.789 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/aggregatedSusInfo.profl
03:08:13.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
03:08:13.789 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Math-78
03:08:13.790 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:08:14.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:08:14.874 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:08:30.793 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:08:30.793 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:08:30.793 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:08:30.794 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:08:30.794 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
03:09:41.593 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/aggregatedSusInfo.profl
03:09:41.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
03:09:41.593 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Math-78
03:09:41.594 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:09:42.525 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:09:42.526 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:09:54.708 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:09:54.708 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:09:54.709 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:09:54.709 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:09:54.709 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
03:23:52.264 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Profl information saved to /home/ubuntu/repair-tool/kPar/ProFL-kParFixer/Math-78/aggregatedSusInfo.profl
03:23:52.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Mutated = org.apache.commons.math.analysis.solvers.BrentSolver:solve(Lorg/apache/commons/math/analysis/UnivariateRealFunction;DD)D in org.apache.commons.math.analysis.solvers.BrentSolver:178
03:23:52.264 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed Tests after fixing: 1 Math-78
03:23:52.265 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Compiling
03:23:53.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Finish of compiling.
03:23:53.163 [main] DEBUG edu.lu.uni.serval.bug.fixer.AbstractFixer - Test previously failed test cases.
03:24:04.813 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests BEFORE patch = 1, [org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:24:04.813 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Failed tests AFTER patch = 1, [- org.apache.commons.math.ode.events.EventStateTest::closeEvents]
03:24:04.813 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Fail->Fail test case ->org.apache.commons.math.ode.events.EventStateTest::closeEvents
03:24:04.813 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - Patch test results ff=1, fp=0, pf=0, pp=Unknown
03:24:04.813 [main] INFO edu.lu.uni.serval.bug.fixer.AbstractFixer - [ProFL] NoneFix found
